
Lab-3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003138  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003244  08003244  00013244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003268  08003268  00020054  2**0
                  CONTENTS
  4 .ARM          00000000  08003268  08003268  00020054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003268  08003268  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003268  08003268  00013268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800326c  0800326c  0001326c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08003270  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  20000054  080032c4  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  080032c4  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .debug_info   000094ae  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001927  00000000  00000000  0002952b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d0  00000000  00000000  0002ae58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f8  00000000  00000000  0002b828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001691f  00000000  00000000  0002c120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b156  00000000  00000000  00042a3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082551  00000000  00000000  0004db95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d00e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000276c  00000000  00000000  000d013c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000054 	.word	0x20000054
 8000128:	00000000 	.word	0x00000000
 800012c:	0800322c 	.word	0x0800322c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000058 	.word	0x20000058
 8000148:	0800322c 	.word	0x0800322c

0800014c <is_BUTTON_MODE_pressed>:
 	 	   current_BUTTON_SAVE 		= RELEASED_STATE,
		   pre_stable_BUTTON_SAVE 	= RELEASED_STATE,
		   BUTTON_SAVE_flag = 0;		   

static bool is_BUTTON_MODE_pressed(void)
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if (BUTTON_MODE_flag == 1)
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <is_BUTTON_MODE_pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <is_BUTTON_MODE_pressed+0x16>
	{
		BUTTON_MODE_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <is_BUTTON_MODE_pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return true;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <is_BUTTON_MODE_pressed+0x18>
	}
	else return false;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000070 	.word	0x20000070

08000170 <is_BUTTON_MODIFY_pressed>:

static bool is_BUTTON_MODIFY_pressed(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if (BUTTON_MODIFY_flag == 1)
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <is_BUTTON_MODIFY_pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <is_BUTTON_MODIFY_pressed+0x16>
	{
		BUTTON_MODIFY_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <is_BUTTON_MODIFY_pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return true;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <is_BUTTON_MODIFY_pressed+0x18>
	}
	else return false;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000074 	.word	0x20000074

08000194 <is_BUTTON_SAVE_pressed>:

static bool is_BUTTON_SAVE_pressed(void)
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if (BUTTON_SAVE_flag == 1)
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <is_BUTTON_SAVE_pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <is_BUTTON_SAVE_pressed+0x16>
	{
		BUTTON_SAVE_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <is_BUTTON_SAVE_pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return true;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <is_BUTTON_SAVE_pressed+0x18>
	}
	else return false;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	20000078 	.word	0x20000078

080001b8 <get_BUTTONs>:

extern void get_BUTTONs(void) //được gọi mỗi 10ms
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	BUTTON_MODE_Reg[0] = BUTTON_MODE_Reg[1];
 80001bc:	4b45      	ldr	r3, [pc, #276]	; (80002d4 <get_BUTTONs+0x11c>)
 80001be:	685b      	ldr	r3, [r3, #4]
 80001c0:	4a44      	ldr	r2, [pc, #272]	; (80002d4 <get_BUTTONs+0x11c>)
 80001c2:	6013      	str	r3, [r2, #0]
	BUTTON_MODE_Reg[1] = current_BUTTON_MODE;
 80001c4:	4b44      	ldr	r3, [pc, #272]	; (80002d8 <get_BUTTONs+0x120>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	4a42      	ldr	r2, [pc, #264]	; (80002d4 <get_BUTTONs+0x11c>)
 80001ca:	6053      	str	r3, [r2, #4]
	current_BUTTON_MODE = HAL_GPIO_ReadPin(BUTTON_MODE_GPIO_Port, BUTTON_MODE_Pin);
 80001cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001d0:	4842      	ldr	r0, [pc, #264]	; (80002dc <get_BUTTONs+0x124>)
 80001d2:	f001 fff3 	bl	80021bc <HAL_GPIO_ReadPin>
 80001d6:	4603      	mov	r3, r0
 80001d8:	461a      	mov	r2, r3
 80001da:	4b3f      	ldr	r3, [pc, #252]	; (80002d8 <get_BUTTONs+0x120>)
 80001dc:	601a      	str	r2, [r3, #0]

	if ((BUTTON_MODE_Reg[0] == BUTTON_MODE_Reg[1]) && (BUTTON_MODE_Reg[1] == current_BUTTON_MODE)) //khi phím nhấn ổn định
 80001de:	4b3d      	ldr	r3, [pc, #244]	; (80002d4 <get_BUTTONs+0x11c>)
 80001e0:	681a      	ldr	r2, [r3, #0]
 80001e2:	4b3c      	ldr	r3, [pc, #240]	; (80002d4 <get_BUTTONs+0x11c>)
 80001e4:	685b      	ldr	r3, [r3, #4]
 80001e6:	429a      	cmp	r2, r3
 80001e8:	d116      	bne.n	8000218 <get_BUTTONs+0x60>
 80001ea:	4b3a      	ldr	r3, [pc, #232]	; (80002d4 <get_BUTTONs+0x11c>)
 80001ec:	685a      	ldr	r2, [r3, #4]
 80001ee:	4b3a      	ldr	r3, [pc, #232]	; (80002d8 <get_BUTTONs+0x120>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	429a      	cmp	r2, r3
 80001f4:	d110      	bne.n	8000218 <get_BUTTONs+0x60>
	{
		if (pre_stable_BUTTON_MODE != current_BUTTON_MODE) //trường hợp nhấn THẢ, hoặc là lần nhấn đầu tiên
 80001f6:	4b3a      	ldr	r3, [pc, #232]	; (80002e0 <get_BUTTONs+0x128>)
 80001f8:	681a      	ldr	r2, [r3, #0]
 80001fa:	4b37      	ldr	r3, [pc, #220]	; (80002d8 <get_BUTTONs+0x120>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	429a      	cmp	r2, r3
 8000200:	d00a      	beq.n	8000218 <get_BUTTONs+0x60>
		{
			pre_stable_BUTTON_MODE = current_BUTTON_MODE;
 8000202:	4b35      	ldr	r3, [pc, #212]	; (80002d8 <get_BUTTONs+0x120>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a36      	ldr	r2, [pc, #216]	; (80002e0 <get_BUTTONs+0x128>)
 8000208:	6013      	str	r3, [r2, #0]
			if (current_BUTTON_MODE == PRESSED_STATE)
 800020a:	4b33      	ldr	r3, [pc, #204]	; (80002d8 <get_BUTTONs+0x120>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	2b00      	cmp	r3, #0
 8000210:	d102      	bne.n	8000218 <get_BUTTONs+0x60>
			{
				//TO DO: set the flag
				BUTTON_MODE_flag = 1;
 8000212:	4b34      	ldr	r3, [pc, #208]	; (80002e4 <get_BUTTONs+0x12c>)
 8000214:	2201      	movs	r2, #1
 8000216:	601a      	str	r2, [r3, #0]
			}
		}
		*/
	}

	BUTTON_MODIFY_Reg[0] = BUTTON_MODIFY_Reg[1];
 8000218:	4b33      	ldr	r3, [pc, #204]	; (80002e8 <get_BUTTONs+0x130>)
 800021a:	685b      	ldr	r3, [r3, #4]
 800021c:	4a32      	ldr	r2, [pc, #200]	; (80002e8 <get_BUTTONs+0x130>)
 800021e:	6013      	str	r3, [r2, #0]
	BUTTON_MODIFY_Reg[1] = current_BUTTON_MODIFY;
 8000220:	4b32      	ldr	r3, [pc, #200]	; (80002ec <get_BUTTONs+0x134>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a30      	ldr	r2, [pc, #192]	; (80002e8 <get_BUTTONs+0x130>)
 8000226:	6053      	str	r3, [r2, #4]
	current_BUTTON_MODIFY = HAL_GPIO_ReadPin(BUTTON_MODIFY_GPIO_Port, BUTTON_MODIFY_Pin);
 8000228:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800022c:	482b      	ldr	r0, [pc, #172]	; (80002dc <get_BUTTONs+0x124>)
 800022e:	f001 ffc5 	bl	80021bc <HAL_GPIO_ReadPin>
 8000232:	4603      	mov	r3, r0
 8000234:	461a      	mov	r2, r3
 8000236:	4b2d      	ldr	r3, [pc, #180]	; (80002ec <get_BUTTONs+0x134>)
 8000238:	601a      	str	r2, [r3, #0]

	if ((BUTTON_MODIFY_Reg[0] == BUTTON_MODIFY_Reg[1]) && (BUTTON_MODIFY_Reg[1] == current_BUTTON_MODIFY)) //khi phím nhấn ổn định
 800023a:	4b2b      	ldr	r3, [pc, #172]	; (80002e8 <get_BUTTONs+0x130>)
 800023c:	681a      	ldr	r2, [r3, #0]
 800023e:	4b2a      	ldr	r3, [pc, #168]	; (80002e8 <get_BUTTONs+0x130>)
 8000240:	685b      	ldr	r3, [r3, #4]
 8000242:	429a      	cmp	r2, r3
 8000244:	d116      	bne.n	8000274 <get_BUTTONs+0xbc>
 8000246:	4b28      	ldr	r3, [pc, #160]	; (80002e8 <get_BUTTONs+0x130>)
 8000248:	685a      	ldr	r2, [r3, #4]
 800024a:	4b28      	ldr	r3, [pc, #160]	; (80002ec <get_BUTTONs+0x134>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	429a      	cmp	r2, r3
 8000250:	d110      	bne.n	8000274 <get_BUTTONs+0xbc>
	{
		if (pre_stable_BUTTON_MODIFY != current_BUTTON_MODIFY) //trường hợp nhấn THẢ, hoặc là lần nhấn đầu tiên
 8000252:	4b27      	ldr	r3, [pc, #156]	; (80002f0 <get_BUTTONs+0x138>)
 8000254:	681a      	ldr	r2, [r3, #0]
 8000256:	4b25      	ldr	r3, [pc, #148]	; (80002ec <get_BUTTONs+0x134>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	429a      	cmp	r2, r3
 800025c:	d00a      	beq.n	8000274 <get_BUTTONs+0xbc>
		{
			pre_stable_BUTTON_MODIFY = current_BUTTON_MODIFY;
 800025e:	4b23      	ldr	r3, [pc, #140]	; (80002ec <get_BUTTONs+0x134>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4a23      	ldr	r2, [pc, #140]	; (80002f0 <get_BUTTONs+0x138>)
 8000264:	6013      	str	r3, [r2, #0]
			if (current_BUTTON_MODIFY == PRESSED_STATE)
 8000266:	4b21      	ldr	r3, [pc, #132]	; (80002ec <get_BUTTONs+0x134>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	2b00      	cmp	r3, #0
 800026c:	d102      	bne.n	8000274 <get_BUTTONs+0xbc>
			{
				//TO DO: set the flag
				BUTTON_MODIFY_flag = 1;
 800026e:	4b21      	ldr	r3, [pc, #132]	; (80002f4 <get_BUTTONs+0x13c>)
 8000270:	2201      	movs	r2, #1
 8000272:	601a      	str	r2, [r3, #0]
			}
		}
	}

	BUTTON_SAVE_Reg[0] = BUTTON_SAVE_Reg[1];
 8000274:	4b20      	ldr	r3, [pc, #128]	; (80002f8 <get_BUTTONs+0x140>)
 8000276:	685b      	ldr	r3, [r3, #4]
 8000278:	4a1f      	ldr	r2, [pc, #124]	; (80002f8 <get_BUTTONs+0x140>)
 800027a:	6013      	str	r3, [r2, #0]
	BUTTON_SAVE_Reg[1] = current_BUTTON_SAVE;
 800027c:	4b1f      	ldr	r3, [pc, #124]	; (80002fc <get_BUTTONs+0x144>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a1d      	ldr	r2, [pc, #116]	; (80002f8 <get_BUTTONs+0x140>)
 8000282:	6053      	str	r3, [r2, #4]
	current_BUTTON_SAVE = HAL_GPIO_ReadPin(BUTTON_SAVE_GPIO_Port, BUTTON_SAVE_Pin);
 8000284:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000288:	4814      	ldr	r0, [pc, #80]	; (80002dc <get_BUTTONs+0x124>)
 800028a:	f001 ff97 	bl	80021bc <HAL_GPIO_ReadPin>
 800028e:	4603      	mov	r3, r0
 8000290:	461a      	mov	r2, r3
 8000292:	4b1a      	ldr	r3, [pc, #104]	; (80002fc <get_BUTTONs+0x144>)
 8000294:	601a      	str	r2, [r3, #0]

	if ((BUTTON_SAVE_Reg[0] == BUTTON_SAVE_Reg[1]) && (BUTTON_SAVE_Reg[1] == current_BUTTON_SAVE)) //khi phím nhấn ổn định
 8000296:	4b18      	ldr	r3, [pc, #96]	; (80002f8 <get_BUTTONs+0x140>)
 8000298:	681a      	ldr	r2, [r3, #0]
 800029a:	4b17      	ldr	r3, [pc, #92]	; (80002f8 <get_BUTTONs+0x140>)
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	429a      	cmp	r2, r3
 80002a0:	d116      	bne.n	80002d0 <get_BUTTONs+0x118>
 80002a2:	4b15      	ldr	r3, [pc, #84]	; (80002f8 <get_BUTTONs+0x140>)
 80002a4:	685a      	ldr	r2, [r3, #4]
 80002a6:	4b15      	ldr	r3, [pc, #84]	; (80002fc <get_BUTTONs+0x144>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	429a      	cmp	r2, r3
 80002ac:	d110      	bne.n	80002d0 <get_BUTTONs+0x118>
	{
		if (pre_stable_BUTTON_SAVE != current_BUTTON_SAVE) //trường hợp nhấn THẢ, hoặc là lần nhấn đầu tiên
 80002ae:	4b14      	ldr	r3, [pc, #80]	; (8000300 <get_BUTTONs+0x148>)
 80002b0:	681a      	ldr	r2, [r3, #0]
 80002b2:	4b12      	ldr	r3, [pc, #72]	; (80002fc <get_BUTTONs+0x144>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	429a      	cmp	r2, r3
 80002b8:	d00a      	beq.n	80002d0 <get_BUTTONs+0x118>
		{
			pre_stable_BUTTON_SAVE = current_BUTTON_SAVE;
 80002ba:	4b10      	ldr	r3, [pc, #64]	; (80002fc <get_BUTTONs+0x144>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	4a10      	ldr	r2, [pc, #64]	; (8000300 <get_BUTTONs+0x148>)
 80002c0:	6013      	str	r3, [r2, #0]
			if (current_BUTTON_SAVE == PRESSED_STATE)
 80002c2:	4b0e      	ldr	r3, [pc, #56]	; (80002fc <get_BUTTONs+0x144>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d102      	bne.n	80002d0 <get_BUTTONs+0x118>
			{
				//TO DO: set the flag
				BUTTON_SAVE_flag = 1;
 80002ca:	4b0e      	ldr	r3, [pc, #56]	; (8000304 <get_BUTTONs+0x14c>)
 80002cc:	2201      	movs	r2, #1
 80002ce:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 80002d0:	bf00      	nop
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	20000000 	.word	0x20000000
 80002d8:	20000008 	.word	0x20000008
 80002dc:	40010800 	.word	0x40010800
 80002e0:	2000000c 	.word	0x2000000c
 80002e4:	20000070 	.word	0x20000070
 80002e8:	20000010 	.word	0x20000010
 80002ec:	20000018 	.word	0x20000018
 80002f0:	2000001c 	.word	0x2000001c
 80002f4:	20000074 	.word	0x20000074
 80002f8:	20000020 	.word	0x20000020
 80002fc:	20000028 	.word	0x20000028
 8000300:	2000002c 	.word	0x2000002c
 8000304:	20000078 	.word	0x20000078

08000308 <fsm_input_processing>:

static int counter_buffer;

extern void fsm_input_processing(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	switch (current_MODE_status)
 800030c:	4b90      	ldr	r3, [pc, #576]	; (8000550 <fsm_input_processing+0x248>)
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	2b03      	cmp	r3, #3
 8000312:	f200 8194 	bhi.w	800063e <fsm_input_processing+0x336>
 8000316:	a201      	add	r2, pc, #4	; (adr r2, 800031c <fsm_input_processing+0x14>)
 8000318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800031c:	0800032d 	.word	0x0800032d
 8000320:	08000377 	.word	0x08000377
 8000324:	08000463 	.word	0x08000463
 8000328:	08000571 	.word	0x08000571
	{ 
		case NORMAL_MODE:
			if (timer0_flag == 1)
 800032c:	4b89      	ldr	r3, [pc, #548]	; (8000554 <fsm_input_processing+0x24c>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	2b01      	cmp	r3, #1
 8000332:	d105      	bne.n	8000340 <fsm_input_processing+0x38>
			{
				setTimer0(1000);
 8000334:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000338:	f001 fc1a 	bl	8001b70 <setTimer0>
				traffic_light_fsm();
 800033c:	f001 fa1e 	bl	800177c <traffic_light_fsm>
			}
			
			if (is_BUTTON_MODE_pressed())
 8000340:	f7ff ff04 	bl	800014c <is_BUTTON_MODE_pressed>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	f000 817b 	beq.w	8000642 <fsm_input_processing+0x33a>
			{
				current_MODE_status = MODIFY_RED_MODE;
 800034c:	4b80      	ldr	r3, [pc, #512]	; (8000550 <fsm_input_processing+0x248>)
 800034e:	2201      	movs	r2, #1
 8000350:	701a      	strb	r2, [r3, #0]
				setTimer0(250);
 8000352:	20fa      	movs	r0, #250	; 0xfa
 8000354:	f001 fc0c 	bl	8001b70 <setTimer0>
				counter_buffer = RED_light_counter;
 8000358:	4b7f      	ldr	r3, [pc, #508]	; (8000558 <fsm_input_processing+0x250>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a7f      	ldr	r2, [pc, #508]	; (800055c <fsm_input_processing+0x254>)
 800035e:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(RED0_GPIO_Port, RED0_Pin, 1);
 8000360:	2201      	movs	r2, #1
 8000362:	2120      	movs	r1, #32
 8000364:	487e      	ldr	r0, [pc, #504]	; (8000560 <fsm_input_processing+0x258>)
 8000366:	f001 ff40 	bl	80021ea <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, 1);
 800036a:	2201      	movs	r2, #1
 800036c:	2108      	movs	r1, #8
 800036e:	487c      	ldr	r0, [pc, #496]	; (8000560 <fsm_input_processing+0x258>)
 8000370:	f001 ff3b 	bl	80021ea <HAL_GPIO_WritePin>
			}
			break;
 8000374:	e165      	b.n	8000642 <fsm_input_processing+0x33a>
		
		case MODIFY_RED_MODE:
            HAL_GPIO_WritePin(YELLOW0_GPIO_Port, YELLOW0_Pin, 0);
 8000376:	2200      	movs	r2, #0
 8000378:	2140      	movs	r1, #64	; 0x40
 800037a:	4879      	ldr	r0, [pc, #484]	; (8000560 <fsm_input_processing+0x258>)
 800037c:	f001 ff35 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GREEN0_GPIO_Port, GREEN0_Pin, 0);
 8000380:	2200      	movs	r2, #0
 8000382:	2180      	movs	r1, #128	; 0x80
 8000384:	4876      	ldr	r0, [pc, #472]	; (8000560 <fsm_input_processing+0x258>)
 8000386:	f001 ff30 	bl	80021ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, 0);
 800038a:	2200      	movs	r2, #0
 800038c:	2104      	movs	r1, #4
 800038e:	4874      	ldr	r0, [pc, #464]	; (8000560 <fsm_input_processing+0x258>)
 8000390:	f001 ff2b 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, 0);
 8000394:	2200      	movs	r2, #0
 8000396:	2102      	movs	r1, #2
 8000398:	4871      	ldr	r0, [pc, #452]	; (8000560 <fsm_input_processing+0x258>)
 800039a:	f001 ff26 	bl	80021ea <HAL_GPIO_WritePin>
			SEG7_buffer[0] = 2;
 800039e:	4b71      	ldr	r3, [pc, #452]	; (8000564 <fsm_input_processing+0x25c>)
 80003a0:	2202      	movs	r2, #2
 80003a2:	601a      	str	r2, [r3, #0]
			SEG7_buffer[1] = counter_buffer / 10;
 80003a4:	4b6d      	ldr	r3, [pc, #436]	; (800055c <fsm_input_processing+0x254>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a6f      	ldr	r2, [pc, #444]	; (8000568 <fsm_input_processing+0x260>)
 80003aa:	fb82 1203 	smull	r1, r2, r2, r3
 80003ae:	1092      	asrs	r2, r2, #2
 80003b0:	17db      	asrs	r3, r3, #31
 80003b2:	1ad3      	subs	r3, r2, r3
 80003b4:	4a6b      	ldr	r2, [pc, #428]	; (8000564 <fsm_input_processing+0x25c>)
 80003b6:	6053      	str	r3, [r2, #4]
			SEG7_buffer[2] = counter_buffer % 10;
 80003b8:	4b68      	ldr	r3, [pc, #416]	; (800055c <fsm_input_processing+0x254>)
 80003ba:	6819      	ldr	r1, [r3, #0]
 80003bc:	4b6a      	ldr	r3, [pc, #424]	; (8000568 <fsm_input_processing+0x260>)
 80003be:	fb83 2301 	smull	r2, r3, r3, r1
 80003c2:	109a      	asrs	r2, r3, #2
 80003c4:	17cb      	asrs	r3, r1, #31
 80003c6:	1ad2      	subs	r2, r2, r3
 80003c8:	4613      	mov	r3, r2
 80003ca:	009b      	lsls	r3, r3, #2
 80003cc:	4413      	add	r3, r2
 80003ce:	005b      	lsls	r3, r3, #1
 80003d0:	1aca      	subs	r2, r1, r3
 80003d2:	4b64      	ldr	r3, [pc, #400]	; (8000564 <fsm_input_processing+0x25c>)
 80003d4:	609a      	str	r2, [r3, #8]
			update7SEG();
 80003d6:	f000 fa65 	bl	80008a4 <update7SEG>

			if (timer0_flag == 1)
 80003da:	4b5e      	ldr	r3, [pc, #376]	; (8000554 <fsm_input_processing+0x24c>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	2b01      	cmp	r3, #1
 80003e0:	d10a      	bne.n	80003f8 <fsm_input_processing+0xf0>
			{
				setTimer0(250);
 80003e2:	20fa      	movs	r0, #250	; 0xfa
 80003e4:	f001 fbc4 	bl	8001b70 <setTimer0>
				HAL_GPIO_TogglePin(RED0_GPIO_Port, RED0_Pin);
 80003e8:	2120      	movs	r1, #32
 80003ea:	485d      	ldr	r0, [pc, #372]	; (8000560 <fsm_input_processing+0x258>)
 80003ec:	f001 ff15 	bl	800221a <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(RED1_GPIO_Port, RED1_Pin);
 80003f0:	2108      	movs	r1, #8
 80003f2:	485b      	ldr	r0, [pc, #364]	; (8000560 <fsm_input_processing+0x258>)
 80003f4:	f001 ff11 	bl	800221a <HAL_GPIO_TogglePin>
			}
			if (is_BUTTON_MODIFY_pressed())
 80003f8:	f7ff feba 	bl	8000170 <is_BUTTON_MODIFY_pressed>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d00b      	beq.n	800041a <fsm_input_processing+0x112>
			{
				counter_buffer++;
 8000402:	4b56      	ldr	r3, [pc, #344]	; (800055c <fsm_input_processing+0x254>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	3301      	adds	r3, #1
 8000408:	4a54      	ldr	r2, [pc, #336]	; (800055c <fsm_input_processing+0x254>)
 800040a:	6013      	str	r3, [r2, #0]
				if (counter_buffer >= 100) counter_buffer = 1;
 800040c:	4b53      	ldr	r3, [pc, #332]	; (800055c <fsm_input_processing+0x254>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	2b63      	cmp	r3, #99	; 0x63
 8000412:	dd02      	ble.n	800041a <fsm_input_processing+0x112>
 8000414:	4b51      	ldr	r3, [pc, #324]	; (800055c <fsm_input_processing+0x254>)
 8000416:	2201      	movs	r2, #1
 8000418:	601a      	str	r2, [r3, #0]
			}
			if (is_BUTTON_SAVE_pressed()) 
 800041a:	f7ff febb 	bl	8000194 <is_BUTTON_SAVE_pressed>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d003      	beq.n	800042c <fsm_input_processing+0x124>
				RED_light_counter = counter_buffer;
 8000424:	4b4d      	ldr	r3, [pc, #308]	; (800055c <fsm_input_processing+0x254>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a4b      	ldr	r2, [pc, #300]	; (8000558 <fsm_input_processing+0x250>)
 800042a:	6013      	str	r3, [r2, #0]
			if (is_BUTTON_MODE_pressed())
 800042c:	f7ff fe8e 	bl	800014c <is_BUTTON_MODE_pressed>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	f000 8107 	beq.w	8000646 <fsm_input_processing+0x33e>
			{
				current_MODE_status = MODIFY_YELLOW_MODE;
 8000438:	4b45      	ldr	r3, [pc, #276]	; (8000550 <fsm_input_processing+0x248>)
 800043a:	2202      	movs	r2, #2
 800043c:	701a      	strb	r2, [r3, #0]
				setTimer0(250);
 800043e:	20fa      	movs	r0, #250	; 0xfa
 8000440:	f001 fb96 	bl	8001b70 <setTimer0>
				counter_buffer = YELLOW_light_counter;
 8000444:	4b49      	ldr	r3, [pc, #292]	; (800056c <fsm_input_processing+0x264>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a44      	ldr	r2, [pc, #272]	; (800055c <fsm_input_processing+0x254>)
 800044a:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(YELLOW0_GPIO_Port, YELLOW0_Pin, 1);
 800044c:	2201      	movs	r2, #1
 800044e:	2140      	movs	r1, #64	; 0x40
 8000450:	4843      	ldr	r0, [pc, #268]	; (8000560 <fsm_input_processing+0x258>)
 8000452:	f001 feca 	bl	80021ea <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, 1);
 8000456:	2201      	movs	r2, #1
 8000458:	2104      	movs	r1, #4
 800045a:	4841      	ldr	r0, [pc, #260]	; (8000560 <fsm_input_processing+0x258>)
 800045c:	f001 fec5 	bl	80021ea <HAL_GPIO_WritePin>
			}
			break;
 8000460:	e0f1      	b.n	8000646 <fsm_input_processing+0x33e>
		
		case MODIFY_YELLOW_MODE:
            HAL_GPIO_WritePin(RED0_GPIO_Port, RED0_Pin, 0);
 8000462:	2200      	movs	r2, #0
 8000464:	2120      	movs	r1, #32
 8000466:	483e      	ldr	r0, [pc, #248]	; (8000560 <fsm_input_processing+0x258>)
 8000468:	f001 febf 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GREEN0_GPIO_Port, GREEN0_Pin, 0);
 800046c:	2200      	movs	r2, #0
 800046e:	2180      	movs	r1, #128	; 0x80
 8000470:	483b      	ldr	r0, [pc, #236]	; (8000560 <fsm_input_processing+0x258>)
 8000472:	f001 feba 	bl	80021ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, 0);
 8000476:	2200      	movs	r2, #0
 8000478:	2108      	movs	r1, #8
 800047a:	4839      	ldr	r0, [pc, #228]	; (8000560 <fsm_input_processing+0x258>)
 800047c:	f001 feb5 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, 0);
 8000480:	2200      	movs	r2, #0
 8000482:	2102      	movs	r1, #2
 8000484:	4836      	ldr	r0, [pc, #216]	; (8000560 <fsm_input_processing+0x258>)
 8000486:	f001 feb0 	bl	80021ea <HAL_GPIO_WritePin>
			SEG7_buffer[0] = 3;
 800048a:	4b36      	ldr	r3, [pc, #216]	; (8000564 <fsm_input_processing+0x25c>)
 800048c:	2203      	movs	r2, #3
 800048e:	601a      	str	r2, [r3, #0]
			SEG7_buffer[1] = counter_buffer / 10;
 8000490:	4b32      	ldr	r3, [pc, #200]	; (800055c <fsm_input_processing+0x254>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a34      	ldr	r2, [pc, #208]	; (8000568 <fsm_input_processing+0x260>)
 8000496:	fb82 1203 	smull	r1, r2, r2, r3
 800049a:	1092      	asrs	r2, r2, #2
 800049c:	17db      	asrs	r3, r3, #31
 800049e:	1ad3      	subs	r3, r2, r3
 80004a0:	4a30      	ldr	r2, [pc, #192]	; (8000564 <fsm_input_processing+0x25c>)
 80004a2:	6053      	str	r3, [r2, #4]
			SEG7_buffer[2] = counter_buffer % 10;
 80004a4:	4b2d      	ldr	r3, [pc, #180]	; (800055c <fsm_input_processing+0x254>)
 80004a6:	6819      	ldr	r1, [r3, #0]
 80004a8:	4b2f      	ldr	r3, [pc, #188]	; (8000568 <fsm_input_processing+0x260>)
 80004aa:	fb83 2301 	smull	r2, r3, r3, r1
 80004ae:	109a      	asrs	r2, r3, #2
 80004b0:	17cb      	asrs	r3, r1, #31
 80004b2:	1ad2      	subs	r2, r2, r3
 80004b4:	4613      	mov	r3, r2
 80004b6:	009b      	lsls	r3, r3, #2
 80004b8:	4413      	add	r3, r2
 80004ba:	005b      	lsls	r3, r3, #1
 80004bc:	1aca      	subs	r2, r1, r3
 80004be:	4b29      	ldr	r3, [pc, #164]	; (8000564 <fsm_input_processing+0x25c>)
 80004c0:	609a      	str	r2, [r3, #8]
			update7SEG();
 80004c2:	f000 f9ef 	bl	80008a4 <update7SEG>

			if (timer0_flag == 1)
 80004c6:	4b23      	ldr	r3, [pc, #140]	; (8000554 <fsm_input_processing+0x24c>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	2b01      	cmp	r3, #1
 80004cc:	d10a      	bne.n	80004e4 <fsm_input_processing+0x1dc>
			{
				setTimer0(250);
 80004ce:	20fa      	movs	r0, #250	; 0xfa
 80004d0:	f001 fb4e 	bl	8001b70 <setTimer0>
				HAL_GPIO_TogglePin(YELLOW0_GPIO_Port, YELLOW0_Pin);
 80004d4:	2140      	movs	r1, #64	; 0x40
 80004d6:	4822      	ldr	r0, [pc, #136]	; (8000560 <fsm_input_processing+0x258>)
 80004d8:	f001 fe9f 	bl	800221a <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(YELLOW1_GPIO_Port, YELLOW1_Pin);
 80004dc:	2104      	movs	r1, #4
 80004de:	4820      	ldr	r0, [pc, #128]	; (8000560 <fsm_input_processing+0x258>)
 80004e0:	f001 fe9b 	bl	800221a <HAL_GPIO_TogglePin>
			}
			if (is_BUTTON_MODIFY_pressed())
 80004e4:	f7ff fe44 	bl	8000170 <is_BUTTON_MODIFY_pressed>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d00b      	beq.n	8000506 <fsm_input_processing+0x1fe>
			{
				counter_buffer++;
 80004ee:	4b1b      	ldr	r3, [pc, #108]	; (800055c <fsm_input_processing+0x254>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	3301      	adds	r3, #1
 80004f4:	4a19      	ldr	r2, [pc, #100]	; (800055c <fsm_input_processing+0x254>)
 80004f6:	6013      	str	r3, [r2, #0]
				if (counter_buffer >= 100) counter_buffer = 1;
 80004f8:	4b18      	ldr	r3, [pc, #96]	; (800055c <fsm_input_processing+0x254>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	2b63      	cmp	r3, #99	; 0x63
 80004fe:	dd02      	ble.n	8000506 <fsm_input_processing+0x1fe>
 8000500:	4b16      	ldr	r3, [pc, #88]	; (800055c <fsm_input_processing+0x254>)
 8000502:	2201      	movs	r2, #1
 8000504:	601a      	str	r2, [r3, #0]
			}
			if (is_BUTTON_SAVE_pressed()) 
 8000506:	f7ff fe45 	bl	8000194 <is_BUTTON_SAVE_pressed>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d003      	beq.n	8000518 <fsm_input_processing+0x210>
				YELLOW_light_counter = counter_buffer;
 8000510:	4b12      	ldr	r3, [pc, #72]	; (800055c <fsm_input_processing+0x254>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a15      	ldr	r2, [pc, #84]	; (800056c <fsm_input_processing+0x264>)
 8000516:	6013      	str	r3, [r2, #0]
			if (is_BUTTON_MODE_pressed())
 8000518:	f7ff fe18 	bl	800014c <is_BUTTON_MODE_pressed>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	f000 8093 	beq.w	800064a <fsm_input_processing+0x342>
			{
				current_MODE_status = MODIFY_GREEN_MODE;
 8000524:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <fsm_input_processing+0x248>)
 8000526:	2203      	movs	r2, #3
 8000528:	701a      	strb	r2, [r3, #0]
				setTimer0(250);
 800052a:	20fa      	movs	r0, #250	; 0xfa
 800052c:	f001 fb20 	bl	8001b70 <setTimer0>
				counter_buffer = YELLOW_light_counter;
 8000530:	4b0e      	ldr	r3, [pc, #56]	; (800056c <fsm_input_processing+0x264>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a09      	ldr	r2, [pc, #36]	; (800055c <fsm_input_processing+0x254>)
 8000536:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(GREEN0_GPIO_Port, GREEN0_Pin, 1);
 8000538:	2201      	movs	r2, #1
 800053a:	2180      	movs	r1, #128	; 0x80
 800053c:	4808      	ldr	r0, [pc, #32]	; (8000560 <fsm_input_processing+0x258>)
 800053e:	f001 fe54 	bl	80021ea <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, 1);
 8000542:	2201      	movs	r2, #1
 8000544:	2102      	movs	r1, #2
 8000546:	4806      	ldr	r0, [pc, #24]	; (8000560 <fsm_input_processing+0x258>)
 8000548:	f001 fe4f 	bl	80021ea <HAL_GPIO_WritePin>
			}
			break;
 800054c:	e07d      	b.n	800064a <fsm_input_processing+0x342>
 800054e:	bf00      	nop
 8000550:	200000a8 	.word	0x200000a8
 8000554:	20000090 	.word	0x20000090
 8000558:	20000038 	.word	0x20000038
 800055c:	2000007c 	.word	0x2000007c
 8000560:	40010800 	.word	0x40010800
 8000564:	20000080 	.word	0x20000080
 8000568:	66666667 	.word	0x66666667
 800056c:	20000034 	.word	0x20000034

		case MODIFY_GREEN_MODE:
            HAL_GPIO_WritePin(RED0_GPIO_Port, RED0_Pin, 0);
 8000570:	2200      	movs	r2, #0
 8000572:	2120      	movs	r1, #32
 8000574:	4837      	ldr	r0, [pc, #220]	; (8000654 <fsm_input_processing+0x34c>)
 8000576:	f001 fe38 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(YELLOW0_GPIO_Port, YELLOW0_Pin, 0);
 800057a:	2200      	movs	r2, #0
 800057c:	2140      	movs	r1, #64	; 0x40
 800057e:	4835      	ldr	r0, [pc, #212]	; (8000654 <fsm_input_processing+0x34c>)
 8000580:	f001 fe33 	bl	80021ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, 0);
 8000584:	2200      	movs	r2, #0
 8000586:	2108      	movs	r1, #8
 8000588:	4832      	ldr	r0, [pc, #200]	; (8000654 <fsm_input_processing+0x34c>)
 800058a:	f001 fe2e 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, 0);
 800058e:	2200      	movs	r2, #0
 8000590:	2104      	movs	r1, #4
 8000592:	4830      	ldr	r0, [pc, #192]	; (8000654 <fsm_input_processing+0x34c>)
 8000594:	f001 fe29 	bl	80021ea <HAL_GPIO_WritePin>
			SEG7_buffer[0] = 4;
 8000598:	4b2f      	ldr	r3, [pc, #188]	; (8000658 <fsm_input_processing+0x350>)
 800059a:	2204      	movs	r2, #4
 800059c:	601a      	str	r2, [r3, #0]
			SEG7_buffer[1] = counter_buffer / 10;
 800059e:	4b2f      	ldr	r3, [pc, #188]	; (800065c <fsm_input_processing+0x354>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a2f      	ldr	r2, [pc, #188]	; (8000660 <fsm_input_processing+0x358>)
 80005a4:	fb82 1203 	smull	r1, r2, r2, r3
 80005a8:	1092      	asrs	r2, r2, #2
 80005aa:	17db      	asrs	r3, r3, #31
 80005ac:	1ad3      	subs	r3, r2, r3
 80005ae:	4a2a      	ldr	r2, [pc, #168]	; (8000658 <fsm_input_processing+0x350>)
 80005b0:	6053      	str	r3, [r2, #4]
			SEG7_buffer[2] = counter_buffer % 10;
 80005b2:	4b2a      	ldr	r3, [pc, #168]	; (800065c <fsm_input_processing+0x354>)
 80005b4:	6819      	ldr	r1, [r3, #0]
 80005b6:	4b2a      	ldr	r3, [pc, #168]	; (8000660 <fsm_input_processing+0x358>)
 80005b8:	fb83 2301 	smull	r2, r3, r3, r1
 80005bc:	109a      	asrs	r2, r3, #2
 80005be:	17cb      	asrs	r3, r1, #31
 80005c0:	1ad2      	subs	r2, r2, r3
 80005c2:	4613      	mov	r3, r2
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	4413      	add	r3, r2
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	1aca      	subs	r2, r1, r3
 80005cc:	4b22      	ldr	r3, [pc, #136]	; (8000658 <fsm_input_processing+0x350>)
 80005ce:	609a      	str	r2, [r3, #8]
			update7SEG();
 80005d0:	f000 f968 	bl	80008a4 <update7SEG>

			if (timer0_flag == 1)
 80005d4:	4b23      	ldr	r3, [pc, #140]	; (8000664 <fsm_input_processing+0x35c>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d10a      	bne.n	80005f2 <fsm_input_processing+0x2ea>
			{
				setTimer0(250);
 80005dc:	20fa      	movs	r0, #250	; 0xfa
 80005de:	f001 fac7 	bl	8001b70 <setTimer0>
				HAL_GPIO_TogglePin(GREEN0_GPIO_Port, GREEN0_Pin);
 80005e2:	2180      	movs	r1, #128	; 0x80
 80005e4:	481b      	ldr	r0, [pc, #108]	; (8000654 <fsm_input_processing+0x34c>)
 80005e6:	f001 fe18 	bl	800221a <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(GREEN1_GPIO_Port, GREEN1_Pin);
 80005ea:	2102      	movs	r1, #2
 80005ec:	4819      	ldr	r0, [pc, #100]	; (8000654 <fsm_input_processing+0x34c>)
 80005ee:	f001 fe14 	bl	800221a <HAL_GPIO_TogglePin>
			}
			if (is_BUTTON_MODIFY_pressed())
 80005f2:	f7ff fdbd 	bl	8000170 <is_BUTTON_MODIFY_pressed>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d00b      	beq.n	8000614 <fsm_input_processing+0x30c>
			{
				counter_buffer++;
 80005fc:	4b17      	ldr	r3, [pc, #92]	; (800065c <fsm_input_processing+0x354>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	3301      	adds	r3, #1
 8000602:	4a16      	ldr	r2, [pc, #88]	; (800065c <fsm_input_processing+0x354>)
 8000604:	6013      	str	r3, [r2, #0]
				if (counter_buffer >= 100) counter_buffer = 1;
 8000606:	4b15      	ldr	r3, [pc, #84]	; (800065c <fsm_input_processing+0x354>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	2b63      	cmp	r3, #99	; 0x63
 800060c:	dd02      	ble.n	8000614 <fsm_input_processing+0x30c>
 800060e:	4b13      	ldr	r3, [pc, #76]	; (800065c <fsm_input_processing+0x354>)
 8000610:	2201      	movs	r2, #1
 8000612:	601a      	str	r2, [r3, #0]
			}
			if (is_BUTTON_SAVE_pressed()) 
 8000614:	f7ff fdbe 	bl	8000194 <is_BUTTON_SAVE_pressed>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d003      	beq.n	8000626 <fsm_input_processing+0x31e>
				GREEN_light_counter = counter_buffer;
 800061e:	4b0f      	ldr	r3, [pc, #60]	; (800065c <fsm_input_processing+0x354>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a11      	ldr	r2, [pc, #68]	; (8000668 <fsm_input_processing+0x360>)
 8000624:	6013      	str	r3, [r2, #0]
			if (is_BUTTON_MODE_pressed())
 8000626:	f7ff fd91 	bl	800014c <is_BUTTON_MODE_pressed>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d00e      	beq.n	800064e <fsm_input_processing+0x346>
			{
				current_MODE_status = NORMAL_MODE;
 8000630:	4b0e      	ldr	r3, [pc, #56]	; (800066c <fsm_input_processing+0x364>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
				timer0_flag = 1;
 8000636:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <fsm_input_processing+0x35c>)
 8000638:	2201      	movs	r2, #1
 800063a:	601a      	str	r2, [r3, #0]
			}
			break;
 800063c:	e007      	b.n	800064e <fsm_input_processing+0x346>
		
		default:
			break;
 800063e:	bf00      	nop
 8000640:	e006      	b.n	8000650 <fsm_input_processing+0x348>
			break;
 8000642:	bf00      	nop
 8000644:	e004      	b.n	8000650 <fsm_input_processing+0x348>
			break;
 8000646:	bf00      	nop
 8000648:	e002      	b.n	8000650 <fsm_input_processing+0x348>
			break;
 800064a:	bf00      	nop
 800064c:	e000      	b.n	8000650 <fsm_input_processing+0x348>
			break;
 800064e:	bf00      	nop
	}
}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40010800 	.word	0x40010800
 8000658:	20000080 	.word	0x20000080
 800065c:	2000007c 	.word	0x2000007c
 8000660:	66666667 	.word	0x66666667
 8000664:	20000090 	.word	0x20000090
 8000668:	20000030 	.word	0x20000030
 800066c:	200000a8 	.word	0x200000a8

08000670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000674:	f001 fab8 	bl	8001be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000678:	f000 f816 	bl	80006a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 800067c:	f000 f850 	bl	8000720 <MX_TIM2_Init>
  MX_GPIO_Init();
 8000680:	f000 f89a 	bl	80007b8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start_IT(&htim2);
 8000684:	4806      	ldr	r0, [pc, #24]	; (80006a0 <main+0x30>)
 8000686:	f002 fa0d 	bl	8002aa4 <HAL_TIM_Base_Start_IT>
    
    setTimer0(1000);
 800068a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800068e:	f001 fa6f 	bl	8001b70 <setTimer0>
    current_MODE_status = NORMAL_MODE;
 8000692:	4b04      	ldr	r3, [pc, #16]	; (80006a4 <main+0x34>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1) {		
		//cal; continuously
		fsm_input_processing();
 8000698:	f7ff fe36 	bl	8000308 <fsm_input_processing>
 800069c:	e7fc      	b.n	8000698 <main+0x28>
 800069e:	bf00      	nop
 80006a0:	200000ac 	.word	0x200000ac
 80006a4:	200000a8 	.word	0x200000a8

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b090      	sub	sp, #64	; 0x40
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	f107 0318 	add.w	r3, r7, #24
 80006b2:	2228      	movs	r2, #40	; 0x28
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f002 fdb0 	bl	800321c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ca:	2302      	movs	r3, #2
 80006cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ce:	2301      	movs	r3, #1
 80006d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d2:	2310      	movs	r3, #16
 80006d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006d6:	2300      	movs	r3, #0
 80006d8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006da:	f107 0318 	add.w	r3, r7, #24
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 fdb4 	bl	800224c <HAL_RCC_OscConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x46>
  {
    Error_Handler();
 80006ea:	f000 f8d5 	bl	8000898 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ee:	230f      	movs	r3, #15
 80006f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f002 f820 	bl	800274c <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000712:	f000 f8c1 	bl	8000898 <Error_Handler>
  }
}
 8000716:	bf00      	nop
 8000718:	3740      	adds	r7, #64	; 0x40
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000726:	f107 0308 	add.w	r3, r7, #8
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000734:	463b      	mov	r3, r7
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800073c:	4b1d      	ldr	r3, [pc, #116]	; (80007b4 <MX_TIM2_Init+0x94>)
 800073e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000742:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000744:	4b1b      	ldr	r3, [pc, #108]	; (80007b4 <MX_TIM2_Init+0x94>)
 8000746:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800074a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074c:	4b19      	ldr	r3, [pc, #100]	; (80007b4 <MX_TIM2_Init+0x94>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000752:	4b18      	ldr	r3, [pc, #96]	; (80007b4 <MX_TIM2_Init+0x94>)
 8000754:	2209      	movs	r2, #9
 8000756:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000758:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <MX_TIM2_Init+0x94>)
 800075a:	2200      	movs	r2, #0
 800075c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800075e:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <MX_TIM2_Init+0x94>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000764:	4813      	ldr	r0, [pc, #76]	; (80007b4 <MX_TIM2_Init+0x94>)
 8000766:	f002 f94d 	bl	8002a04 <HAL_TIM_Base_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000770:	f000 f892 	bl	8000898 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000774:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000778:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800077a:	f107 0308 	add.w	r3, r7, #8
 800077e:	4619      	mov	r1, r3
 8000780:	480c      	ldr	r0, [pc, #48]	; (80007b4 <MX_TIM2_Init+0x94>)
 8000782:	f002 fae3 	bl	8002d4c <HAL_TIM_ConfigClockSource>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800078c:	f000 f884 	bl	8000898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000790:	2300      	movs	r3, #0
 8000792:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000794:	2300      	movs	r3, #0
 8000796:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000798:	463b      	mov	r3, r7
 800079a:	4619      	mov	r1, r3
 800079c:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_TIM2_Init+0x94>)
 800079e:	f002 fcaf 	bl	8003100 <HAL_TIMEx_MasterConfigSynchronization>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80007a8:	f000 f876 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	3718      	adds	r7, #24
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	200000ac 	.word	0x200000ac

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	f107 0308 	add.w	r3, r7, #8
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007cc:	4b2f      	ldr	r3, [pc, #188]	; (800088c <MX_GPIO_Init+0xd4>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	4a2e      	ldr	r2, [pc, #184]	; (800088c <MX_GPIO_Init+0xd4>)
 80007d2:	f043 0304 	orr.w	r3, r3, #4
 80007d6:	6193      	str	r3, [r2, #24]
 80007d8:	4b2c      	ldr	r3, [pc, #176]	; (800088c <MX_GPIO_Init+0xd4>)
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	f003 0304 	and.w	r3, r3, #4
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e4:	4b29      	ldr	r3, [pc, #164]	; (800088c <MX_GPIO_Init+0xd4>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	4a28      	ldr	r2, [pc, #160]	; (800088c <MX_GPIO_Init+0xd4>)
 80007ea:	f043 0308 	orr.w	r3, r3, #8
 80007ee:	6193      	str	r3, [r2, #24]
 80007f0:	4b26      	ldr	r3, [pc, #152]	; (800088c <MX_GPIO_Init+0xd4>)
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	f003 0308 	and.w	r3, r3, #8
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GREEN1_Pin|YELLOW1_Pin|RED1_Pin|a0_Pin
 80007fc:	2200      	movs	r2, #0
 80007fe:	f24f 11fe 	movw	r1, #61950	; 0xf1fe
 8000802:	4823      	ldr	r0, [pc, #140]	; (8000890 <MX_GPIO_Init+0xd8>)
 8000804:	f001 fcf1 	bl	80021ea <HAL_GPIO_WritePin>
                          |RED0_Pin|YELLOW0_Pin|GREEN0_Pin|b0_Pin
                          |c0_Pin|d0_Pin|e0_Pin|f0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, b1_Pin|c1_Pin|d2_Pin|e2_Pin
 8000808:	2200      	movs	r2, #0
 800080a:	f647 71fe 	movw	r1, #32766	; 0x7ffe
 800080e:	4821      	ldr	r0, [pc, #132]	; (8000894 <MX_GPIO_Init+0xdc>)
 8000810:	f001 fceb 	bl	80021ea <HAL_GPIO_WritePin>
                          |b2_Pin|c2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : GREEN1_Pin YELLOW1_Pin RED1_Pin a0_Pin
                           RED0_Pin YELLOW0_Pin GREEN0_Pin b0_Pin
                           c0_Pin d0_Pin e0_Pin f0_Pin */
  GPIO_InitStruct.Pin = GREEN1_Pin|YELLOW1_Pin|RED1_Pin|a0_Pin
 8000814:	f24f 13fe 	movw	r3, #61950	; 0xf1fe
 8000818:	60bb      	str	r3, [r7, #8]
                          |RED0_Pin|YELLOW0_Pin|GREEN0_Pin|b0_Pin
                          |c0_Pin|d0_Pin|e0_Pin|f0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081a:	2301      	movs	r3, #1
 800081c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	2302      	movs	r3, #2
 8000824:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000826:	f107 0308 	add.w	r3, r7, #8
 800082a:	4619      	mov	r1, r3
 800082c:	4818      	ldr	r0, [pc, #96]	; (8000890 <MX_GPIO_Init+0xd8>)
 800082e:	f001 fb4b 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : a1_Pin */
  GPIO_InitStruct.Pin = a1_Pin;
 8000832:	2301      	movs	r3, #1
 8000834:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800083a:	2301      	movs	r3, #1
 800083c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(a1_GPIO_Port, &GPIO_InitStruct);
 800083e:	f107 0308 	add.w	r3, r7, #8
 8000842:	4619      	mov	r1, r3
 8000844:	4813      	ldr	r0, [pc, #76]	; (8000894 <MX_GPIO_Init+0xdc>)
 8000846:	f001 fb3f 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : b1_Pin c1_Pin d2_Pin e2_Pin
                           f2_Pin g2_Pin g0_Pin d1_Pin
                           e1_Pin f1_Pin g1_Pin a2_Pin
                           b2_Pin c2_Pin */
  GPIO_InitStruct.Pin = b1_Pin|c1_Pin|d2_Pin|e2_Pin
 800084a:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 800084e:	60bb      	str	r3, [r7, #8]
                          |f2_Pin|g2_Pin|g0_Pin|d1_Pin
                          |e1_Pin|f1_Pin|g1_Pin|a2_Pin
                          |b2_Pin|c2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000850:	2301      	movs	r3, #1
 8000852:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2302      	movs	r3, #2
 800085a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085c:	f107 0308 	add.w	r3, r7, #8
 8000860:	4619      	mov	r1, r3
 8000862:	480c      	ldr	r0, [pc, #48]	; (8000894 <MX_GPIO_Init+0xdc>)
 8000864:	f001 fb30 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_MODE_Pin BUTTON_MODIFY_Pin BUTTON_SAVE_Pin */
  GPIO_InitStruct.Pin = BUTTON_MODE_Pin|BUTTON_MODIFY_Pin|BUTTON_SAVE_Pin;
 8000868:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800086c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000872:	2301      	movs	r3, #1
 8000874:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000876:	f107 0308 	add.w	r3, r7, #8
 800087a:	4619      	mov	r1, r3
 800087c:	4804      	ldr	r0, [pc, #16]	; (8000890 <MX_GPIO_Init+0xd8>)
 800087e:	f001 fb23 	bl	8001ec8 <HAL_GPIO_Init>

}
 8000882:	bf00      	nop
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40021000 	.word	0x40021000
 8000890:	40010800 	.word	0x40010800
 8000894:	40010c00 	.word	0x40010c00

08000898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800089c:	b672      	cpsid	i
}
 800089e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 80008a0:	e7fe      	b.n	80008a0 <Error_Handler+0x8>
	...

080008a4 <update7SEG>:
int RED_light_counter = 5;
int GREEN_light_counter = 3;
int YELLOW_light_counter = 2;

void update7SEG (void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
    const unsigned int ON_ = 0, OFF_ = 1;
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	2301      	movs	r3, #1
 80008b0:	603b      	str	r3, [r7, #0]

    switch (SEG7_buffer[0])
 80008b2:	4bb6      	ldr	r3, [pc, #728]	; (8000b8c <update7SEG+0x2e8>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2b09      	cmp	r3, #9
 80008b8:	f200 824e 	bhi.w	8000d58 <update7SEG+0x4b4>
 80008bc:	a201      	add	r2, pc, #4	; (adr r2, 80008c4 <update7SEG+0x20>)
 80008be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c2:	bf00      	nop
 80008c4:	080008ed 	.word	0x080008ed
 80008c8:	0800095d 	.word	0x0800095d
 80008cc:	080009cd 	.word	0x080009cd
 80008d0:	08000a3d 	.word	0x08000a3d
 80008d4:	08000aad 	.word	0x08000aad
 80008d8:	08000b1d 	.word	0x08000b1d
 80008dc:	08000b99 	.word	0x08000b99
 80008e0:	08000c09 	.word	0x08000c09
 80008e4:	08000c79 	.word	0x08000c79
 80008e8:	08000ce9 	.word	0x08000ce9
    {
        case 0:
            HAL_GPIO_WritePin(a0_GPIO_Port, a0_Pin, ON_);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	461a      	mov	r2, r3
 80008f2:	2110      	movs	r1, #16
 80008f4:	48a6      	ldr	r0, [pc, #664]	; (8000b90 <update7SEG+0x2ec>)
 80008f6:	f001 fc78 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b0_GPIO_Port, b0_Pin, ON_);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	461a      	mov	r2, r3
 8000900:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000904:	48a2      	ldr	r0, [pc, #648]	; (8000b90 <update7SEG+0x2ec>)
 8000906:	f001 fc70 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c0_GPIO_Port, c0_Pin, ON_);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	b2db      	uxtb	r3, r3
 800090e:	461a      	mov	r2, r3
 8000910:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000914:	489e      	ldr	r0, [pc, #632]	; (8000b90 <update7SEG+0x2ec>)
 8000916:	f001 fc68 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d0_GPIO_Port, d0_Pin, ON_);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	b2db      	uxtb	r3, r3
 800091e:	461a      	mov	r2, r3
 8000920:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000924:	489a      	ldr	r0, [pc, #616]	; (8000b90 <update7SEG+0x2ec>)
 8000926:	f001 fc60 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e0_GPIO_Port, e0_Pin, ON_);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	b2db      	uxtb	r3, r3
 800092e:	461a      	mov	r2, r3
 8000930:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000934:	4896      	ldr	r0, [pc, #600]	; (8000b90 <update7SEG+0x2ec>)
 8000936:	f001 fc58 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f0_GPIO_Port, f0_Pin, ON_);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	b2db      	uxtb	r3, r3
 800093e:	461a      	mov	r2, r3
 8000940:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000944:	4892      	ldr	r0, [pc, #584]	; (8000b90 <update7SEG+0x2ec>)
 8000946:	f001 fc50 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g0_GPIO_Port, g0_Pin, OFF_);
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	b2db      	uxtb	r3, r3
 800094e:	461a      	mov	r2, r3
 8000950:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000954:	488f      	ldr	r0, [pc, #572]	; (8000b94 <update7SEG+0x2f0>)
 8000956:	f001 fc48 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 800095a:	e235      	b.n	8000dc8 <update7SEG+0x524>

        case 1:
            HAL_GPIO_WritePin(a0_GPIO_Port, a0_Pin, OFF_);
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	b2db      	uxtb	r3, r3
 8000960:	461a      	mov	r2, r3
 8000962:	2110      	movs	r1, #16
 8000964:	488a      	ldr	r0, [pc, #552]	; (8000b90 <update7SEG+0x2ec>)
 8000966:	f001 fc40 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b0_GPIO_Port, b0_Pin, ON_);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	b2db      	uxtb	r3, r3
 800096e:	461a      	mov	r2, r3
 8000970:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000974:	4886      	ldr	r0, [pc, #536]	; (8000b90 <update7SEG+0x2ec>)
 8000976:	f001 fc38 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c0_GPIO_Port, c0_Pin, ON_);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	b2db      	uxtb	r3, r3
 800097e:	461a      	mov	r2, r3
 8000980:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000984:	4882      	ldr	r0, [pc, #520]	; (8000b90 <update7SEG+0x2ec>)
 8000986:	f001 fc30 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d0_GPIO_Port, d0_Pin, OFF_);
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	b2db      	uxtb	r3, r3
 800098e:	461a      	mov	r2, r3
 8000990:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000994:	487e      	ldr	r0, [pc, #504]	; (8000b90 <update7SEG+0x2ec>)
 8000996:	f001 fc28 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e0_GPIO_Port, e0_Pin, OFF_);
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	b2db      	uxtb	r3, r3
 800099e:	461a      	mov	r2, r3
 80009a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009a4:	487a      	ldr	r0, [pc, #488]	; (8000b90 <update7SEG+0x2ec>)
 80009a6:	f001 fc20 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f0_GPIO_Port, f0_Pin, OFF_);
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	461a      	mov	r2, r3
 80009b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009b4:	4876      	ldr	r0, [pc, #472]	; (8000b90 <update7SEG+0x2ec>)
 80009b6:	f001 fc18 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g0_GPIO_Port, g0_Pin, OFF_);
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	461a      	mov	r2, r3
 80009c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009c4:	4873      	ldr	r0, [pc, #460]	; (8000b94 <update7SEG+0x2f0>)
 80009c6:	f001 fc10 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 80009ca:	e1fd      	b.n	8000dc8 <update7SEG+0x524>

        case 2:
            HAL_GPIO_WritePin(a0_GPIO_Port, a0_Pin, ON_);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	461a      	mov	r2, r3
 80009d2:	2110      	movs	r1, #16
 80009d4:	486e      	ldr	r0, [pc, #440]	; (8000b90 <update7SEG+0x2ec>)
 80009d6:	f001 fc08 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b0_GPIO_Port, b0_Pin, ON_);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	461a      	mov	r2, r3
 80009e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009e4:	486a      	ldr	r0, [pc, #424]	; (8000b90 <update7SEG+0x2ec>)
 80009e6:	f001 fc00 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c0_GPIO_Port, c0_Pin, OFF_);
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	461a      	mov	r2, r3
 80009f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009f4:	4866      	ldr	r0, [pc, #408]	; (8000b90 <update7SEG+0x2ec>)
 80009f6:	f001 fbf8 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d0_GPIO_Port, d0_Pin, ON_);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	461a      	mov	r2, r3
 8000a00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a04:	4862      	ldr	r0, [pc, #392]	; (8000b90 <update7SEG+0x2ec>)
 8000a06:	f001 fbf0 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e0_GPIO_Port, e0_Pin, ON_);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	461a      	mov	r2, r3
 8000a10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a14:	485e      	ldr	r0, [pc, #376]	; (8000b90 <update7SEG+0x2ec>)
 8000a16:	f001 fbe8 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f0_GPIO_Port, f0_Pin, OFF_);
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	461a      	mov	r2, r3
 8000a20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a24:	485a      	ldr	r0, [pc, #360]	; (8000b90 <update7SEG+0x2ec>)
 8000a26:	f001 fbe0 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g0_GPIO_Port, g0_Pin, ON_);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	461a      	mov	r2, r3
 8000a30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a34:	4857      	ldr	r0, [pc, #348]	; (8000b94 <update7SEG+0x2f0>)
 8000a36:	f001 fbd8 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 8000a3a:	e1c5      	b.n	8000dc8 <update7SEG+0x524>

        case 3:
            HAL_GPIO_WritePin(a0_GPIO_Port, a0_Pin, ON_);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	461a      	mov	r2, r3
 8000a42:	2110      	movs	r1, #16
 8000a44:	4852      	ldr	r0, [pc, #328]	; (8000b90 <update7SEG+0x2ec>)
 8000a46:	f001 fbd0 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b0_GPIO_Port, b0_Pin, ON_);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	461a      	mov	r2, r3
 8000a50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a54:	484e      	ldr	r0, [pc, #312]	; (8000b90 <update7SEG+0x2ec>)
 8000a56:	f001 fbc8 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c0_GPIO_Port, c0_Pin, ON_);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	461a      	mov	r2, r3
 8000a60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a64:	484a      	ldr	r0, [pc, #296]	; (8000b90 <update7SEG+0x2ec>)
 8000a66:	f001 fbc0 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d0_GPIO_Port, d0_Pin, ON_);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	461a      	mov	r2, r3
 8000a70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a74:	4846      	ldr	r0, [pc, #280]	; (8000b90 <update7SEG+0x2ec>)
 8000a76:	f001 fbb8 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e0_GPIO_Port, e0_Pin, OFF_);
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	461a      	mov	r2, r3
 8000a80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a84:	4842      	ldr	r0, [pc, #264]	; (8000b90 <update7SEG+0x2ec>)
 8000a86:	f001 fbb0 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f0_GPIO_Port, f0_Pin, OFF_);
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	461a      	mov	r2, r3
 8000a90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a94:	483e      	ldr	r0, [pc, #248]	; (8000b90 <update7SEG+0x2ec>)
 8000a96:	f001 fba8 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g0_GPIO_Port, g0_Pin, ON_);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aa4:	483b      	ldr	r0, [pc, #236]	; (8000b94 <update7SEG+0x2f0>)
 8000aa6:	f001 fba0 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 8000aaa:	e18d      	b.n	8000dc8 <update7SEG+0x524>

        case 4:
            HAL_GPIO_WritePin(a0_GPIO_Port, a0_Pin, OFF_);
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	2110      	movs	r1, #16
 8000ab4:	4836      	ldr	r0, [pc, #216]	; (8000b90 <update7SEG+0x2ec>)
 8000ab6:	f001 fb98 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b0_GPIO_Port, b0_Pin, ON_);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	461a      	mov	r2, r3
 8000ac0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ac4:	4832      	ldr	r0, [pc, #200]	; (8000b90 <update7SEG+0x2ec>)
 8000ac6:	f001 fb90 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c0_GPIO_Port, c0_Pin, ON_);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	461a      	mov	r2, r3
 8000ad0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ad4:	482e      	ldr	r0, [pc, #184]	; (8000b90 <update7SEG+0x2ec>)
 8000ad6:	f001 fb88 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d0_GPIO_Port, d0_Pin, OFF_);
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	461a      	mov	r2, r3
 8000ae0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ae4:	482a      	ldr	r0, [pc, #168]	; (8000b90 <update7SEG+0x2ec>)
 8000ae6:	f001 fb80 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e0_GPIO_Port, e0_Pin, OFF_);
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	461a      	mov	r2, r3
 8000af0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000af4:	4826      	ldr	r0, [pc, #152]	; (8000b90 <update7SEG+0x2ec>)
 8000af6:	f001 fb78 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f0_GPIO_Port, f0_Pin, ON_);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	461a      	mov	r2, r3
 8000b00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b04:	4822      	ldr	r0, [pc, #136]	; (8000b90 <update7SEG+0x2ec>)
 8000b06:	f001 fb70 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g0_GPIO_Port, g0_Pin, ON_);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	461a      	mov	r2, r3
 8000b10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b14:	481f      	ldr	r0, [pc, #124]	; (8000b94 <update7SEG+0x2f0>)
 8000b16:	f001 fb68 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 8000b1a:	e155      	b.n	8000dc8 <update7SEG+0x524>

        case 5:
            HAL_GPIO_WritePin(a0_GPIO_Port, a0_Pin, ON_);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	461a      	mov	r2, r3
 8000b22:	2110      	movs	r1, #16
 8000b24:	481a      	ldr	r0, [pc, #104]	; (8000b90 <update7SEG+0x2ec>)
 8000b26:	f001 fb60 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b0_GPIO_Port, b0_Pin, OFF_);
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	461a      	mov	r2, r3
 8000b30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b34:	4816      	ldr	r0, [pc, #88]	; (8000b90 <update7SEG+0x2ec>)
 8000b36:	f001 fb58 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c0_GPIO_Port, c0_Pin, ON_);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	461a      	mov	r2, r3
 8000b40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b44:	4812      	ldr	r0, [pc, #72]	; (8000b90 <update7SEG+0x2ec>)
 8000b46:	f001 fb50 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d0_GPIO_Port, d0_Pin, ON_);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	461a      	mov	r2, r3
 8000b50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b54:	480e      	ldr	r0, [pc, #56]	; (8000b90 <update7SEG+0x2ec>)
 8000b56:	f001 fb48 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e0_GPIO_Port, e0_Pin, OFF_);
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	461a      	mov	r2, r3
 8000b60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b64:	480a      	ldr	r0, [pc, #40]	; (8000b90 <update7SEG+0x2ec>)
 8000b66:	f001 fb40 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f0_GPIO_Port, f0_Pin, ON_);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	461a      	mov	r2, r3
 8000b70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b74:	4806      	ldr	r0, [pc, #24]	; (8000b90 <update7SEG+0x2ec>)
 8000b76:	f001 fb38 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g0_GPIO_Port, g0_Pin, ON_);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	461a      	mov	r2, r3
 8000b80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b84:	4803      	ldr	r0, [pc, #12]	; (8000b94 <update7SEG+0x2f0>)
 8000b86:	f001 fb30 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 8000b8a:	e11d      	b.n	8000dc8 <update7SEG+0x524>
 8000b8c:	20000080 	.word	0x20000080
 8000b90:	40010800 	.word	0x40010800
 8000b94:	40010c00 	.word	0x40010c00

        case 6:
            HAL_GPIO_WritePin(a0_GPIO_Port, a0_Pin, ON_);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	2110      	movs	r1, #16
 8000ba0:	48b0      	ldr	r0, [pc, #704]	; (8000e64 <update7SEG+0x5c0>)
 8000ba2:	f001 fb22 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b0_GPIO_Port, b0_Pin, OFF_);
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	461a      	mov	r2, r3
 8000bac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bb0:	48ac      	ldr	r0, [pc, #688]	; (8000e64 <update7SEG+0x5c0>)
 8000bb2:	f001 fb1a 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c0_GPIO_Port, c0_Pin, ON_);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	461a      	mov	r2, r3
 8000bbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bc0:	48a8      	ldr	r0, [pc, #672]	; (8000e64 <update7SEG+0x5c0>)
 8000bc2:	f001 fb12 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d0_GPIO_Port, d0_Pin, ON_);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	461a      	mov	r2, r3
 8000bcc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bd0:	48a4      	ldr	r0, [pc, #656]	; (8000e64 <update7SEG+0x5c0>)
 8000bd2:	f001 fb0a 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e0_GPIO_Port, e0_Pin, ON_);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	461a      	mov	r2, r3
 8000bdc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000be0:	48a0      	ldr	r0, [pc, #640]	; (8000e64 <update7SEG+0x5c0>)
 8000be2:	f001 fb02 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f0_GPIO_Port, f0_Pin, ON_);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	461a      	mov	r2, r3
 8000bec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bf0:	489c      	ldr	r0, [pc, #624]	; (8000e64 <update7SEG+0x5c0>)
 8000bf2:	f001 fafa 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g0_GPIO_Port, g0_Pin, ON_);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c00:	4899      	ldr	r0, [pc, #612]	; (8000e68 <update7SEG+0x5c4>)
 8000c02:	f001 faf2 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 8000c06:	e0df      	b.n	8000dc8 <update7SEG+0x524>

        case 7:
            HAL_GPIO_WritePin(a0_GPIO_Port, a0_Pin, ON_);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	2110      	movs	r1, #16
 8000c10:	4894      	ldr	r0, [pc, #592]	; (8000e64 <update7SEG+0x5c0>)
 8000c12:	f001 faea 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b0_GPIO_Port, b0_Pin, ON_);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c20:	4890      	ldr	r0, [pc, #576]	; (8000e64 <update7SEG+0x5c0>)
 8000c22:	f001 fae2 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c0_GPIO_Port, c0_Pin, ON_);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c30:	488c      	ldr	r0, [pc, #560]	; (8000e64 <update7SEG+0x5c0>)
 8000c32:	f001 fada 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d0_GPIO_Port, d0_Pin, OFF_);
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c40:	4888      	ldr	r0, [pc, #544]	; (8000e64 <update7SEG+0x5c0>)
 8000c42:	f001 fad2 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e0_GPIO_Port, e0_Pin, OFF_);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c50:	4884      	ldr	r0, [pc, #528]	; (8000e64 <update7SEG+0x5c0>)
 8000c52:	f001 faca 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f0_GPIO_Port, f0_Pin, OFF_);
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c60:	4880      	ldr	r0, [pc, #512]	; (8000e64 <update7SEG+0x5c0>)
 8000c62:	f001 fac2 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g0_GPIO_Port, g0_Pin, OFF_);
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c70:	487d      	ldr	r0, [pc, #500]	; (8000e68 <update7SEG+0x5c4>)
 8000c72:	f001 faba 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 8000c76:	e0a7      	b.n	8000dc8 <update7SEG+0x524>

        case 8:
            HAL_GPIO_WritePin(a0_GPIO_Port, a0_Pin, ON_);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	2110      	movs	r1, #16
 8000c80:	4878      	ldr	r0, [pc, #480]	; (8000e64 <update7SEG+0x5c0>)
 8000c82:	f001 fab2 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b0_GPIO_Port, b0_Pin, ON_);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c90:	4874      	ldr	r0, [pc, #464]	; (8000e64 <update7SEG+0x5c0>)
 8000c92:	f001 faaa 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c0_GPIO_Port, c0_Pin, ON_);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ca0:	4870      	ldr	r0, [pc, #448]	; (8000e64 <update7SEG+0x5c0>)
 8000ca2:	f001 faa2 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d0_GPIO_Port, d0_Pin, ON_);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	461a      	mov	r2, r3
 8000cac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cb0:	486c      	ldr	r0, [pc, #432]	; (8000e64 <update7SEG+0x5c0>)
 8000cb2:	f001 fa9a 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e0_GPIO_Port, e0_Pin, ON_);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	461a      	mov	r2, r3
 8000cbc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cc0:	4868      	ldr	r0, [pc, #416]	; (8000e64 <update7SEG+0x5c0>)
 8000cc2:	f001 fa92 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f0_GPIO_Port, f0_Pin, ON_);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	461a      	mov	r2, r3
 8000ccc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cd0:	4864      	ldr	r0, [pc, #400]	; (8000e64 <update7SEG+0x5c0>)
 8000cd2:	f001 fa8a 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g0_GPIO_Port, g0_Pin, ON_);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	461a      	mov	r2, r3
 8000cdc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ce0:	4861      	ldr	r0, [pc, #388]	; (8000e68 <update7SEG+0x5c4>)
 8000ce2:	f001 fa82 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 8000ce6:	e06f      	b.n	8000dc8 <update7SEG+0x524>

        case 9:
            HAL_GPIO_WritePin(a0_GPIO_Port, a0_Pin, ON_);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	461a      	mov	r2, r3
 8000cee:	2110      	movs	r1, #16
 8000cf0:	485c      	ldr	r0, [pc, #368]	; (8000e64 <update7SEG+0x5c0>)
 8000cf2:	f001 fa7a 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b0_GPIO_Port, b0_Pin, ON_);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d00:	4858      	ldr	r0, [pc, #352]	; (8000e64 <update7SEG+0x5c0>)
 8000d02:	f001 fa72 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c0_GPIO_Port, c0_Pin, ON_);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d10:	4854      	ldr	r0, [pc, #336]	; (8000e64 <update7SEG+0x5c0>)
 8000d12:	f001 fa6a 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d0_GPIO_Port, d0_Pin, ON_);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d20:	4850      	ldr	r0, [pc, #320]	; (8000e64 <update7SEG+0x5c0>)
 8000d22:	f001 fa62 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e0_GPIO_Port, e0_Pin, OFF_);
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d30:	484c      	ldr	r0, [pc, #304]	; (8000e64 <update7SEG+0x5c0>)
 8000d32:	f001 fa5a 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f0_GPIO_Port, f0_Pin, ON_);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d40:	4848      	ldr	r0, [pc, #288]	; (8000e64 <update7SEG+0x5c0>)
 8000d42:	f001 fa52 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g0_GPIO_Port, g0_Pin, ON_);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d50:	4845      	ldr	r0, [pc, #276]	; (8000e68 <update7SEG+0x5c4>)
 8000d52:	f001 fa4a 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 8000d56:	e037      	b.n	8000dc8 <update7SEG+0x524>

        default:
            HAL_GPIO_WritePin(a0_GPIO_Port, a0_Pin, OFF_);
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	2110      	movs	r1, #16
 8000d60:	4840      	ldr	r0, [pc, #256]	; (8000e64 <update7SEG+0x5c0>)
 8000d62:	f001 fa42 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b0_GPIO_Port, b0_Pin, OFF_);
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d70:	483c      	ldr	r0, [pc, #240]	; (8000e64 <update7SEG+0x5c0>)
 8000d72:	f001 fa3a 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c0_GPIO_Port, c0_Pin, OFF_);
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d80:	4838      	ldr	r0, [pc, #224]	; (8000e64 <update7SEG+0x5c0>)
 8000d82:	f001 fa32 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d0_GPIO_Port, d0_Pin, OFF_);
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d90:	4834      	ldr	r0, [pc, #208]	; (8000e64 <update7SEG+0x5c0>)
 8000d92:	f001 fa2a 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e0_GPIO_Port, e0_Pin, OFF_);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000da0:	4830      	ldr	r0, [pc, #192]	; (8000e64 <update7SEG+0x5c0>)
 8000da2:	f001 fa22 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f0_GPIO_Port, f0_Pin, OFF_);
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	461a      	mov	r2, r3
 8000dac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000db0:	482c      	ldr	r0, [pc, #176]	; (8000e64 <update7SEG+0x5c0>)
 8000db2:	f001 fa1a 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g0_GPIO_Port, g0_Pin, OFF_);
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	461a      	mov	r2, r3
 8000dbc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dc0:	4829      	ldr	r0, [pc, #164]	; (8000e68 <update7SEG+0x5c4>)
 8000dc2:	f001 fa12 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 8000dc6:	bf00      	nop
    }

    switch (SEG7_buffer[1])
 8000dc8:	4b28      	ldr	r3, [pc, #160]	; (8000e6c <update7SEG+0x5c8>)
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	2b09      	cmp	r3, #9
 8000dce:	f200 8213 	bhi.w	80011f8 <update7SEG+0x954>
 8000dd2:	a201      	add	r2, pc, #4	; (adr r2, 8000dd8 <update7SEG+0x534>)
 8000dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd8:	08000e01 	.word	0x08000e01
 8000ddc:	08000e71 	.word	0x08000e71
 8000de0:	08000ed5 	.word	0x08000ed5
 8000de4:	08000f39 	.word	0x08000f39
 8000de8:	08000f9d 	.word	0x08000f9d
 8000dec:	08001001 	.word	0x08001001
 8000df0:	08001065 	.word	0x08001065
 8000df4:	080010c9 	.word	0x080010c9
 8000df8:	08001131 	.word	0x08001131
 8000dfc:	08001195 	.word	0x08001195
    {
        case 0:
            HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, ON_);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	461a      	mov	r2, r3
 8000e06:	2101      	movs	r1, #1
 8000e08:	4817      	ldr	r0, [pc, #92]	; (8000e68 <update7SEG+0x5c4>)
 8000e0a:	f001 f9ee 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, ON_);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	461a      	mov	r2, r3
 8000e14:	2102      	movs	r1, #2
 8000e16:	4814      	ldr	r0, [pc, #80]	; (8000e68 <update7SEG+0x5c4>)
 8000e18:	f001 f9e7 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, ON_);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	461a      	mov	r2, r3
 8000e22:	2104      	movs	r1, #4
 8000e24:	4810      	ldr	r0, [pc, #64]	; (8000e68 <update7SEG+0x5c4>)
 8000e26:	f001 f9e0 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, ON_);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	461a      	mov	r2, r3
 8000e30:	2108      	movs	r1, #8
 8000e32:	480d      	ldr	r0, [pc, #52]	; (8000e68 <update7SEG+0x5c4>)
 8000e34:	f001 f9d9 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, ON_);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	2110      	movs	r1, #16
 8000e40:	4809      	ldr	r0, [pc, #36]	; (8000e68 <update7SEG+0x5c4>)
 8000e42:	f001 f9d2 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, ON_);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	2120      	movs	r1, #32
 8000e4e:	4806      	ldr	r0, [pc, #24]	; (8000e68 <update7SEG+0x5c4>)
 8000e50:	f001 f9cb 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, OFF_);
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	461a      	mov	r2, r3
 8000e5a:	2140      	movs	r1, #64	; 0x40
 8000e5c:	4802      	ldr	r0, [pc, #8]	; (8000e68 <update7SEG+0x5c4>)
 8000e5e:	f001 f9c4 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 8000e62:	e1fb      	b.n	800125c <update7SEG+0x9b8>
 8000e64:	40010800 	.word	0x40010800
 8000e68:	40010c00 	.word	0x40010c00
 8000e6c:	20000080 	.word	0x20000080

        case 1:
            HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, OFF_);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	461a      	mov	r2, r3
 8000e76:	2101      	movs	r1, #1
 8000e78:	48ac      	ldr	r0, [pc, #688]	; (800112c <update7SEG+0x888>)
 8000e7a:	f001 f9b6 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, ON_);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	461a      	mov	r2, r3
 8000e84:	2102      	movs	r1, #2
 8000e86:	48a9      	ldr	r0, [pc, #676]	; (800112c <update7SEG+0x888>)
 8000e88:	f001 f9af 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, ON_);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	461a      	mov	r2, r3
 8000e92:	2104      	movs	r1, #4
 8000e94:	48a5      	ldr	r0, [pc, #660]	; (800112c <update7SEG+0x888>)
 8000e96:	f001 f9a8 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, OFF_);
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	2108      	movs	r1, #8
 8000ea2:	48a2      	ldr	r0, [pc, #648]	; (800112c <update7SEG+0x888>)
 8000ea4:	f001 f9a1 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, OFF_);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	461a      	mov	r2, r3
 8000eae:	2110      	movs	r1, #16
 8000eb0:	489e      	ldr	r0, [pc, #632]	; (800112c <update7SEG+0x888>)
 8000eb2:	f001 f99a 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, OFF_);
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	461a      	mov	r2, r3
 8000ebc:	2120      	movs	r1, #32
 8000ebe:	489b      	ldr	r0, [pc, #620]	; (800112c <update7SEG+0x888>)
 8000ec0:	f001 f993 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, OFF_);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	461a      	mov	r2, r3
 8000eca:	2140      	movs	r1, #64	; 0x40
 8000ecc:	4897      	ldr	r0, [pc, #604]	; (800112c <update7SEG+0x888>)
 8000ece:	f001 f98c 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 8000ed2:	e1c3      	b.n	800125c <update7SEG+0x9b8>

        case 2:
            HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, ON_);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	461a      	mov	r2, r3
 8000eda:	2101      	movs	r1, #1
 8000edc:	4893      	ldr	r0, [pc, #588]	; (800112c <update7SEG+0x888>)
 8000ede:	f001 f984 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, ON_);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	2102      	movs	r1, #2
 8000eea:	4890      	ldr	r0, [pc, #576]	; (800112c <update7SEG+0x888>)
 8000eec:	f001 f97d 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, OFF_);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	2104      	movs	r1, #4
 8000ef8:	488c      	ldr	r0, [pc, #560]	; (800112c <update7SEG+0x888>)
 8000efa:	f001 f976 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, ON_);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	461a      	mov	r2, r3
 8000f04:	2108      	movs	r1, #8
 8000f06:	4889      	ldr	r0, [pc, #548]	; (800112c <update7SEG+0x888>)
 8000f08:	f001 f96f 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, ON_);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	461a      	mov	r2, r3
 8000f12:	2110      	movs	r1, #16
 8000f14:	4885      	ldr	r0, [pc, #532]	; (800112c <update7SEG+0x888>)
 8000f16:	f001 f968 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, OFF_);
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	461a      	mov	r2, r3
 8000f20:	2120      	movs	r1, #32
 8000f22:	4882      	ldr	r0, [pc, #520]	; (800112c <update7SEG+0x888>)
 8000f24:	f001 f961 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, ON_);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	2140      	movs	r1, #64	; 0x40
 8000f30:	487e      	ldr	r0, [pc, #504]	; (800112c <update7SEG+0x888>)
 8000f32:	f001 f95a 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 8000f36:	e191      	b.n	800125c <update7SEG+0x9b8>

        case 3:
            HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, ON_);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	2101      	movs	r1, #1
 8000f40:	487a      	ldr	r0, [pc, #488]	; (800112c <update7SEG+0x888>)
 8000f42:	f001 f952 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, ON_);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	2102      	movs	r1, #2
 8000f4e:	4877      	ldr	r0, [pc, #476]	; (800112c <update7SEG+0x888>)
 8000f50:	f001 f94b 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, ON_);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	461a      	mov	r2, r3
 8000f5a:	2104      	movs	r1, #4
 8000f5c:	4873      	ldr	r0, [pc, #460]	; (800112c <update7SEG+0x888>)
 8000f5e:	f001 f944 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, ON_);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	461a      	mov	r2, r3
 8000f68:	2108      	movs	r1, #8
 8000f6a:	4870      	ldr	r0, [pc, #448]	; (800112c <update7SEG+0x888>)
 8000f6c:	f001 f93d 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, OFF_);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	461a      	mov	r2, r3
 8000f76:	2110      	movs	r1, #16
 8000f78:	486c      	ldr	r0, [pc, #432]	; (800112c <update7SEG+0x888>)
 8000f7a:	f001 f936 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, OFF_);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	461a      	mov	r2, r3
 8000f84:	2120      	movs	r1, #32
 8000f86:	4869      	ldr	r0, [pc, #420]	; (800112c <update7SEG+0x888>)
 8000f88:	f001 f92f 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, ON_);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	461a      	mov	r2, r3
 8000f92:	2140      	movs	r1, #64	; 0x40
 8000f94:	4865      	ldr	r0, [pc, #404]	; (800112c <update7SEG+0x888>)
 8000f96:	f001 f928 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 8000f9a:	e15f      	b.n	800125c <update7SEG+0x9b8>

        case 4:
            HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, OFF_);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	4861      	ldr	r0, [pc, #388]	; (800112c <update7SEG+0x888>)
 8000fa6:	f001 f920 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, ON_);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	461a      	mov	r2, r3
 8000fb0:	2102      	movs	r1, #2
 8000fb2:	485e      	ldr	r0, [pc, #376]	; (800112c <update7SEG+0x888>)
 8000fb4:	f001 f919 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, ON_);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	2104      	movs	r1, #4
 8000fc0:	485a      	ldr	r0, [pc, #360]	; (800112c <update7SEG+0x888>)
 8000fc2:	f001 f912 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, OFF_);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	461a      	mov	r2, r3
 8000fcc:	2108      	movs	r1, #8
 8000fce:	4857      	ldr	r0, [pc, #348]	; (800112c <update7SEG+0x888>)
 8000fd0:	f001 f90b 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, OFF_);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	461a      	mov	r2, r3
 8000fda:	2110      	movs	r1, #16
 8000fdc:	4853      	ldr	r0, [pc, #332]	; (800112c <update7SEG+0x888>)
 8000fde:	f001 f904 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, ON_);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	2120      	movs	r1, #32
 8000fea:	4850      	ldr	r0, [pc, #320]	; (800112c <update7SEG+0x888>)
 8000fec:	f001 f8fd 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, ON_);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	2140      	movs	r1, #64	; 0x40
 8000ff8:	484c      	ldr	r0, [pc, #304]	; (800112c <update7SEG+0x888>)
 8000ffa:	f001 f8f6 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 8000ffe:	e12d      	b.n	800125c <update7SEG+0x9b8>

        case 5:
            HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, ON_);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	b2db      	uxtb	r3, r3
 8001004:	461a      	mov	r2, r3
 8001006:	2101      	movs	r1, #1
 8001008:	4848      	ldr	r0, [pc, #288]	; (800112c <update7SEG+0x888>)
 800100a:	f001 f8ee 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, OFF_);
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	b2db      	uxtb	r3, r3
 8001012:	461a      	mov	r2, r3
 8001014:	2102      	movs	r1, #2
 8001016:	4845      	ldr	r0, [pc, #276]	; (800112c <update7SEG+0x888>)
 8001018:	f001 f8e7 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, ON_);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	b2db      	uxtb	r3, r3
 8001020:	461a      	mov	r2, r3
 8001022:	2104      	movs	r1, #4
 8001024:	4841      	ldr	r0, [pc, #260]	; (800112c <update7SEG+0x888>)
 8001026:	f001 f8e0 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, ON_);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	b2db      	uxtb	r3, r3
 800102e:	461a      	mov	r2, r3
 8001030:	2108      	movs	r1, #8
 8001032:	483e      	ldr	r0, [pc, #248]	; (800112c <update7SEG+0x888>)
 8001034:	f001 f8d9 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, OFF_);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	461a      	mov	r2, r3
 800103e:	2110      	movs	r1, #16
 8001040:	483a      	ldr	r0, [pc, #232]	; (800112c <update7SEG+0x888>)
 8001042:	f001 f8d2 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, ON_);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	b2db      	uxtb	r3, r3
 800104a:	461a      	mov	r2, r3
 800104c:	2120      	movs	r1, #32
 800104e:	4837      	ldr	r0, [pc, #220]	; (800112c <update7SEG+0x888>)
 8001050:	f001 f8cb 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, ON_);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	b2db      	uxtb	r3, r3
 8001058:	461a      	mov	r2, r3
 800105a:	2140      	movs	r1, #64	; 0x40
 800105c:	4833      	ldr	r0, [pc, #204]	; (800112c <update7SEG+0x888>)
 800105e:	f001 f8c4 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 8001062:	e0fb      	b.n	800125c <update7SEG+0x9b8>

        case 6:
            HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, ON_);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	b2db      	uxtb	r3, r3
 8001068:	461a      	mov	r2, r3
 800106a:	2101      	movs	r1, #1
 800106c:	482f      	ldr	r0, [pc, #188]	; (800112c <update7SEG+0x888>)
 800106e:	f001 f8bc 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, OFF_);
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	b2db      	uxtb	r3, r3
 8001076:	461a      	mov	r2, r3
 8001078:	2102      	movs	r1, #2
 800107a:	482c      	ldr	r0, [pc, #176]	; (800112c <update7SEG+0x888>)
 800107c:	f001 f8b5 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, ON_);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	b2db      	uxtb	r3, r3
 8001084:	461a      	mov	r2, r3
 8001086:	2104      	movs	r1, #4
 8001088:	4828      	ldr	r0, [pc, #160]	; (800112c <update7SEG+0x888>)
 800108a:	f001 f8ae 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, ON_);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	b2db      	uxtb	r3, r3
 8001092:	461a      	mov	r2, r3
 8001094:	2108      	movs	r1, #8
 8001096:	4825      	ldr	r0, [pc, #148]	; (800112c <update7SEG+0x888>)
 8001098:	f001 f8a7 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, ON_);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	461a      	mov	r2, r3
 80010a2:	2110      	movs	r1, #16
 80010a4:	4821      	ldr	r0, [pc, #132]	; (800112c <update7SEG+0x888>)
 80010a6:	f001 f8a0 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, ON_);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	461a      	mov	r2, r3
 80010b0:	2120      	movs	r1, #32
 80010b2:	481e      	ldr	r0, [pc, #120]	; (800112c <update7SEG+0x888>)
 80010b4:	f001 f899 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, ON_);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	461a      	mov	r2, r3
 80010be:	2140      	movs	r1, #64	; 0x40
 80010c0:	481a      	ldr	r0, [pc, #104]	; (800112c <update7SEG+0x888>)
 80010c2:	f001 f892 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 80010c6:	e0c9      	b.n	800125c <update7SEG+0x9b8>

        case 7:
            HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, ON_);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	461a      	mov	r2, r3
 80010ce:	2101      	movs	r1, #1
 80010d0:	4816      	ldr	r0, [pc, #88]	; (800112c <update7SEG+0x888>)
 80010d2:	f001 f88a 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, ON_);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	461a      	mov	r2, r3
 80010dc:	2102      	movs	r1, #2
 80010de:	4813      	ldr	r0, [pc, #76]	; (800112c <update7SEG+0x888>)
 80010e0:	f001 f883 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, ON_);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	461a      	mov	r2, r3
 80010ea:	2104      	movs	r1, #4
 80010ec:	480f      	ldr	r0, [pc, #60]	; (800112c <update7SEG+0x888>)
 80010ee:	f001 f87c 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, OFF_);
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	461a      	mov	r2, r3
 80010f8:	2108      	movs	r1, #8
 80010fa:	480c      	ldr	r0, [pc, #48]	; (800112c <update7SEG+0x888>)
 80010fc:	f001 f875 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, OFF_);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	b2db      	uxtb	r3, r3
 8001104:	461a      	mov	r2, r3
 8001106:	2110      	movs	r1, #16
 8001108:	4808      	ldr	r0, [pc, #32]	; (800112c <update7SEG+0x888>)
 800110a:	f001 f86e 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, OFF_);
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	b2db      	uxtb	r3, r3
 8001112:	461a      	mov	r2, r3
 8001114:	2120      	movs	r1, #32
 8001116:	4805      	ldr	r0, [pc, #20]	; (800112c <update7SEG+0x888>)
 8001118:	f001 f867 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, OFF_);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	b2db      	uxtb	r3, r3
 8001120:	461a      	mov	r2, r3
 8001122:	2140      	movs	r1, #64	; 0x40
 8001124:	4801      	ldr	r0, [pc, #4]	; (800112c <update7SEG+0x888>)
 8001126:	f001 f860 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 800112a:	e097      	b.n	800125c <update7SEG+0x9b8>
 800112c:	40010c00 	.word	0x40010c00

        case 8:
            HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, ON_);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	b2db      	uxtb	r3, r3
 8001134:	461a      	mov	r2, r3
 8001136:	2101      	movs	r1, #1
 8001138:	48aa      	ldr	r0, [pc, #680]	; (80013e4 <update7SEG+0xb40>)
 800113a:	f001 f856 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, ON_);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	b2db      	uxtb	r3, r3
 8001142:	461a      	mov	r2, r3
 8001144:	2102      	movs	r1, #2
 8001146:	48a7      	ldr	r0, [pc, #668]	; (80013e4 <update7SEG+0xb40>)
 8001148:	f001 f84f 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, ON_);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	b2db      	uxtb	r3, r3
 8001150:	461a      	mov	r2, r3
 8001152:	2104      	movs	r1, #4
 8001154:	48a3      	ldr	r0, [pc, #652]	; (80013e4 <update7SEG+0xb40>)
 8001156:	f001 f848 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, ON_);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	b2db      	uxtb	r3, r3
 800115e:	461a      	mov	r2, r3
 8001160:	2108      	movs	r1, #8
 8001162:	48a0      	ldr	r0, [pc, #640]	; (80013e4 <update7SEG+0xb40>)
 8001164:	f001 f841 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, ON_);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	b2db      	uxtb	r3, r3
 800116c:	461a      	mov	r2, r3
 800116e:	2110      	movs	r1, #16
 8001170:	489c      	ldr	r0, [pc, #624]	; (80013e4 <update7SEG+0xb40>)
 8001172:	f001 f83a 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, ON_);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	461a      	mov	r2, r3
 800117c:	2120      	movs	r1, #32
 800117e:	4899      	ldr	r0, [pc, #612]	; (80013e4 <update7SEG+0xb40>)
 8001180:	f001 f833 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, ON_);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	b2db      	uxtb	r3, r3
 8001188:	461a      	mov	r2, r3
 800118a:	2140      	movs	r1, #64	; 0x40
 800118c:	4895      	ldr	r0, [pc, #596]	; (80013e4 <update7SEG+0xb40>)
 800118e:	f001 f82c 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 8001192:	e063      	b.n	800125c <update7SEG+0x9b8>

        case 9:
            HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, ON_);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	b2db      	uxtb	r3, r3
 8001198:	461a      	mov	r2, r3
 800119a:	2101      	movs	r1, #1
 800119c:	4891      	ldr	r0, [pc, #580]	; (80013e4 <update7SEG+0xb40>)
 800119e:	f001 f824 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, ON_);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	461a      	mov	r2, r3
 80011a8:	2102      	movs	r1, #2
 80011aa:	488e      	ldr	r0, [pc, #568]	; (80013e4 <update7SEG+0xb40>)
 80011ac:	f001 f81d 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, ON_);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	461a      	mov	r2, r3
 80011b6:	2104      	movs	r1, #4
 80011b8:	488a      	ldr	r0, [pc, #552]	; (80013e4 <update7SEG+0xb40>)
 80011ba:	f001 f816 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, ON_);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	461a      	mov	r2, r3
 80011c4:	2108      	movs	r1, #8
 80011c6:	4887      	ldr	r0, [pc, #540]	; (80013e4 <update7SEG+0xb40>)
 80011c8:	f001 f80f 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, OFF_);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	461a      	mov	r2, r3
 80011d2:	2110      	movs	r1, #16
 80011d4:	4883      	ldr	r0, [pc, #524]	; (80013e4 <update7SEG+0xb40>)
 80011d6:	f001 f808 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, ON_);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	461a      	mov	r2, r3
 80011e0:	2120      	movs	r1, #32
 80011e2:	4880      	ldr	r0, [pc, #512]	; (80013e4 <update7SEG+0xb40>)
 80011e4:	f001 f801 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, ON_);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	461a      	mov	r2, r3
 80011ee:	2140      	movs	r1, #64	; 0x40
 80011f0:	487c      	ldr	r0, [pc, #496]	; (80013e4 <update7SEG+0xb40>)
 80011f2:	f000 fffa 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 80011f6:	e031      	b.n	800125c <update7SEG+0x9b8>

        default:
            HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, OFF_);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	461a      	mov	r2, r3
 80011fe:	2101      	movs	r1, #1
 8001200:	4878      	ldr	r0, [pc, #480]	; (80013e4 <update7SEG+0xb40>)
 8001202:	f000 fff2 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, OFF_);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	b2db      	uxtb	r3, r3
 800120a:	461a      	mov	r2, r3
 800120c:	2102      	movs	r1, #2
 800120e:	4875      	ldr	r0, [pc, #468]	; (80013e4 <update7SEG+0xb40>)
 8001210:	f000 ffeb 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, OFF_);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	461a      	mov	r2, r3
 800121a:	2104      	movs	r1, #4
 800121c:	4871      	ldr	r0, [pc, #452]	; (80013e4 <update7SEG+0xb40>)
 800121e:	f000 ffe4 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, OFF_);
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	b2db      	uxtb	r3, r3
 8001226:	461a      	mov	r2, r3
 8001228:	2108      	movs	r1, #8
 800122a:	486e      	ldr	r0, [pc, #440]	; (80013e4 <update7SEG+0xb40>)
 800122c:	f000 ffdd 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, OFF_);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	b2db      	uxtb	r3, r3
 8001234:	461a      	mov	r2, r3
 8001236:	2110      	movs	r1, #16
 8001238:	486a      	ldr	r0, [pc, #424]	; (80013e4 <update7SEG+0xb40>)
 800123a:	f000 ffd6 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, OFF_);
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	461a      	mov	r2, r3
 8001244:	2120      	movs	r1, #32
 8001246:	4867      	ldr	r0, [pc, #412]	; (80013e4 <update7SEG+0xb40>)
 8001248:	f000 ffcf 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, OFF_);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	b2db      	uxtb	r3, r3
 8001250:	461a      	mov	r2, r3
 8001252:	2140      	movs	r1, #64	; 0x40
 8001254:	4863      	ldr	r0, [pc, #396]	; (80013e4 <update7SEG+0xb40>)
 8001256:	f000 ffc8 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 800125a:	bf00      	nop
    }

    switch (SEG7_buffer[2])
 800125c:	4b62      	ldr	r3, [pc, #392]	; (80013e8 <update7SEG+0xb44>)
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	2b09      	cmp	r3, #9
 8001262:	f200 824d 	bhi.w	8001700 <update7SEG+0xe5c>
 8001266:	a201      	add	r2, pc, #4	; (adr r2, 800126c <update7SEG+0x9c8>)
 8001268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800126c:	08001295 	.word	0x08001295
 8001270:	08001305 	.word	0x08001305
 8001274:	08001375 	.word	0x08001375
 8001278:	080013ed 	.word	0x080013ed
 800127c:	0800145d 	.word	0x0800145d
 8001280:	080014cd 	.word	0x080014cd
 8001284:	0800153d 	.word	0x0800153d
 8001288:	080015ad 	.word	0x080015ad
 800128c:	0800161d 	.word	0x0800161d
 8001290:	08001691 	.word	0x08001691
    {
        case 0:
            HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, ON_);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	b2db      	uxtb	r3, r3
 8001298:	461a      	mov	r2, r3
 800129a:	2180      	movs	r1, #128	; 0x80
 800129c:	4851      	ldr	r0, [pc, #324]	; (80013e4 <update7SEG+0xb40>)
 800129e:	f000 ffa4 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, ON_);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	461a      	mov	r2, r3
 80012a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012ac:	484d      	ldr	r0, [pc, #308]	; (80013e4 <update7SEG+0xb40>)
 80012ae:	f000 ff9c 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, ON_);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	461a      	mov	r2, r3
 80012b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012bc:	4849      	ldr	r0, [pc, #292]	; (80013e4 <update7SEG+0xb40>)
 80012be:	f000 ff94 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, ON_);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	461a      	mov	r2, r3
 80012c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012cc:	4845      	ldr	r0, [pc, #276]	; (80013e4 <update7SEG+0xb40>)
 80012ce:	f000 ff8c 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, ON_);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	461a      	mov	r2, r3
 80012d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012dc:	4841      	ldr	r0, [pc, #260]	; (80013e4 <update7SEG+0xb40>)
 80012de:	f000 ff84 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, ON_);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	461a      	mov	r2, r3
 80012e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012ec:	483d      	ldr	r0, [pc, #244]	; (80013e4 <update7SEG+0xb40>)
 80012ee:	f000 ff7c 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, OFF_);
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	461a      	mov	r2, r3
 80012f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012fc:	4839      	ldr	r0, [pc, #228]	; (80013e4 <update7SEG+0xb40>)
 80012fe:	f000 ff74 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 8001302:	e235      	b.n	8001770 <update7SEG+0xecc>

        case 1:
            HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, OFF_);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	b2db      	uxtb	r3, r3
 8001308:	461a      	mov	r2, r3
 800130a:	2180      	movs	r1, #128	; 0x80
 800130c:	4835      	ldr	r0, [pc, #212]	; (80013e4 <update7SEG+0xb40>)
 800130e:	f000 ff6c 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, ON_);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	b2db      	uxtb	r3, r3
 8001316:	461a      	mov	r2, r3
 8001318:	f44f 7180 	mov.w	r1, #256	; 0x100
 800131c:	4831      	ldr	r0, [pc, #196]	; (80013e4 <update7SEG+0xb40>)
 800131e:	f000 ff64 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, ON_);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	b2db      	uxtb	r3, r3
 8001326:	461a      	mov	r2, r3
 8001328:	f44f 7100 	mov.w	r1, #512	; 0x200
 800132c:	482d      	ldr	r0, [pc, #180]	; (80013e4 <update7SEG+0xb40>)
 800132e:	f000 ff5c 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, OFF_);
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	461a      	mov	r2, r3
 8001338:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800133c:	4829      	ldr	r0, [pc, #164]	; (80013e4 <update7SEG+0xb40>)
 800133e:	f000 ff54 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, OFF_);
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	b2db      	uxtb	r3, r3
 8001346:	461a      	mov	r2, r3
 8001348:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800134c:	4825      	ldr	r0, [pc, #148]	; (80013e4 <update7SEG+0xb40>)
 800134e:	f000 ff4c 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, OFF_);
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	b2db      	uxtb	r3, r3
 8001356:	461a      	mov	r2, r3
 8001358:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800135c:	4821      	ldr	r0, [pc, #132]	; (80013e4 <update7SEG+0xb40>)
 800135e:	f000 ff44 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, OFF_);
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	b2db      	uxtb	r3, r3
 8001366:	461a      	mov	r2, r3
 8001368:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800136c:	481d      	ldr	r0, [pc, #116]	; (80013e4 <update7SEG+0xb40>)
 800136e:	f000 ff3c 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 8001372:	e1fd      	b.n	8001770 <update7SEG+0xecc>

        case 2:
            HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, ON_);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	b2db      	uxtb	r3, r3
 8001378:	461a      	mov	r2, r3
 800137a:	2180      	movs	r1, #128	; 0x80
 800137c:	4819      	ldr	r0, [pc, #100]	; (80013e4 <update7SEG+0xb40>)
 800137e:	f000 ff34 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, ON_);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	461a      	mov	r2, r3
 8001388:	f44f 7180 	mov.w	r1, #256	; 0x100
 800138c:	4815      	ldr	r0, [pc, #84]	; (80013e4 <update7SEG+0xb40>)
 800138e:	f000 ff2c 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, OFF_);
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	b2db      	uxtb	r3, r3
 8001396:	461a      	mov	r2, r3
 8001398:	f44f 7100 	mov.w	r1, #512	; 0x200
 800139c:	4811      	ldr	r0, [pc, #68]	; (80013e4 <update7SEG+0xb40>)
 800139e:	f000 ff24 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, ON_);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	461a      	mov	r2, r3
 80013a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ac:	480d      	ldr	r0, [pc, #52]	; (80013e4 <update7SEG+0xb40>)
 80013ae:	f000 ff1c 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, ON_);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	461a      	mov	r2, r3
 80013b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013bc:	4809      	ldr	r0, [pc, #36]	; (80013e4 <update7SEG+0xb40>)
 80013be:	f000 ff14 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, OFF_);
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	461a      	mov	r2, r3
 80013c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013cc:	4805      	ldr	r0, [pc, #20]	; (80013e4 <update7SEG+0xb40>)
 80013ce:	f000 ff0c 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, ON_);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	461a      	mov	r2, r3
 80013d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013dc:	4801      	ldr	r0, [pc, #4]	; (80013e4 <update7SEG+0xb40>)
 80013de:	f000 ff04 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 80013e2:	e1c5      	b.n	8001770 <update7SEG+0xecc>
 80013e4:	40010c00 	.word	0x40010c00
 80013e8:	20000080 	.word	0x20000080

        case 3:
            HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, ON_);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	461a      	mov	r2, r3
 80013f2:	2180      	movs	r1, #128	; 0x80
 80013f4:	48a5      	ldr	r0, [pc, #660]	; (800168c <update7SEG+0xde8>)
 80013f6:	f000 fef8 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, ON_);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	461a      	mov	r2, r3
 8001400:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001404:	48a1      	ldr	r0, [pc, #644]	; (800168c <update7SEG+0xde8>)
 8001406:	f000 fef0 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, ON_);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	b2db      	uxtb	r3, r3
 800140e:	461a      	mov	r2, r3
 8001410:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001414:	489d      	ldr	r0, [pc, #628]	; (800168c <update7SEG+0xde8>)
 8001416:	f000 fee8 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, ON_);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	b2db      	uxtb	r3, r3
 800141e:	461a      	mov	r2, r3
 8001420:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001424:	4899      	ldr	r0, [pc, #612]	; (800168c <update7SEG+0xde8>)
 8001426:	f000 fee0 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, OFF_);
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	b2db      	uxtb	r3, r3
 800142e:	461a      	mov	r2, r3
 8001430:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001434:	4895      	ldr	r0, [pc, #596]	; (800168c <update7SEG+0xde8>)
 8001436:	f000 fed8 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, OFF_);
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	b2db      	uxtb	r3, r3
 800143e:	461a      	mov	r2, r3
 8001440:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001444:	4891      	ldr	r0, [pc, #580]	; (800168c <update7SEG+0xde8>)
 8001446:	f000 fed0 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, ON_);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	b2db      	uxtb	r3, r3
 800144e:	461a      	mov	r2, r3
 8001450:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001454:	488d      	ldr	r0, [pc, #564]	; (800168c <update7SEG+0xde8>)
 8001456:	f000 fec8 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 800145a:	e189      	b.n	8001770 <update7SEG+0xecc>

        case 4:
            HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, OFF_);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	b2db      	uxtb	r3, r3
 8001460:	461a      	mov	r2, r3
 8001462:	2180      	movs	r1, #128	; 0x80
 8001464:	4889      	ldr	r0, [pc, #548]	; (800168c <update7SEG+0xde8>)
 8001466:	f000 fec0 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, ON_);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	b2db      	uxtb	r3, r3
 800146e:	461a      	mov	r2, r3
 8001470:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001474:	4885      	ldr	r0, [pc, #532]	; (800168c <update7SEG+0xde8>)
 8001476:	f000 feb8 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, ON_);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	b2db      	uxtb	r3, r3
 800147e:	461a      	mov	r2, r3
 8001480:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001484:	4881      	ldr	r0, [pc, #516]	; (800168c <update7SEG+0xde8>)
 8001486:	f000 feb0 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, OFF_);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	461a      	mov	r2, r3
 8001490:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001494:	487d      	ldr	r0, [pc, #500]	; (800168c <update7SEG+0xde8>)
 8001496:	f000 fea8 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, OFF_);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	b2db      	uxtb	r3, r3
 800149e:	461a      	mov	r2, r3
 80014a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014a4:	4879      	ldr	r0, [pc, #484]	; (800168c <update7SEG+0xde8>)
 80014a6:	f000 fea0 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, ON_);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	461a      	mov	r2, r3
 80014b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014b4:	4875      	ldr	r0, [pc, #468]	; (800168c <update7SEG+0xde8>)
 80014b6:	f000 fe98 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, ON_);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	461a      	mov	r2, r3
 80014c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014c4:	4871      	ldr	r0, [pc, #452]	; (800168c <update7SEG+0xde8>)
 80014c6:	f000 fe90 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 80014ca:	e151      	b.n	8001770 <update7SEG+0xecc>

        case 5:
            HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, ON_);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	461a      	mov	r2, r3
 80014d2:	2180      	movs	r1, #128	; 0x80
 80014d4:	486d      	ldr	r0, [pc, #436]	; (800168c <update7SEG+0xde8>)
 80014d6:	f000 fe88 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, OFF_);
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	461a      	mov	r2, r3
 80014e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014e4:	4869      	ldr	r0, [pc, #420]	; (800168c <update7SEG+0xde8>)
 80014e6:	f000 fe80 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, ON_);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	461a      	mov	r2, r3
 80014f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014f4:	4865      	ldr	r0, [pc, #404]	; (800168c <update7SEG+0xde8>)
 80014f6:	f000 fe78 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, ON_);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	461a      	mov	r2, r3
 8001500:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001504:	4861      	ldr	r0, [pc, #388]	; (800168c <update7SEG+0xde8>)
 8001506:	f000 fe70 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, OFF_);
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	b2db      	uxtb	r3, r3
 800150e:	461a      	mov	r2, r3
 8001510:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001514:	485d      	ldr	r0, [pc, #372]	; (800168c <update7SEG+0xde8>)
 8001516:	f000 fe68 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, ON_);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	461a      	mov	r2, r3
 8001520:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001524:	4859      	ldr	r0, [pc, #356]	; (800168c <update7SEG+0xde8>)
 8001526:	f000 fe60 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, ON_);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	461a      	mov	r2, r3
 8001530:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001534:	4855      	ldr	r0, [pc, #340]	; (800168c <update7SEG+0xde8>)
 8001536:	f000 fe58 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 800153a:	e119      	b.n	8001770 <update7SEG+0xecc>

        case 6:
            HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, ON_);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	b2db      	uxtb	r3, r3
 8001540:	461a      	mov	r2, r3
 8001542:	2180      	movs	r1, #128	; 0x80
 8001544:	4851      	ldr	r0, [pc, #324]	; (800168c <update7SEG+0xde8>)
 8001546:	f000 fe50 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, OFF_);
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	b2db      	uxtb	r3, r3
 800154e:	461a      	mov	r2, r3
 8001550:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001554:	484d      	ldr	r0, [pc, #308]	; (800168c <update7SEG+0xde8>)
 8001556:	f000 fe48 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, ON_);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	461a      	mov	r2, r3
 8001560:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001564:	4849      	ldr	r0, [pc, #292]	; (800168c <update7SEG+0xde8>)
 8001566:	f000 fe40 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, ON_);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	b2db      	uxtb	r3, r3
 800156e:	461a      	mov	r2, r3
 8001570:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001574:	4845      	ldr	r0, [pc, #276]	; (800168c <update7SEG+0xde8>)
 8001576:	f000 fe38 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, ON_);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	b2db      	uxtb	r3, r3
 800157e:	461a      	mov	r2, r3
 8001580:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001584:	4841      	ldr	r0, [pc, #260]	; (800168c <update7SEG+0xde8>)
 8001586:	f000 fe30 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, ON_);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	b2db      	uxtb	r3, r3
 800158e:	461a      	mov	r2, r3
 8001590:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001594:	483d      	ldr	r0, [pc, #244]	; (800168c <update7SEG+0xde8>)
 8001596:	f000 fe28 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, ON_);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	461a      	mov	r2, r3
 80015a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015a4:	4839      	ldr	r0, [pc, #228]	; (800168c <update7SEG+0xde8>)
 80015a6:	f000 fe20 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 80015aa:	e0e1      	b.n	8001770 <update7SEG+0xecc>

        case 7:
            HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, ON_);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	461a      	mov	r2, r3
 80015b2:	2180      	movs	r1, #128	; 0x80
 80015b4:	4835      	ldr	r0, [pc, #212]	; (800168c <update7SEG+0xde8>)
 80015b6:	f000 fe18 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, ON_);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	461a      	mov	r2, r3
 80015c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015c4:	4831      	ldr	r0, [pc, #196]	; (800168c <update7SEG+0xde8>)
 80015c6:	f000 fe10 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, ON_);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	461a      	mov	r2, r3
 80015d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015d4:	482d      	ldr	r0, [pc, #180]	; (800168c <update7SEG+0xde8>)
 80015d6:	f000 fe08 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, OFF_);
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	461a      	mov	r2, r3
 80015e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015e4:	4829      	ldr	r0, [pc, #164]	; (800168c <update7SEG+0xde8>)
 80015e6:	f000 fe00 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, OFF_);
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	461a      	mov	r2, r3
 80015f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015f4:	4825      	ldr	r0, [pc, #148]	; (800168c <update7SEG+0xde8>)
 80015f6:	f000 fdf8 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, OFF_);
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	461a      	mov	r2, r3
 8001600:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001604:	4821      	ldr	r0, [pc, #132]	; (800168c <update7SEG+0xde8>)
 8001606:	f000 fdf0 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, OFF_);
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	b2db      	uxtb	r3, r3
 800160e:	461a      	mov	r2, r3
 8001610:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001614:	481d      	ldr	r0, [pc, #116]	; (800168c <update7SEG+0xde8>)
 8001616:	f000 fde8 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 800161a:	e0a9      	b.n	8001770 <update7SEG+0xecc>

        case 8:
            HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, ON_);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	b2db      	uxtb	r3, r3
 8001620:	461a      	mov	r2, r3
 8001622:	2180      	movs	r1, #128	; 0x80
 8001624:	4819      	ldr	r0, [pc, #100]	; (800168c <update7SEG+0xde8>)
 8001626:	f000 fde0 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, ON_);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	b2db      	uxtb	r3, r3
 800162e:	461a      	mov	r2, r3
 8001630:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001634:	4815      	ldr	r0, [pc, #84]	; (800168c <update7SEG+0xde8>)
 8001636:	f000 fdd8 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, ON_);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	b2db      	uxtb	r3, r3
 800163e:	461a      	mov	r2, r3
 8001640:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001644:	4811      	ldr	r0, [pc, #68]	; (800168c <update7SEG+0xde8>)
 8001646:	f000 fdd0 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, ON_);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	b2db      	uxtb	r3, r3
 800164e:	461a      	mov	r2, r3
 8001650:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001654:	480d      	ldr	r0, [pc, #52]	; (800168c <update7SEG+0xde8>)
 8001656:	f000 fdc8 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, ON_);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	b2db      	uxtb	r3, r3
 800165e:	461a      	mov	r2, r3
 8001660:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001664:	4809      	ldr	r0, [pc, #36]	; (800168c <update7SEG+0xde8>)
 8001666:	f000 fdc0 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, ON_);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	b2db      	uxtb	r3, r3
 800166e:	461a      	mov	r2, r3
 8001670:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001674:	4805      	ldr	r0, [pc, #20]	; (800168c <update7SEG+0xde8>)
 8001676:	f000 fdb8 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, ON_);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	b2db      	uxtb	r3, r3
 800167e:	461a      	mov	r2, r3
 8001680:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001684:	4801      	ldr	r0, [pc, #4]	; (800168c <update7SEG+0xde8>)
 8001686:	f000 fdb0 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 800168a:	e071      	b.n	8001770 <update7SEG+0xecc>
 800168c:	40010c00 	.word	0x40010c00

        case 9:
            HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, ON_);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	b2db      	uxtb	r3, r3
 8001694:	461a      	mov	r2, r3
 8001696:	2180      	movs	r1, #128	; 0x80
 8001698:	4837      	ldr	r0, [pc, #220]	; (8001778 <update7SEG+0xed4>)
 800169a:	f000 fda6 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, ON_);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	461a      	mov	r2, r3
 80016a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016a8:	4833      	ldr	r0, [pc, #204]	; (8001778 <update7SEG+0xed4>)
 80016aa:	f000 fd9e 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, ON_);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	461a      	mov	r2, r3
 80016b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016b8:	482f      	ldr	r0, [pc, #188]	; (8001778 <update7SEG+0xed4>)
 80016ba:	f000 fd96 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, ON_);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	461a      	mov	r2, r3
 80016c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016c8:	482b      	ldr	r0, [pc, #172]	; (8001778 <update7SEG+0xed4>)
 80016ca:	f000 fd8e 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, OFF_);
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	461a      	mov	r2, r3
 80016d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016d8:	4827      	ldr	r0, [pc, #156]	; (8001778 <update7SEG+0xed4>)
 80016da:	f000 fd86 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, ON_);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	461a      	mov	r2, r3
 80016e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016e8:	4823      	ldr	r0, [pc, #140]	; (8001778 <update7SEG+0xed4>)
 80016ea:	f000 fd7e 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, ON_);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	461a      	mov	r2, r3
 80016f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016f8:	481f      	ldr	r0, [pc, #124]	; (8001778 <update7SEG+0xed4>)
 80016fa:	f000 fd76 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 80016fe:	e037      	b.n	8001770 <update7SEG+0xecc>

        default:
            HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, OFF_);
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	b2db      	uxtb	r3, r3
 8001704:	461a      	mov	r2, r3
 8001706:	2180      	movs	r1, #128	; 0x80
 8001708:	481b      	ldr	r0, [pc, #108]	; (8001778 <update7SEG+0xed4>)
 800170a:	f000 fd6e 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, OFF_);
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	b2db      	uxtb	r3, r3
 8001712:	461a      	mov	r2, r3
 8001714:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001718:	4817      	ldr	r0, [pc, #92]	; (8001778 <update7SEG+0xed4>)
 800171a:	f000 fd66 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, OFF_);
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	b2db      	uxtb	r3, r3
 8001722:	461a      	mov	r2, r3
 8001724:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001728:	4813      	ldr	r0, [pc, #76]	; (8001778 <update7SEG+0xed4>)
 800172a:	f000 fd5e 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, OFF_);
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	b2db      	uxtb	r3, r3
 8001732:	461a      	mov	r2, r3
 8001734:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001738:	480f      	ldr	r0, [pc, #60]	; (8001778 <update7SEG+0xed4>)
 800173a:	f000 fd56 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, OFF_);
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	b2db      	uxtb	r3, r3
 8001742:	461a      	mov	r2, r3
 8001744:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001748:	480b      	ldr	r0, [pc, #44]	; (8001778 <update7SEG+0xed4>)
 800174a:	f000 fd4e 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, OFF_);
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	b2db      	uxtb	r3, r3
 8001752:	461a      	mov	r2, r3
 8001754:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001758:	4807      	ldr	r0, [pc, #28]	; (8001778 <update7SEG+0xed4>)
 800175a:	f000 fd46 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, OFF_);
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	b2db      	uxtb	r3, r3
 8001762:	461a      	mov	r2, r3
 8001764:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001768:	4803      	ldr	r0, [pc, #12]	; (8001778 <update7SEG+0xed4>)
 800176a:	f000 fd3e 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 800176e:	bf00      	nop
    }
}
 8001770:	bf00      	nop
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40010c00 	.word	0x40010c00

0800177c <traffic_light_fsm>:




void traffic_light_fsm(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
    static int               counter0   = 5;

    static TrafficLightState state1     = GREEN;
    static int               counter1   = 3;

    switch (state0)
 8001780:	4b84      	ldr	r3, [pc, #528]	; (8001994 <traffic_light_fsm+0x218>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b02      	cmp	r3, #2
 8001786:	d029      	beq.n	80017dc <traffic_light_fsm+0x60>
 8001788:	2b02      	cmp	r3, #2
 800178a:	dc6f      	bgt.n	800186c <traffic_light_fsm+0xf0>
 800178c:	2b00      	cmp	r3, #0
 800178e:	d049      	beq.n	8001824 <traffic_light_fsm+0xa8>
 8001790:	2b01      	cmp	r3, #1
 8001792:	d16b      	bne.n	800186c <traffic_light_fsm+0xf0>
    {
        case GREEN:
            HAL_GPIO_WritePin(RED0_GPIO_Port, RED0_Pin, 0);
 8001794:	2200      	movs	r2, #0
 8001796:	2120      	movs	r1, #32
 8001798:	487f      	ldr	r0, [pc, #508]	; (8001998 <traffic_light_fsm+0x21c>)
 800179a:	f000 fd26 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(YELLOW0_GPIO_Port, YELLOW0_Pin, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	2140      	movs	r1, #64	; 0x40
 80017a2:	487d      	ldr	r0, [pc, #500]	; (8001998 <traffic_light_fsm+0x21c>)
 80017a4:	f000 fd21 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GREEN0_GPIO_Port, GREEN0_Pin, 1);
 80017a8:	2201      	movs	r2, #1
 80017aa:	2180      	movs	r1, #128	; 0x80
 80017ac:	487a      	ldr	r0, [pc, #488]	; (8001998 <traffic_light_fsm+0x21c>)
 80017ae:	f000 fd1c 	bl	80021ea <HAL_GPIO_WritePin>

            SEG7_buffer[0] = --counter0;
 80017b2:	4b7a      	ldr	r3, [pc, #488]	; (800199c <traffic_light_fsm+0x220>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	4a78      	ldr	r2, [pc, #480]	; (800199c <traffic_light_fsm+0x220>)
 80017ba:	6013      	str	r3, [r2, #0]
 80017bc:	4b77      	ldr	r3, [pc, #476]	; (800199c <traffic_light_fsm+0x220>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a77      	ldr	r2, [pc, #476]	; (80019a0 <traffic_light_fsm+0x224>)
 80017c2:	6013      	str	r3, [r2, #0]
            if (counter0 <= 0)
 80017c4:	4b75      	ldr	r3, [pc, #468]	; (800199c <traffic_light_fsm+0x220>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	dc51      	bgt.n	8001870 <traffic_light_fsm+0xf4>
            {
                state0 = YELLOW;
 80017cc:	4b71      	ldr	r3, [pc, #452]	; (8001994 <traffic_light_fsm+0x218>)
 80017ce:	2202      	movs	r2, #2
 80017d0:	701a      	strb	r2, [r3, #0]
                counter0 = YELLOW_light_counter;
 80017d2:	4b74      	ldr	r3, [pc, #464]	; (80019a4 <traffic_light_fsm+0x228>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a71      	ldr	r2, [pc, #452]	; (800199c <traffic_light_fsm+0x220>)
 80017d8:	6013      	str	r3, [r2, #0]
            }
            break;
 80017da:	e049      	b.n	8001870 <traffic_light_fsm+0xf4>
        
        case YELLOW:
            HAL_GPIO_WritePin(RED0_GPIO_Port, RED0_Pin, 0);
 80017dc:	2200      	movs	r2, #0
 80017de:	2120      	movs	r1, #32
 80017e0:	486d      	ldr	r0, [pc, #436]	; (8001998 <traffic_light_fsm+0x21c>)
 80017e2:	f000 fd02 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(YELLOW0_GPIO_Port, YELLOW0_Pin, 1);
 80017e6:	2201      	movs	r2, #1
 80017e8:	2140      	movs	r1, #64	; 0x40
 80017ea:	486b      	ldr	r0, [pc, #428]	; (8001998 <traffic_light_fsm+0x21c>)
 80017ec:	f000 fcfd 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GREEN0_GPIO_Port, GREEN0_Pin, 0);
 80017f0:	2200      	movs	r2, #0
 80017f2:	2180      	movs	r1, #128	; 0x80
 80017f4:	4868      	ldr	r0, [pc, #416]	; (8001998 <traffic_light_fsm+0x21c>)
 80017f6:	f000 fcf8 	bl	80021ea <HAL_GPIO_WritePin>

            SEG7_buffer[0] = --counter0;
 80017fa:	4b68      	ldr	r3, [pc, #416]	; (800199c <traffic_light_fsm+0x220>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	3b01      	subs	r3, #1
 8001800:	4a66      	ldr	r2, [pc, #408]	; (800199c <traffic_light_fsm+0x220>)
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	4b65      	ldr	r3, [pc, #404]	; (800199c <traffic_light_fsm+0x220>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a65      	ldr	r2, [pc, #404]	; (80019a0 <traffic_light_fsm+0x224>)
 800180a:	6013      	str	r3, [r2, #0]
            if (counter0 <= 0)
 800180c:	4b63      	ldr	r3, [pc, #396]	; (800199c <traffic_light_fsm+0x220>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	dc2f      	bgt.n	8001874 <traffic_light_fsm+0xf8>
            {
                state0 = RED;
 8001814:	4b5f      	ldr	r3, [pc, #380]	; (8001994 <traffic_light_fsm+0x218>)
 8001816:	2200      	movs	r2, #0
 8001818:	701a      	strb	r2, [r3, #0]
                counter0 = RED_light_counter;
 800181a:	4b63      	ldr	r3, [pc, #396]	; (80019a8 <traffic_light_fsm+0x22c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a5f      	ldr	r2, [pc, #380]	; (800199c <traffic_light_fsm+0x220>)
 8001820:	6013      	str	r3, [r2, #0]
            }
            break;
 8001822:	e027      	b.n	8001874 <traffic_light_fsm+0xf8>
        
        case RED:
            HAL_GPIO_WritePin(RED0_GPIO_Port, RED0_Pin, 1);
 8001824:	2201      	movs	r2, #1
 8001826:	2120      	movs	r1, #32
 8001828:	485b      	ldr	r0, [pc, #364]	; (8001998 <traffic_light_fsm+0x21c>)
 800182a:	f000 fcde 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(YELLOW0_GPIO_Port, YELLOW0_Pin, 0);
 800182e:	2200      	movs	r2, #0
 8001830:	2140      	movs	r1, #64	; 0x40
 8001832:	4859      	ldr	r0, [pc, #356]	; (8001998 <traffic_light_fsm+0x21c>)
 8001834:	f000 fcd9 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GREEN0_GPIO_Port, GREEN0_Pin, 0);
 8001838:	2200      	movs	r2, #0
 800183a:	2180      	movs	r1, #128	; 0x80
 800183c:	4856      	ldr	r0, [pc, #344]	; (8001998 <traffic_light_fsm+0x21c>)
 800183e:	f000 fcd4 	bl	80021ea <HAL_GPIO_WritePin>

            SEG7_buffer[0] = --counter0;
 8001842:	4b56      	ldr	r3, [pc, #344]	; (800199c <traffic_light_fsm+0x220>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	3b01      	subs	r3, #1
 8001848:	4a54      	ldr	r2, [pc, #336]	; (800199c <traffic_light_fsm+0x220>)
 800184a:	6013      	str	r3, [r2, #0]
 800184c:	4b53      	ldr	r3, [pc, #332]	; (800199c <traffic_light_fsm+0x220>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a53      	ldr	r2, [pc, #332]	; (80019a0 <traffic_light_fsm+0x224>)
 8001852:	6013      	str	r3, [r2, #0]
            if (counter0 <= 0)
 8001854:	4b51      	ldr	r3, [pc, #324]	; (800199c <traffic_light_fsm+0x220>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	dc0d      	bgt.n	8001878 <traffic_light_fsm+0xfc>
            {
                state0 = GREEN;
 800185c:	4b4d      	ldr	r3, [pc, #308]	; (8001994 <traffic_light_fsm+0x218>)
 800185e:	2201      	movs	r2, #1
 8001860:	701a      	strb	r2, [r3, #0]
                counter0 = GREEN_light_counter;
 8001862:	4b52      	ldr	r3, [pc, #328]	; (80019ac <traffic_light_fsm+0x230>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a4d      	ldr	r2, [pc, #308]	; (800199c <traffic_light_fsm+0x220>)
 8001868:	6013      	str	r3, [r2, #0]
            }
            break;
 800186a:	e005      	b.n	8001878 <traffic_light_fsm+0xfc>
        
        default:
            break;
 800186c:	bf00      	nop
 800186e:	e004      	b.n	800187a <traffic_light_fsm+0xfe>
            break;
 8001870:	bf00      	nop
 8001872:	e002      	b.n	800187a <traffic_light_fsm+0xfe>
            break;
 8001874:	bf00      	nop
 8001876:	e000      	b.n	800187a <traffic_light_fsm+0xfe>
            break;
 8001878:	bf00      	nop
    }


    switch (state1)
 800187a:	4b4d      	ldr	r3, [pc, #308]	; (80019b0 <traffic_light_fsm+0x234>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b02      	cmp	r3, #2
 8001880:	d02d      	beq.n	80018de <traffic_light_fsm+0x162>
 8001882:	2b02      	cmp	r3, #2
 8001884:	dc7b      	bgt.n	800197e <traffic_light_fsm+0x202>
 8001886:	2b00      	cmp	r3, #0
 8001888:	d051      	beq.n	800192e <traffic_light_fsm+0x1b2>
 800188a:	2b01      	cmp	r3, #1
 800188c:	d177      	bne.n	800197e <traffic_light_fsm+0x202>
    {
        case GREEN:
            HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, 0);
 800188e:	2200      	movs	r2, #0
 8001890:	2108      	movs	r1, #8
 8001892:	4841      	ldr	r0, [pc, #260]	; (8001998 <traffic_light_fsm+0x21c>)
 8001894:	f000 fca9 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, 0);
 8001898:	2200      	movs	r2, #0
 800189a:	2104      	movs	r1, #4
 800189c:	483e      	ldr	r0, [pc, #248]	; (8001998 <traffic_light_fsm+0x21c>)
 800189e:	f000 fca4 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, 1);
 80018a2:	2201      	movs	r2, #1
 80018a4:	2102      	movs	r1, #2
 80018a6:	483c      	ldr	r0, [pc, #240]	; (8001998 <traffic_light_fsm+0x21c>)
 80018a8:	f000 fc9f 	bl	80021ea <HAL_GPIO_WritePin>

            SEG7_buffer[1] = SEG7_buffer[2] = --counter1;
 80018ac:	4b41      	ldr	r3, [pc, #260]	; (80019b4 <traffic_light_fsm+0x238>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	3b01      	subs	r3, #1
 80018b2:	4a40      	ldr	r2, [pc, #256]	; (80019b4 <traffic_light_fsm+0x238>)
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	4b3f      	ldr	r3, [pc, #252]	; (80019b4 <traffic_light_fsm+0x238>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a39      	ldr	r2, [pc, #228]	; (80019a0 <traffic_light_fsm+0x224>)
 80018bc:	6093      	str	r3, [r2, #8]
 80018be:	4b38      	ldr	r3, [pc, #224]	; (80019a0 <traffic_light_fsm+0x224>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	4a37      	ldr	r2, [pc, #220]	; (80019a0 <traffic_light_fsm+0x224>)
 80018c4:	6053      	str	r3, [r2, #4]
            if (counter1 <= 0)
 80018c6:	4b3b      	ldr	r3, [pc, #236]	; (80019b4 <traffic_light_fsm+0x238>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	dc59      	bgt.n	8001982 <traffic_light_fsm+0x206>
            {
                state1 = YELLOW;
 80018ce:	4b38      	ldr	r3, [pc, #224]	; (80019b0 <traffic_light_fsm+0x234>)
 80018d0:	2202      	movs	r2, #2
 80018d2:	701a      	strb	r2, [r3, #0]
                counter1 = YELLOW_light_counter;
 80018d4:	4b33      	ldr	r3, [pc, #204]	; (80019a4 <traffic_light_fsm+0x228>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a36      	ldr	r2, [pc, #216]	; (80019b4 <traffic_light_fsm+0x238>)
 80018da:	6013      	str	r3, [r2, #0]
            }
            break;
 80018dc:	e051      	b.n	8001982 <traffic_light_fsm+0x206>
        
        case YELLOW:
            HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, 0);
 80018de:	2200      	movs	r2, #0
 80018e0:	2108      	movs	r1, #8
 80018e2:	482d      	ldr	r0, [pc, #180]	; (8001998 <traffic_light_fsm+0x21c>)
 80018e4:	f000 fc81 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, 1);
 80018e8:	2201      	movs	r2, #1
 80018ea:	2104      	movs	r1, #4
 80018ec:	482a      	ldr	r0, [pc, #168]	; (8001998 <traffic_light_fsm+0x21c>)
 80018ee:	f000 fc7c 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, 0);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2102      	movs	r1, #2
 80018f6:	4828      	ldr	r0, [pc, #160]	; (8001998 <traffic_light_fsm+0x21c>)
 80018f8:	f000 fc77 	bl	80021ea <HAL_GPIO_WritePin>

            SEG7_buffer[1] = SEG7_buffer[2] = --counter1;
 80018fc:	4b2d      	ldr	r3, [pc, #180]	; (80019b4 <traffic_light_fsm+0x238>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	3b01      	subs	r3, #1
 8001902:	4a2c      	ldr	r2, [pc, #176]	; (80019b4 <traffic_light_fsm+0x238>)
 8001904:	6013      	str	r3, [r2, #0]
 8001906:	4b2b      	ldr	r3, [pc, #172]	; (80019b4 <traffic_light_fsm+0x238>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a25      	ldr	r2, [pc, #148]	; (80019a0 <traffic_light_fsm+0x224>)
 800190c:	6093      	str	r3, [r2, #8]
 800190e:	4b24      	ldr	r3, [pc, #144]	; (80019a0 <traffic_light_fsm+0x224>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	4a23      	ldr	r2, [pc, #140]	; (80019a0 <traffic_light_fsm+0x224>)
 8001914:	6053      	str	r3, [r2, #4]
            if (counter1 <= 0)
 8001916:	4b27      	ldr	r3, [pc, #156]	; (80019b4 <traffic_light_fsm+0x238>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	dc33      	bgt.n	8001986 <traffic_light_fsm+0x20a>
            {
                state1 = RED;
 800191e:	4b24      	ldr	r3, [pc, #144]	; (80019b0 <traffic_light_fsm+0x234>)
 8001920:	2200      	movs	r2, #0
 8001922:	701a      	strb	r2, [r3, #0]
                counter1 = RED_light_counter;
 8001924:	4b20      	ldr	r3, [pc, #128]	; (80019a8 <traffic_light_fsm+0x22c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a22      	ldr	r2, [pc, #136]	; (80019b4 <traffic_light_fsm+0x238>)
 800192a:	6013      	str	r3, [r2, #0]
            }
            break;
 800192c:	e02b      	b.n	8001986 <traffic_light_fsm+0x20a>
        
        case RED:
            HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, 1);
 800192e:	2201      	movs	r2, #1
 8001930:	2108      	movs	r1, #8
 8001932:	4819      	ldr	r0, [pc, #100]	; (8001998 <traffic_light_fsm+0x21c>)
 8001934:	f000 fc59 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, 0);
 8001938:	2200      	movs	r2, #0
 800193a:	2104      	movs	r1, #4
 800193c:	4816      	ldr	r0, [pc, #88]	; (8001998 <traffic_light_fsm+0x21c>)
 800193e:	f000 fc54 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, 0);
 8001942:	2200      	movs	r2, #0
 8001944:	2102      	movs	r1, #2
 8001946:	4814      	ldr	r0, [pc, #80]	; (8001998 <traffic_light_fsm+0x21c>)
 8001948:	f000 fc4f 	bl	80021ea <HAL_GPIO_WritePin>

            SEG7_buffer[1] = SEG7_buffer[2] = --counter1;
 800194c:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <traffic_light_fsm+0x238>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	3b01      	subs	r3, #1
 8001952:	4a18      	ldr	r2, [pc, #96]	; (80019b4 <traffic_light_fsm+0x238>)
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	4b17      	ldr	r3, [pc, #92]	; (80019b4 <traffic_light_fsm+0x238>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a11      	ldr	r2, [pc, #68]	; (80019a0 <traffic_light_fsm+0x224>)
 800195c:	6093      	str	r3, [r2, #8]
 800195e:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <traffic_light_fsm+0x224>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	4a0f      	ldr	r2, [pc, #60]	; (80019a0 <traffic_light_fsm+0x224>)
 8001964:	6053      	str	r3, [r2, #4]
            if (counter1 <= 0)
 8001966:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <traffic_light_fsm+0x238>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	dc0d      	bgt.n	800198a <traffic_light_fsm+0x20e>
            {
                state1 = GREEN;
 800196e:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <traffic_light_fsm+0x234>)
 8001970:	2201      	movs	r2, #1
 8001972:	701a      	strb	r2, [r3, #0]
                counter1 = GREEN_light_counter;
 8001974:	4b0d      	ldr	r3, [pc, #52]	; (80019ac <traffic_light_fsm+0x230>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a0e      	ldr	r2, [pc, #56]	; (80019b4 <traffic_light_fsm+0x238>)
 800197a:	6013      	str	r3, [r2, #0]
            }
            break;
 800197c:	e005      	b.n	800198a <traffic_light_fsm+0x20e>
        
        default:
            break;
 800197e:	bf00      	nop
 8001980:	e004      	b.n	800198c <traffic_light_fsm+0x210>
            break;
 8001982:	bf00      	nop
 8001984:	e002      	b.n	800198c <traffic_light_fsm+0x210>
            break;
 8001986:	bf00      	nop
 8001988:	e000      	b.n	800198c <traffic_light_fsm+0x210>
            break;
 800198a:	bf00      	nop
    }

    update7SEG();
 800198c:	f7fe ff8a 	bl	80008a4 <update7SEG>
}
 8001990:	bf00      	nop
 8001992:	bd80      	pop	{r7, pc}
 8001994:	2000008c 	.word	0x2000008c
 8001998:	40010800 	.word	0x40010800
 800199c:	2000003c 	.word	0x2000003c
 80019a0:	20000080 	.word	0x20000080
 80019a4:	20000034 	.word	0x20000034
 80019a8:	20000038 	.word	0x20000038
 80019ac:	20000030 	.word	0x20000030
 80019b0:	20000040 	.word	0x20000040
 80019b4:	20000044 	.word	0x20000044

080019b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019be:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <HAL_MspInit+0x5c>)
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	4a14      	ldr	r2, [pc, #80]	; (8001a14 <HAL_MspInit+0x5c>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	6193      	str	r3, [r2, #24]
 80019ca:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <HAL_MspInit+0x5c>)
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019d6:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <HAL_MspInit+0x5c>)
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	4a0e      	ldr	r2, [pc, #56]	; (8001a14 <HAL_MspInit+0x5c>)
 80019dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e0:	61d3      	str	r3, [r2, #28]
 80019e2:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <HAL_MspInit+0x5c>)
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ea:	607b      	str	r3, [r7, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80019ee:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <HAL_MspInit+0x60>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	4a04      	ldr	r2, [pc, #16]	; (8001a18 <HAL_MspInit+0x60>)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	3714      	adds	r7, #20
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr
 8001a14:	40021000 	.word	0x40021000
 8001a18:	40010000 	.word	0x40010000

08001a1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a2c:	d113      	bne.n	8001a56 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a2e:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <HAL_TIM_Base_MspInit+0x44>)
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	4a0b      	ldr	r2, [pc, #44]	; (8001a60 <HAL_TIM_Base_MspInit+0x44>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	61d3      	str	r3, [r2, #28]
 8001a3a:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <HAL_TIM_Base_MspInit+0x44>)
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2100      	movs	r1, #0
 8001a4a:	201c      	movs	r0, #28
 8001a4c:	f000 fa05 	bl	8001e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a50:	201c      	movs	r0, #28
 8001a52:	f000 fa1e 	bl	8001e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a56:	bf00      	nop
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40021000 	.word	0x40021000

08001a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a68:	e7fe      	b.n	8001a68 <NMI_Handler+0x4>

08001a6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a6e:	e7fe      	b.n	8001a6e <HardFault_Handler+0x4>

08001a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a74:	e7fe      	b.n	8001a74 <MemManage_Handler+0x4>

08001a76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a7a:	e7fe      	b.n	8001a7a <BusFault_Handler+0x4>

08001a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a80:	e7fe      	b.n	8001a80 <UsageFault_Handler+0x4>

08001a82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr

08001a8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr

08001a9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr

08001aa6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aaa:	f000 f8e3 	bl	8001c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ab8:	4802      	ldr	r0, [pc, #8]	; (8001ac4 <TIM2_IRQHandler+0x10>)
 8001aba:	f001 f83f 	bl	8002b3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	200000ac 	.word	0x200000ac

08001ac8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr

08001ad4 <timer_run>:

static int timer2_counter = 0;
int timer2_flag = 0;

static void timer_run (void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
	if( timer0_counter > 0)
 8001ad8:	4b19      	ldr	r3, [pc, #100]	; (8001b40 <timer_run+0x6c>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	dd0b      	ble.n	8001af8 <timer_run+0x24>
	{
		timer0_counter--;
 8001ae0:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <timer_run+0x6c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	4a16      	ldr	r2, [pc, #88]	; (8001b40 <timer_run+0x6c>)
 8001ae8:	6013      	str	r3, [r2, #0]
		if( timer0_counter <= 0) timer0_flag = 1; //turn on the flag, the function will run
 8001aea:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <timer_run+0x6c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	dc02      	bgt.n	8001af8 <timer_run+0x24>
 8001af2:	4b14      	ldr	r3, [pc, #80]	; (8001b44 <timer_run+0x70>)
 8001af4:	2201      	movs	r2, #1
 8001af6:	601a      	str	r2, [r3, #0]
	}
	if( timer1_counter > 0)
 8001af8:	4b13      	ldr	r3, [pc, #76]	; (8001b48 <timer_run+0x74>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	dd0b      	ble.n	8001b18 <timer_run+0x44>
	{
		timer1_counter--;
 8001b00:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <timer_run+0x74>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	3b01      	subs	r3, #1
 8001b06:	4a10      	ldr	r2, [pc, #64]	; (8001b48 <timer_run+0x74>)
 8001b08:	6013      	str	r3, [r2, #0]
		if( timer1_counter <= 0) timer1_flag = 1; //turn on the flag, the function will run
 8001b0a:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <timer_run+0x74>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	dc02      	bgt.n	8001b18 <timer_run+0x44>
 8001b12:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <timer_run+0x78>)
 8001b14:	2201      	movs	r2, #1
 8001b16:	601a      	str	r2, [r3, #0]
	}
	if( timer2_counter > 0)
 8001b18:	4b0d      	ldr	r3, [pc, #52]	; (8001b50 <timer_run+0x7c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	dd0b      	ble.n	8001b38 <timer_run+0x64>
	{
		timer2_counter--;
 8001b20:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <timer_run+0x7c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	3b01      	subs	r3, #1
 8001b26:	4a0a      	ldr	r2, [pc, #40]	; (8001b50 <timer_run+0x7c>)
 8001b28:	6013      	str	r3, [r2, #0]
		if( timer2_counter <= 0) timer2_flag = 1; //turn on the flag, the function will run
 8001b2a:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <timer_run+0x7c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	dc02      	bgt.n	8001b38 <timer_run+0x64>
 8001b32:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <timer_run+0x80>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	601a      	str	r2, [r3, #0]
	}
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr
 8001b40:	2000009c 	.word	0x2000009c
 8001b44:	20000090 	.word	0x20000090
 8001b48:	200000a0 	.word	0x200000a0
 8001b4c:	20000094 	.word	0x20000094
 8001b50:	200000a4 	.word	0x200000a4
 8001b54:	20000098 	.word	0x20000098

08001b58 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
	get_BUTTONs();
 8001b60:	f7fe fb2a 	bl	80001b8 <get_BUTTONs>
	timer_run();
 8001b64:	f7ff ffb6 	bl	8001ad4 <timer_run>
}
 8001b68:	bf00      	nop
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <setTimer0>:



void setTimer0 ( int duration ) //to reset the timer.
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
	timer0_counter = duration / TIMER_CYCLE ; //the duration must be a divisor of hardware timer period
 8001b78:	220a      	movs	r2, #10
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8001b80:	4a04      	ldr	r2, [pc, #16]	; (8001b94 <setTimer0+0x24>)
 8001b82:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 8001b84:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <setTimer0+0x28>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr
 8001b94:	2000009c 	.word	0x2000009c
 8001b98:	20000090 	.word	0x20000090

08001b9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b9c:	f7ff ff94 	bl	8001ac8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ba0:	480b      	ldr	r0, [pc, #44]	; (8001bd0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ba2:	490c      	ldr	r1, [pc, #48]	; (8001bd4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ba4:	4a0c      	ldr	r2, [pc, #48]	; (8001bd8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba8:	e002      	b.n	8001bb0 <LoopCopyDataInit>

08001baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bae:	3304      	adds	r3, #4

08001bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb4:	d3f9      	bcc.n	8001baa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bb6:	4a09      	ldr	r2, [pc, #36]	; (8001bdc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001bb8:	4c09      	ldr	r4, [pc, #36]	; (8001be0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bbc:	e001      	b.n	8001bc2 <LoopFillZerobss>

08001bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bc0:	3204      	adds	r2, #4

08001bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc4:	d3fb      	bcc.n	8001bbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bc6:	f001 fb05 	bl	80031d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bca:	f7fe fd51 	bl	8000670 <main>
  bx lr
 8001bce:	4770      	bx	lr
  ldr r0, =_sdata
 8001bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd4:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8001bd8:	08003270 	.word	0x08003270
  ldr r2, =_sbss
 8001bdc:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8001be0:	200000f8 	.word	0x200000f8

08001be4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001be4:	e7fe      	b.n	8001be4 <ADC1_2_IRQHandler>
	...

08001be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bec:	4b08      	ldr	r3, [pc, #32]	; (8001c10 <HAL_Init+0x28>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a07      	ldr	r2, [pc, #28]	; (8001c10 <HAL_Init+0x28>)
 8001bf2:	f043 0310 	orr.w	r3, r3, #16
 8001bf6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bf8:	2003      	movs	r0, #3
 8001bfa:	f000 f923 	bl	8001e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bfe:	200f      	movs	r0, #15
 8001c00:	f000 f808 	bl	8001c14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c04:	f7ff fed8 	bl	80019b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40022000 	.word	0x40022000

08001c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c1c:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <HAL_InitTick+0x54>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <HAL_InitTick+0x58>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	4619      	mov	r1, r3
 8001c26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c32:	4618      	mov	r0, r3
 8001c34:	f000 f93b 	bl	8001eae <HAL_SYSTICK_Config>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e00e      	b.n	8001c60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2b0f      	cmp	r3, #15
 8001c46:	d80a      	bhi.n	8001c5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c50:	f000 f903 	bl	8001e5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c54:	4a06      	ldr	r2, [pc, #24]	; (8001c70 <HAL_InitTick+0x5c>)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	e000      	b.n	8001c60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20000048 	.word	0x20000048
 8001c6c:	20000050 	.word	0x20000050
 8001c70:	2000004c 	.word	0x2000004c

08001c74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c78:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <HAL_IncTick+0x1c>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <HAL_IncTick+0x20>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4413      	add	r3, r2
 8001c84:	4a03      	ldr	r2, [pc, #12]	; (8001c94 <HAL_IncTick+0x20>)
 8001c86:	6013      	str	r3, [r2, #0]
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr
 8001c90:	20000050 	.word	0x20000050
 8001c94:	200000f4 	.word	0x200000f4

08001c98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c9c:	4b02      	ldr	r3, [pc, #8]	; (8001ca8 <HAL_GetTick+0x10>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr
 8001ca8:	200000f4 	.word	0x200000f4

08001cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cc8:	4013      	ands	r3, r2
 8001cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cde:	4a04      	ldr	r2, [pc, #16]	; (8001cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	60d3      	str	r3, [r2, #12]
}
 8001ce4:	bf00      	nop
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf8:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <__NVIC_GetPriorityGrouping+0x18>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	0a1b      	lsrs	r3, r3, #8
 8001cfe:	f003 0307 	and.w	r3, r3, #7
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	db0b      	blt.n	8001d3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	f003 021f 	and.w	r2, r3, #31
 8001d28:	4906      	ldr	r1, [pc, #24]	; (8001d44 <__NVIC_EnableIRQ+0x34>)
 8001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2e:	095b      	lsrs	r3, r3, #5
 8001d30:	2001      	movs	r0, #1
 8001d32:	fa00 f202 	lsl.w	r2, r0, r2
 8001d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr
 8001d44:	e000e100 	.word	0xe000e100

08001d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	6039      	str	r1, [r7, #0]
 8001d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	db0a      	blt.n	8001d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	490c      	ldr	r1, [pc, #48]	; (8001d94 <__NVIC_SetPriority+0x4c>)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	0112      	lsls	r2, r2, #4
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d70:	e00a      	b.n	8001d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	4908      	ldr	r1, [pc, #32]	; (8001d98 <__NVIC_SetPriority+0x50>)
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	3b04      	subs	r3, #4
 8001d80:	0112      	lsls	r2, r2, #4
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	440b      	add	r3, r1
 8001d86:	761a      	strb	r2, [r3, #24]
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	e000e100 	.word	0xe000e100
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b089      	sub	sp, #36	; 0x24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f1c3 0307 	rsb	r3, r3, #7
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	bf28      	it	cs
 8001dba:	2304      	movcs	r3, #4
 8001dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	2b06      	cmp	r3, #6
 8001dc4:	d902      	bls.n	8001dcc <NVIC_EncodePriority+0x30>
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3b03      	subs	r3, #3
 8001dca:	e000      	b.n	8001dce <NVIC_EncodePriority+0x32>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43da      	mvns	r2, r3
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	401a      	ands	r2, r3
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de4:	f04f 31ff 	mov.w	r1, #4294967295
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	fa01 f303 	lsl.w	r3, r1, r3
 8001dee:	43d9      	mvns	r1, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df4:	4313      	orrs	r3, r2
         );
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3724      	adds	r7, #36	; 0x24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr

08001e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e10:	d301      	bcc.n	8001e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e12:	2301      	movs	r3, #1
 8001e14:	e00f      	b.n	8001e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e16:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <SysTick_Config+0x40>)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e1e:	210f      	movs	r1, #15
 8001e20:	f04f 30ff 	mov.w	r0, #4294967295
 8001e24:	f7ff ff90 	bl	8001d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e28:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <SysTick_Config+0x40>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e2e:	4b04      	ldr	r3, [pc, #16]	; (8001e40 <SysTick_Config+0x40>)
 8001e30:	2207      	movs	r2, #7
 8001e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	e000e010 	.word	0xe000e010

08001e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff ff2d 	bl	8001cac <__NVIC_SetPriorityGrouping>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b086      	sub	sp, #24
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	4603      	mov	r3, r0
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	607a      	str	r2, [r7, #4]
 8001e66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e6c:	f7ff ff42 	bl	8001cf4 <__NVIC_GetPriorityGrouping>
 8001e70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	68b9      	ldr	r1, [r7, #8]
 8001e76:	6978      	ldr	r0, [r7, #20]
 8001e78:	f7ff ff90 	bl	8001d9c <NVIC_EncodePriority>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e82:	4611      	mov	r1, r2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff5f 	bl	8001d48 <__NVIC_SetPriority>
}
 8001e8a:	bf00      	nop
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	4603      	mov	r3, r0
 8001e9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff35 	bl	8001d10 <__NVIC_EnableIRQ>
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff ffa2 	bl	8001e00 <SysTick_Config>
 8001ebc:	4603      	mov	r3, r0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b08b      	sub	sp, #44	; 0x2c
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eda:	e148      	b.n	800216e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001edc:	2201      	movs	r2, #1
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	69fa      	ldr	r2, [r7, #28]
 8001eec:	4013      	ands	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	f040 8137 	bne.w	8002168 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	4aa3      	ldr	r2, [pc, #652]	; (800218c <HAL_GPIO_Init+0x2c4>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d05e      	beq.n	8001fc2 <HAL_GPIO_Init+0xfa>
 8001f04:	4aa1      	ldr	r2, [pc, #644]	; (800218c <HAL_GPIO_Init+0x2c4>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d875      	bhi.n	8001ff6 <HAL_GPIO_Init+0x12e>
 8001f0a:	4aa1      	ldr	r2, [pc, #644]	; (8002190 <HAL_GPIO_Init+0x2c8>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d058      	beq.n	8001fc2 <HAL_GPIO_Init+0xfa>
 8001f10:	4a9f      	ldr	r2, [pc, #636]	; (8002190 <HAL_GPIO_Init+0x2c8>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d86f      	bhi.n	8001ff6 <HAL_GPIO_Init+0x12e>
 8001f16:	4a9f      	ldr	r2, [pc, #636]	; (8002194 <HAL_GPIO_Init+0x2cc>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d052      	beq.n	8001fc2 <HAL_GPIO_Init+0xfa>
 8001f1c:	4a9d      	ldr	r2, [pc, #628]	; (8002194 <HAL_GPIO_Init+0x2cc>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d869      	bhi.n	8001ff6 <HAL_GPIO_Init+0x12e>
 8001f22:	4a9d      	ldr	r2, [pc, #628]	; (8002198 <HAL_GPIO_Init+0x2d0>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d04c      	beq.n	8001fc2 <HAL_GPIO_Init+0xfa>
 8001f28:	4a9b      	ldr	r2, [pc, #620]	; (8002198 <HAL_GPIO_Init+0x2d0>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d863      	bhi.n	8001ff6 <HAL_GPIO_Init+0x12e>
 8001f2e:	4a9b      	ldr	r2, [pc, #620]	; (800219c <HAL_GPIO_Init+0x2d4>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d046      	beq.n	8001fc2 <HAL_GPIO_Init+0xfa>
 8001f34:	4a99      	ldr	r2, [pc, #612]	; (800219c <HAL_GPIO_Init+0x2d4>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d85d      	bhi.n	8001ff6 <HAL_GPIO_Init+0x12e>
 8001f3a:	2b12      	cmp	r3, #18
 8001f3c:	d82a      	bhi.n	8001f94 <HAL_GPIO_Init+0xcc>
 8001f3e:	2b12      	cmp	r3, #18
 8001f40:	d859      	bhi.n	8001ff6 <HAL_GPIO_Init+0x12e>
 8001f42:	a201      	add	r2, pc, #4	; (adr r2, 8001f48 <HAL_GPIO_Init+0x80>)
 8001f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f48:	08001fc3 	.word	0x08001fc3
 8001f4c:	08001f9d 	.word	0x08001f9d
 8001f50:	08001faf 	.word	0x08001faf
 8001f54:	08001ff1 	.word	0x08001ff1
 8001f58:	08001ff7 	.word	0x08001ff7
 8001f5c:	08001ff7 	.word	0x08001ff7
 8001f60:	08001ff7 	.word	0x08001ff7
 8001f64:	08001ff7 	.word	0x08001ff7
 8001f68:	08001ff7 	.word	0x08001ff7
 8001f6c:	08001ff7 	.word	0x08001ff7
 8001f70:	08001ff7 	.word	0x08001ff7
 8001f74:	08001ff7 	.word	0x08001ff7
 8001f78:	08001ff7 	.word	0x08001ff7
 8001f7c:	08001ff7 	.word	0x08001ff7
 8001f80:	08001ff7 	.word	0x08001ff7
 8001f84:	08001ff7 	.word	0x08001ff7
 8001f88:	08001ff7 	.word	0x08001ff7
 8001f8c:	08001fa5 	.word	0x08001fa5
 8001f90:	08001fb9 	.word	0x08001fb9
 8001f94:	4a82      	ldr	r2, [pc, #520]	; (80021a0 <HAL_GPIO_Init+0x2d8>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d013      	beq.n	8001fc2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f9a:	e02c      	b.n	8001ff6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	623b      	str	r3, [r7, #32]
          break;
 8001fa2:	e029      	b.n	8001ff8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	3304      	adds	r3, #4
 8001faa:	623b      	str	r3, [r7, #32]
          break;
 8001fac:	e024      	b.n	8001ff8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	3308      	adds	r3, #8
 8001fb4:	623b      	str	r3, [r7, #32]
          break;
 8001fb6:	e01f      	b.n	8001ff8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	330c      	adds	r3, #12
 8001fbe:	623b      	str	r3, [r7, #32]
          break;
 8001fc0:	e01a      	b.n	8001ff8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d102      	bne.n	8001fd0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fca:	2304      	movs	r3, #4
 8001fcc:	623b      	str	r3, [r7, #32]
          break;
 8001fce:	e013      	b.n	8001ff8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d105      	bne.n	8001fe4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fd8:	2308      	movs	r3, #8
 8001fda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	69fa      	ldr	r2, [r7, #28]
 8001fe0:	611a      	str	r2, [r3, #16]
          break;
 8001fe2:	e009      	b.n	8001ff8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fe4:	2308      	movs	r3, #8
 8001fe6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69fa      	ldr	r2, [r7, #28]
 8001fec:	615a      	str	r2, [r3, #20]
          break;
 8001fee:	e003      	b.n	8001ff8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	623b      	str	r3, [r7, #32]
          break;
 8001ff4:	e000      	b.n	8001ff8 <HAL_GPIO_Init+0x130>
          break;
 8001ff6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	2bff      	cmp	r3, #255	; 0xff
 8001ffc:	d801      	bhi.n	8002002 <HAL_GPIO_Init+0x13a>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	e001      	b.n	8002006 <HAL_GPIO_Init+0x13e>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	3304      	adds	r3, #4
 8002006:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	2bff      	cmp	r3, #255	; 0xff
 800200c:	d802      	bhi.n	8002014 <HAL_GPIO_Init+0x14c>
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	e002      	b.n	800201a <HAL_GPIO_Init+0x152>
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	3b08      	subs	r3, #8
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	210f      	movs	r1, #15
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	fa01 f303 	lsl.w	r3, r1, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	401a      	ands	r2, r3
 800202c:	6a39      	ldr	r1, [r7, #32]
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	fa01 f303 	lsl.w	r3, r1, r3
 8002034:	431a      	orrs	r2, r3
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	f000 8090 	beq.w	8002168 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002048:	4b56      	ldr	r3, [pc, #344]	; (80021a4 <HAL_GPIO_Init+0x2dc>)
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	4a55      	ldr	r2, [pc, #340]	; (80021a4 <HAL_GPIO_Init+0x2dc>)
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	6193      	str	r3, [r2, #24]
 8002054:	4b53      	ldr	r3, [pc, #332]	; (80021a4 <HAL_GPIO_Init+0x2dc>)
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002060:	4a51      	ldr	r2, [pc, #324]	; (80021a8 <HAL_GPIO_Init+0x2e0>)
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	089b      	lsrs	r3, r3, #2
 8002066:	3302      	adds	r3, #2
 8002068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800206c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	f003 0303 	and.w	r3, r3, #3
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	220f      	movs	r2, #15
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	4013      	ands	r3, r2
 8002082:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a49      	ldr	r2, [pc, #292]	; (80021ac <HAL_GPIO_Init+0x2e4>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d00d      	beq.n	80020a8 <HAL_GPIO_Init+0x1e0>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a48      	ldr	r2, [pc, #288]	; (80021b0 <HAL_GPIO_Init+0x2e8>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d007      	beq.n	80020a4 <HAL_GPIO_Init+0x1dc>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a47      	ldr	r2, [pc, #284]	; (80021b4 <HAL_GPIO_Init+0x2ec>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d101      	bne.n	80020a0 <HAL_GPIO_Init+0x1d8>
 800209c:	2302      	movs	r3, #2
 800209e:	e004      	b.n	80020aa <HAL_GPIO_Init+0x1e2>
 80020a0:	2303      	movs	r3, #3
 80020a2:	e002      	b.n	80020aa <HAL_GPIO_Init+0x1e2>
 80020a4:	2301      	movs	r3, #1
 80020a6:	e000      	b.n	80020aa <HAL_GPIO_Init+0x1e2>
 80020a8:	2300      	movs	r3, #0
 80020aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ac:	f002 0203 	and.w	r2, r2, #3
 80020b0:	0092      	lsls	r2, r2, #2
 80020b2:	4093      	lsls	r3, r2
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020ba:	493b      	ldr	r1, [pc, #236]	; (80021a8 <HAL_GPIO_Init+0x2e0>)
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	089b      	lsrs	r3, r3, #2
 80020c0:	3302      	adds	r3, #2
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d006      	beq.n	80020e2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020d4:	4b38      	ldr	r3, [pc, #224]	; (80021b8 <HAL_GPIO_Init+0x2f0>)
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	4937      	ldr	r1, [pc, #220]	; (80021b8 <HAL_GPIO_Init+0x2f0>)
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	4313      	orrs	r3, r2
 80020de:	608b      	str	r3, [r1, #8]
 80020e0:	e006      	b.n	80020f0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020e2:	4b35      	ldr	r3, [pc, #212]	; (80021b8 <HAL_GPIO_Init+0x2f0>)
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	43db      	mvns	r3, r3
 80020ea:	4933      	ldr	r1, [pc, #204]	; (80021b8 <HAL_GPIO_Init+0x2f0>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d006      	beq.n	800210a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020fc:	4b2e      	ldr	r3, [pc, #184]	; (80021b8 <HAL_GPIO_Init+0x2f0>)
 80020fe:	68da      	ldr	r2, [r3, #12]
 8002100:	492d      	ldr	r1, [pc, #180]	; (80021b8 <HAL_GPIO_Init+0x2f0>)
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	4313      	orrs	r3, r2
 8002106:	60cb      	str	r3, [r1, #12]
 8002108:	e006      	b.n	8002118 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800210a:	4b2b      	ldr	r3, [pc, #172]	; (80021b8 <HAL_GPIO_Init+0x2f0>)
 800210c:	68da      	ldr	r2, [r3, #12]
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	43db      	mvns	r3, r3
 8002112:	4929      	ldr	r1, [pc, #164]	; (80021b8 <HAL_GPIO_Init+0x2f0>)
 8002114:	4013      	ands	r3, r2
 8002116:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d006      	beq.n	8002132 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002124:	4b24      	ldr	r3, [pc, #144]	; (80021b8 <HAL_GPIO_Init+0x2f0>)
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	4923      	ldr	r1, [pc, #140]	; (80021b8 <HAL_GPIO_Init+0x2f0>)
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	4313      	orrs	r3, r2
 800212e:	604b      	str	r3, [r1, #4]
 8002130:	e006      	b.n	8002140 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002132:	4b21      	ldr	r3, [pc, #132]	; (80021b8 <HAL_GPIO_Init+0x2f0>)
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	43db      	mvns	r3, r3
 800213a:	491f      	ldr	r1, [pc, #124]	; (80021b8 <HAL_GPIO_Init+0x2f0>)
 800213c:	4013      	ands	r3, r2
 800213e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d006      	beq.n	800215a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800214c:	4b1a      	ldr	r3, [pc, #104]	; (80021b8 <HAL_GPIO_Init+0x2f0>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	4919      	ldr	r1, [pc, #100]	; (80021b8 <HAL_GPIO_Init+0x2f0>)
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	4313      	orrs	r3, r2
 8002156:	600b      	str	r3, [r1, #0]
 8002158:	e006      	b.n	8002168 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800215a:	4b17      	ldr	r3, [pc, #92]	; (80021b8 <HAL_GPIO_Init+0x2f0>)
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	43db      	mvns	r3, r3
 8002162:	4915      	ldr	r1, [pc, #84]	; (80021b8 <HAL_GPIO_Init+0x2f0>)
 8002164:	4013      	ands	r3, r2
 8002166:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	3301      	adds	r3, #1
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	fa22 f303 	lsr.w	r3, r2, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	f47f aeaf 	bne.w	8001edc <HAL_GPIO_Init+0x14>
  }
}
 800217e:	bf00      	nop
 8002180:	bf00      	nop
 8002182:	372c      	adds	r7, #44	; 0x2c
 8002184:	46bd      	mov	sp, r7
 8002186:	bc80      	pop	{r7}
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	10320000 	.word	0x10320000
 8002190:	10310000 	.word	0x10310000
 8002194:	10220000 	.word	0x10220000
 8002198:	10210000 	.word	0x10210000
 800219c:	10120000 	.word	0x10120000
 80021a0:	10110000 	.word	0x10110000
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40010000 	.word	0x40010000
 80021ac:	40010800 	.word	0x40010800
 80021b0:	40010c00 	.word	0x40010c00
 80021b4:	40011000 	.word	0x40011000
 80021b8:	40010400 	.word	0x40010400

080021bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	887b      	ldrh	r3, [r7, #2]
 80021ce:	4013      	ands	r3, r2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d002      	beq.n	80021da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021d4:	2301      	movs	r3, #1
 80021d6:	73fb      	strb	r3, [r7, #15]
 80021d8:	e001      	b.n	80021de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021da:	2300      	movs	r3, #0
 80021dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021de:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr

080021ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	460b      	mov	r3, r1
 80021f4:	807b      	strh	r3, [r7, #2]
 80021f6:	4613      	mov	r3, r2
 80021f8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021fa:	787b      	ldrb	r3, [r7, #1]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d003      	beq.n	8002208 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002200:	887a      	ldrh	r2, [r7, #2]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002206:	e003      	b.n	8002210 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002208:	887b      	ldrh	r3, [r7, #2]
 800220a:	041a      	lsls	r2, r3, #16
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	611a      	str	r2, [r3, #16]
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	bc80      	pop	{r7}
 8002218:	4770      	bx	lr

0800221a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800221a:	b480      	push	{r7}
 800221c:	b085      	sub	sp, #20
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
 8002222:	460b      	mov	r3, r1
 8002224:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800222c:	887a      	ldrh	r2, [r7, #2]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	4013      	ands	r3, r2
 8002232:	041a      	lsls	r2, r3, #16
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	43d9      	mvns	r1, r3
 8002238:	887b      	ldrh	r3, [r7, #2]
 800223a:	400b      	ands	r3, r1
 800223c:	431a      	orrs	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	611a      	str	r2, [r3, #16]
}
 8002242:	bf00      	nop
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr

0800224c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e26c      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 8087 	beq.w	800237a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800226c:	4b92      	ldr	r3, [pc, #584]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 030c 	and.w	r3, r3, #12
 8002274:	2b04      	cmp	r3, #4
 8002276:	d00c      	beq.n	8002292 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002278:	4b8f      	ldr	r3, [pc, #572]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 030c 	and.w	r3, r3, #12
 8002280:	2b08      	cmp	r3, #8
 8002282:	d112      	bne.n	80022aa <HAL_RCC_OscConfig+0x5e>
 8002284:	4b8c      	ldr	r3, [pc, #560]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800228c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002290:	d10b      	bne.n	80022aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002292:	4b89      	ldr	r3, [pc, #548]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d06c      	beq.n	8002378 <HAL_RCC_OscConfig+0x12c>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d168      	bne.n	8002378 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e246      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b2:	d106      	bne.n	80022c2 <HAL_RCC_OscConfig+0x76>
 80022b4:	4b80      	ldr	r3, [pc, #512]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a7f      	ldr	r2, [pc, #508]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80022ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022be:	6013      	str	r3, [r2, #0]
 80022c0:	e02e      	b.n	8002320 <HAL_RCC_OscConfig+0xd4>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10c      	bne.n	80022e4 <HAL_RCC_OscConfig+0x98>
 80022ca:	4b7b      	ldr	r3, [pc, #492]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a7a      	ldr	r2, [pc, #488]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80022d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	4b78      	ldr	r3, [pc, #480]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a77      	ldr	r2, [pc, #476]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	e01d      	b.n	8002320 <HAL_RCC_OscConfig+0xd4>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022ec:	d10c      	bne.n	8002308 <HAL_RCC_OscConfig+0xbc>
 80022ee:	4b72      	ldr	r3, [pc, #456]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a71      	ldr	r2, [pc, #452]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	4b6f      	ldr	r3, [pc, #444]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a6e      	ldr	r2, [pc, #440]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 8002300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002304:	6013      	str	r3, [r2, #0]
 8002306:	e00b      	b.n	8002320 <HAL_RCC_OscConfig+0xd4>
 8002308:	4b6b      	ldr	r3, [pc, #428]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a6a      	ldr	r2, [pc, #424]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 800230e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002312:	6013      	str	r3, [r2, #0]
 8002314:	4b68      	ldr	r3, [pc, #416]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a67      	ldr	r2, [pc, #412]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 800231a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800231e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d013      	beq.n	8002350 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002328:	f7ff fcb6 	bl	8001c98 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002330:	f7ff fcb2 	bl	8001c98 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b64      	cmp	r3, #100	; 0x64
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e1fa      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002342:	4b5d      	ldr	r3, [pc, #372]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d0f0      	beq.n	8002330 <HAL_RCC_OscConfig+0xe4>
 800234e:	e014      	b.n	800237a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002350:	f7ff fca2 	bl	8001c98 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002358:	f7ff fc9e 	bl	8001c98 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b64      	cmp	r3, #100	; 0x64
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e1e6      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800236a:	4b53      	ldr	r3, [pc, #332]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1f0      	bne.n	8002358 <HAL_RCC_OscConfig+0x10c>
 8002376:	e000      	b.n	800237a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002378:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d063      	beq.n	800244e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002386:	4b4c      	ldr	r3, [pc, #304]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f003 030c 	and.w	r3, r3, #12
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00b      	beq.n	80023aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002392:	4b49      	ldr	r3, [pc, #292]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f003 030c 	and.w	r3, r3, #12
 800239a:	2b08      	cmp	r3, #8
 800239c:	d11c      	bne.n	80023d8 <HAL_RCC_OscConfig+0x18c>
 800239e:	4b46      	ldr	r3, [pc, #280]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d116      	bne.n	80023d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023aa:	4b43      	ldr	r3, [pc, #268]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d005      	beq.n	80023c2 <HAL_RCC_OscConfig+0x176>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d001      	beq.n	80023c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e1ba      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c2:	4b3d      	ldr	r3, [pc, #244]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	4939      	ldr	r1, [pc, #228]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023d6:	e03a      	b.n	800244e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d020      	beq.n	8002422 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023e0:	4b36      	ldr	r3, [pc, #216]	; (80024bc <HAL_RCC_OscConfig+0x270>)
 80023e2:	2201      	movs	r2, #1
 80023e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e6:	f7ff fc57 	bl	8001c98 <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ec:	e008      	b.n	8002400 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ee:	f7ff fc53 	bl	8001c98 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e19b      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002400:	4b2d      	ldr	r3, [pc, #180]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d0f0      	beq.n	80023ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800240c:	4b2a      	ldr	r3, [pc, #168]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	4927      	ldr	r1, [pc, #156]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 800241c:	4313      	orrs	r3, r2
 800241e:	600b      	str	r3, [r1, #0]
 8002420:	e015      	b.n	800244e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002422:	4b26      	ldr	r3, [pc, #152]	; (80024bc <HAL_RCC_OscConfig+0x270>)
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002428:	f7ff fc36 	bl	8001c98 <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002430:	f7ff fc32 	bl	8001c98 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e17a      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002442:	4b1d      	ldr	r3, [pc, #116]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1f0      	bne.n	8002430 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0308 	and.w	r3, r3, #8
 8002456:	2b00      	cmp	r3, #0
 8002458:	d03a      	beq.n	80024d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d019      	beq.n	8002496 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002462:	4b17      	ldr	r3, [pc, #92]	; (80024c0 <HAL_RCC_OscConfig+0x274>)
 8002464:	2201      	movs	r2, #1
 8002466:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002468:	f7ff fc16 	bl	8001c98 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002470:	f7ff fc12 	bl	8001c98 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e15a      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002482:	4b0d      	ldr	r3, [pc, #52]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0f0      	beq.n	8002470 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800248e:	2001      	movs	r0, #1
 8002490:	f000 fa9a 	bl	80029c8 <RCC_Delay>
 8002494:	e01c      	b.n	80024d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002496:	4b0a      	ldr	r3, [pc, #40]	; (80024c0 <HAL_RCC_OscConfig+0x274>)
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800249c:	f7ff fbfc 	bl	8001c98 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a2:	e00f      	b.n	80024c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024a4:	f7ff fbf8 	bl	8001c98 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d908      	bls.n	80024c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e140      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
 80024b6:	bf00      	nop
 80024b8:	40021000 	.word	0x40021000
 80024bc:	42420000 	.word	0x42420000
 80024c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024c4:	4b9e      	ldr	r3, [pc, #632]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 80024c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1e9      	bne.n	80024a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 80a6 	beq.w	800262a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024de:	2300      	movs	r3, #0
 80024e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024e2:	4b97      	ldr	r3, [pc, #604]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10d      	bne.n	800250a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ee:	4b94      	ldr	r3, [pc, #592]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	4a93      	ldr	r2, [pc, #588]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 80024f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f8:	61d3      	str	r3, [r2, #28]
 80024fa:	4b91      	ldr	r3, [pc, #580]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002502:	60bb      	str	r3, [r7, #8]
 8002504:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002506:	2301      	movs	r3, #1
 8002508:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800250a:	4b8e      	ldr	r3, [pc, #568]	; (8002744 <HAL_RCC_OscConfig+0x4f8>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002512:	2b00      	cmp	r3, #0
 8002514:	d118      	bne.n	8002548 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002516:	4b8b      	ldr	r3, [pc, #556]	; (8002744 <HAL_RCC_OscConfig+0x4f8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a8a      	ldr	r2, [pc, #552]	; (8002744 <HAL_RCC_OscConfig+0x4f8>)
 800251c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002520:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002522:	f7ff fbb9 	bl	8001c98 <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800252a:	f7ff fbb5 	bl	8001c98 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b64      	cmp	r3, #100	; 0x64
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e0fd      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800253c:	4b81      	ldr	r3, [pc, #516]	; (8002744 <HAL_RCC_OscConfig+0x4f8>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002544:	2b00      	cmp	r3, #0
 8002546:	d0f0      	beq.n	800252a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d106      	bne.n	800255e <HAL_RCC_OscConfig+0x312>
 8002550:	4b7b      	ldr	r3, [pc, #492]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	4a7a      	ldr	r2, [pc, #488]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 8002556:	f043 0301 	orr.w	r3, r3, #1
 800255a:	6213      	str	r3, [r2, #32]
 800255c:	e02d      	b.n	80025ba <HAL_RCC_OscConfig+0x36e>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10c      	bne.n	8002580 <HAL_RCC_OscConfig+0x334>
 8002566:	4b76      	ldr	r3, [pc, #472]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	4a75      	ldr	r2, [pc, #468]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 800256c:	f023 0301 	bic.w	r3, r3, #1
 8002570:	6213      	str	r3, [r2, #32]
 8002572:	4b73      	ldr	r3, [pc, #460]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	4a72      	ldr	r2, [pc, #456]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 8002578:	f023 0304 	bic.w	r3, r3, #4
 800257c:	6213      	str	r3, [r2, #32]
 800257e:	e01c      	b.n	80025ba <HAL_RCC_OscConfig+0x36e>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	2b05      	cmp	r3, #5
 8002586:	d10c      	bne.n	80025a2 <HAL_RCC_OscConfig+0x356>
 8002588:	4b6d      	ldr	r3, [pc, #436]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	4a6c      	ldr	r2, [pc, #432]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 800258e:	f043 0304 	orr.w	r3, r3, #4
 8002592:	6213      	str	r3, [r2, #32]
 8002594:	4b6a      	ldr	r3, [pc, #424]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	4a69      	ldr	r2, [pc, #420]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 800259a:	f043 0301 	orr.w	r3, r3, #1
 800259e:	6213      	str	r3, [r2, #32]
 80025a0:	e00b      	b.n	80025ba <HAL_RCC_OscConfig+0x36e>
 80025a2:	4b67      	ldr	r3, [pc, #412]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	4a66      	ldr	r2, [pc, #408]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 80025a8:	f023 0301 	bic.w	r3, r3, #1
 80025ac:	6213      	str	r3, [r2, #32]
 80025ae:	4b64      	ldr	r3, [pc, #400]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	4a63      	ldr	r2, [pc, #396]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 80025b4:	f023 0304 	bic.w	r3, r3, #4
 80025b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d015      	beq.n	80025ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c2:	f7ff fb69 	bl	8001c98 <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c8:	e00a      	b.n	80025e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ca:	f7ff fb65 	bl	8001c98 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d8:	4293      	cmp	r3, r2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e0ab      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e0:	4b57      	ldr	r3, [pc, #348]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0ee      	beq.n	80025ca <HAL_RCC_OscConfig+0x37e>
 80025ec:	e014      	b.n	8002618 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ee:	f7ff fb53 	bl	8001c98 <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025f4:	e00a      	b.n	800260c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f6:	f7ff fb4f 	bl	8001c98 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	f241 3288 	movw	r2, #5000	; 0x1388
 8002604:	4293      	cmp	r3, r2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e095      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800260c:	4b4c      	ldr	r3, [pc, #304]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1ee      	bne.n	80025f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002618:	7dfb      	ldrb	r3, [r7, #23]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d105      	bne.n	800262a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800261e:	4b48      	ldr	r3, [pc, #288]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	4a47      	ldr	r2, [pc, #284]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 8002624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002628:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 8081 	beq.w	8002736 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002634:	4b42      	ldr	r3, [pc, #264]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f003 030c 	and.w	r3, r3, #12
 800263c:	2b08      	cmp	r3, #8
 800263e:	d061      	beq.n	8002704 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	2b02      	cmp	r3, #2
 8002646:	d146      	bne.n	80026d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002648:	4b3f      	ldr	r3, [pc, #252]	; (8002748 <HAL_RCC_OscConfig+0x4fc>)
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264e:	f7ff fb23 	bl	8001c98 <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002656:	f7ff fb1f 	bl	8001c98 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e067      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002668:	4b35      	ldr	r3, [pc, #212]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1f0      	bne.n	8002656 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800267c:	d108      	bne.n	8002690 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800267e:	4b30      	ldr	r3, [pc, #192]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	492d      	ldr	r1, [pc, #180]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 800268c:	4313      	orrs	r3, r2
 800268e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002690:	4b2b      	ldr	r3, [pc, #172]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a19      	ldr	r1, [r3, #32]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a0:	430b      	orrs	r3, r1
 80026a2:	4927      	ldr	r1, [pc, #156]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026a8:	4b27      	ldr	r3, [pc, #156]	; (8002748 <HAL_RCC_OscConfig+0x4fc>)
 80026aa:	2201      	movs	r2, #1
 80026ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ae:	f7ff faf3 	bl	8001c98 <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026b4:	e008      	b.n	80026c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b6:	f7ff faef 	bl	8001c98 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e037      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026c8:	4b1d      	ldr	r3, [pc, #116]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0f0      	beq.n	80026b6 <HAL_RCC_OscConfig+0x46a>
 80026d4:	e02f      	b.n	8002736 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d6:	4b1c      	ldr	r3, [pc, #112]	; (8002748 <HAL_RCC_OscConfig+0x4fc>)
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026dc:	f7ff fadc 	bl	8001c98 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e4:	f7ff fad8 	bl	8001c98 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e020      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026f6:	4b12      	ldr	r3, [pc, #72]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1f0      	bne.n	80026e4 <HAL_RCC_OscConfig+0x498>
 8002702:	e018      	b.n	8002736 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	69db      	ldr	r3, [r3, #28]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d101      	bne.n	8002710 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e013      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002710:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	429a      	cmp	r2, r3
 8002722:	d106      	bne.n	8002732 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800272e:	429a      	cmp	r2, r3
 8002730:	d001      	beq.n	8002736 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e000      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40021000 	.word	0x40021000
 8002744:	40007000 	.word	0x40007000
 8002748:	42420060 	.word	0x42420060

0800274c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e0d0      	b.n	8002902 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002760:	4b6a      	ldr	r3, [pc, #424]	; (800290c <HAL_RCC_ClockConfig+0x1c0>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	d910      	bls.n	8002790 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276e:	4b67      	ldr	r3, [pc, #412]	; (800290c <HAL_RCC_ClockConfig+0x1c0>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f023 0207 	bic.w	r2, r3, #7
 8002776:	4965      	ldr	r1, [pc, #404]	; (800290c <HAL_RCC_ClockConfig+0x1c0>)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	4313      	orrs	r3, r2
 800277c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800277e:	4b63      	ldr	r3, [pc, #396]	; (800290c <HAL_RCC_ClockConfig+0x1c0>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	429a      	cmp	r2, r3
 800278a:	d001      	beq.n	8002790 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e0b8      	b.n	8002902 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d020      	beq.n	80027de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0304 	and.w	r3, r3, #4
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d005      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027a8:	4b59      	ldr	r3, [pc, #356]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	4a58      	ldr	r2, [pc, #352]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80027ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0308 	and.w	r3, r3, #8
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d005      	beq.n	80027cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027c0:	4b53      	ldr	r3, [pc, #332]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	4a52      	ldr	r2, [pc, #328]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80027c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027cc:	4b50      	ldr	r3, [pc, #320]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	494d      	ldr	r1, [pc, #308]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d040      	beq.n	800286c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d107      	bne.n	8002802 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f2:	4b47      	ldr	r3, [pc, #284]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d115      	bne.n	800282a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e07f      	b.n	8002902 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b02      	cmp	r3, #2
 8002808:	d107      	bne.n	800281a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800280a:	4b41      	ldr	r3, [pc, #260]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d109      	bne.n	800282a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e073      	b.n	8002902 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800281a:	4b3d      	ldr	r3, [pc, #244]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e06b      	b.n	8002902 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800282a:	4b39      	ldr	r3, [pc, #228]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f023 0203 	bic.w	r2, r3, #3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	4936      	ldr	r1, [pc, #216]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 8002838:	4313      	orrs	r3, r2
 800283a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800283c:	f7ff fa2c 	bl	8001c98 <HAL_GetTick>
 8002840:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002842:	e00a      	b.n	800285a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002844:	f7ff fa28 	bl	8001c98 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002852:	4293      	cmp	r3, r2
 8002854:	d901      	bls.n	800285a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e053      	b.n	8002902 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800285a:	4b2d      	ldr	r3, [pc, #180]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f003 020c 	and.w	r2, r3, #12
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	429a      	cmp	r2, r3
 800286a:	d1eb      	bne.n	8002844 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800286c:	4b27      	ldr	r3, [pc, #156]	; (800290c <HAL_RCC_ClockConfig+0x1c0>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	429a      	cmp	r2, r3
 8002878:	d210      	bcs.n	800289c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800287a:	4b24      	ldr	r3, [pc, #144]	; (800290c <HAL_RCC_ClockConfig+0x1c0>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f023 0207 	bic.w	r2, r3, #7
 8002882:	4922      	ldr	r1, [pc, #136]	; (800290c <HAL_RCC_ClockConfig+0x1c0>)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	4313      	orrs	r3, r2
 8002888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800288a:	4b20      	ldr	r3, [pc, #128]	; (800290c <HAL_RCC_ClockConfig+0x1c0>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	429a      	cmp	r2, r3
 8002896:	d001      	beq.n	800289c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e032      	b.n	8002902 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d008      	beq.n	80028ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028a8:	4b19      	ldr	r3, [pc, #100]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	4916      	ldr	r1, [pc, #88]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d009      	beq.n	80028da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028c6:	4b12      	ldr	r3, [pc, #72]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	490e      	ldr	r1, [pc, #56]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028da:	f000 f821 	bl	8002920 <HAL_RCC_GetSysClockFreq>
 80028de:	4602      	mov	r2, r0
 80028e0:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	091b      	lsrs	r3, r3, #4
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	490a      	ldr	r1, [pc, #40]	; (8002914 <HAL_RCC_ClockConfig+0x1c8>)
 80028ec:	5ccb      	ldrb	r3, [r1, r3]
 80028ee:	fa22 f303 	lsr.w	r3, r2, r3
 80028f2:	4a09      	ldr	r2, [pc, #36]	; (8002918 <HAL_RCC_ClockConfig+0x1cc>)
 80028f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028f6:	4b09      	ldr	r3, [pc, #36]	; (800291c <HAL_RCC_ClockConfig+0x1d0>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff f98a 	bl	8001c14 <HAL_InitTick>

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40022000 	.word	0x40022000
 8002910:	40021000 	.word	0x40021000
 8002914:	08003244 	.word	0x08003244
 8002918:	20000048 	.word	0x20000048
 800291c:	2000004c 	.word	0x2000004c

08002920 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002920:	b480      	push	{r7}
 8002922:	b087      	sub	sp, #28
 8002924:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002926:	2300      	movs	r3, #0
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	2300      	movs	r3, #0
 800292c:	60bb      	str	r3, [r7, #8]
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]
 8002932:	2300      	movs	r3, #0
 8002934:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002936:	2300      	movs	r3, #0
 8002938:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800293a:	4b1e      	ldr	r3, [pc, #120]	; (80029b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f003 030c 	and.w	r3, r3, #12
 8002946:	2b04      	cmp	r3, #4
 8002948:	d002      	beq.n	8002950 <HAL_RCC_GetSysClockFreq+0x30>
 800294a:	2b08      	cmp	r3, #8
 800294c:	d003      	beq.n	8002956 <HAL_RCC_GetSysClockFreq+0x36>
 800294e:	e027      	b.n	80029a0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002950:	4b19      	ldr	r3, [pc, #100]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002952:	613b      	str	r3, [r7, #16]
      break;
 8002954:	e027      	b.n	80029a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	0c9b      	lsrs	r3, r3, #18
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	4a17      	ldr	r2, [pc, #92]	; (80029bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002960:	5cd3      	ldrb	r3, [r2, r3]
 8002962:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d010      	beq.n	8002990 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800296e:	4b11      	ldr	r3, [pc, #68]	; (80029b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	0c5b      	lsrs	r3, r3, #17
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	4a11      	ldr	r2, [pc, #68]	; (80029c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800297a:	5cd3      	ldrb	r3, [r2, r3]
 800297c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a0d      	ldr	r2, [pc, #52]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002982:	fb02 f203 	mul.w	r2, r2, r3
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	fbb2 f3f3 	udiv	r3, r2, r3
 800298c:	617b      	str	r3, [r7, #20]
 800298e:	e004      	b.n	800299a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a0c      	ldr	r2, [pc, #48]	; (80029c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002994:	fb02 f303 	mul.w	r3, r2, r3
 8002998:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	613b      	str	r3, [r7, #16]
      break;
 800299e:	e002      	b.n	80029a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029a0:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80029a2:	613b      	str	r3, [r7, #16]
      break;
 80029a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029a6:	693b      	ldr	r3, [r7, #16]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	371c      	adds	r7, #28
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	40021000 	.word	0x40021000
 80029b8:	007a1200 	.word	0x007a1200
 80029bc:	08003254 	.word	0x08003254
 80029c0:	08003264 	.word	0x08003264
 80029c4:	003d0900 	.word	0x003d0900

080029c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029d0:	4b0a      	ldr	r3, [pc, #40]	; (80029fc <RCC_Delay+0x34>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a0a      	ldr	r2, [pc, #40]	; (8002a00 <RCC_Delay+0x38>)
 80029d6:	fba2 2303 	umull	r2, r3, r2, r3
 80029da:	0a5b      	lsrs	r3, r3, #9
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	fb02 f303 	mul.w	r3, r2, r3
 80029e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029e4:	bf00      	nop
  }
  while (Delay --);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	1e5a      	subs	r2, r3, #1
 80029ea:	60fa      	str	r2, [r7, #12]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1f9      	bne.n	80029e4 <RCC_Delay+0x1c>
}
 80029f0:	bf00      	nop
 80029f2:	bf00      	nop
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr
 80029fc:	20000048 	.word	0x20000048
 8002a00:	10624dd3 	.word	0x10624dd3

08002a04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e041      	b.n	8002a9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d106      	bne.n	8002a30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7fe fff6 	bl	8001a1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2202      	movs	r2, #2
 8002a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3304      	adds	r3, #4
 8002a40:	4619      	mov	r1, r3
 8002a42:	4610      	mov	r0, r2
 8002a44:	f000 fa6e 	bl	8002f24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
	...

08002aa4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d001      	beq.n	8002abc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e035      	b.n	8002b28 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2202      	movs	r2, #2
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68da      	ldr	r2, [r3, #12]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f042 0201 	orr.w	r2, r2, #1
 8002ad2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a16      	ldr	r2, [pc, #88]	; (8002b34 <HAL_TIM_Base_Start_IT+0x90>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d009      	beq.n	8002af2 <HAL_TIM_Base_Start_IT+0x4e>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae6:	d004      	beq.n	8002af2 <HAL_TIM_Base_Start_IT+0x4e>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a12      	ldr	r2, [pc, #72]	; (8002b38 <HAL_TIM_Base_Start_IT+0x94>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d111      	bne.n	8002b16 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2b06      	cmp	r3, #6
 8002b02:	d010      	beq.n	8002b26 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 0201 	orr.w	r2, r2, #1
 8002b12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b14:	e007      	b.n	8002b26 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f042 0201 	orr.w	r2, r2, #1
 8002b24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bc80      	pop	{r7}
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	40012c00 	.word	0x40012c00
 8002b38:	40000400 	.word	0x40000400

08002b3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d122      	bne.n	8002b98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d11b      	bne.n	8002b98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f06f 0202 	mvn.w	r2, #2
 8002b68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f9b4 	bl	8002eec <HAL_TIM_IC_CaptureCallback>
 8002b84:	e005      	b.n	8002b92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f9a7 	bl	8002eda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f9b6 	bl	8002efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	f003 0304 	and.w	r3, r3, #4
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	d122      	bne.n	8002bec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b04      	cmp	r3, #4
 8002bb2:	d11b      	bne.n	8002bec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f06f 0204 	mvn.w	r2, #4
 8002bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f98a 	bl	8002eec <HAL_TIM_IC_CaptureCallback>
 8002bd8:	e005      	b.n	8002be6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f97d 	bl	8002eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f98c 	bl	8002efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	2b08      	cmp	r3, #8
 8002bf8:	d122      	bne.n	8002c40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	f003 0308 	and.w	r3, r3, #8
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d11b      	bne.n	8002c40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f06f 0208 	mvn.w	r2, #8
 8002c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2204      	movs	r2, #4
 8002c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f960 	bl	8002eec <HAL_TIM_IC_CaptureCallback>
 8002c2c:	e005      	b.n	8002c3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f953 	bl	8002eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 f962 	bl	8002efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	f003 0310 	and.w	r3, r3, #16
 8002c4a:	2b10      	cmp	r3, #16
 8002c4c:	d122      	bne.n	8002c94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f003 0310 	and.w	r3, r3, #16
 8002c58:	2b10      	cmp	r3, #16
 8002c5a:	d11b      	bne.n	8002c94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f06f 0210 	mvn.w	r2, #16
 8002c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2208      	movs	r2, #8
 8002c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f936 	bl	8002eec <HAL_TIM_IC_CaptureCallback>
 8002c80:	e005      	b.n	8002c8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f929 	bl	8002eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 f938 	bl	8002efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d10e      	bne.n	8002cc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d107      	bne.n	8002cc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f06f 0201 	mvn.w	r2, #1
 8002cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7fe ff4c 	bl	8001b58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cca:	2b80      	cmp	r3, #128	; 0x80
 8002ccc:	d10e      	bne.n	8002cec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd8:	2b80      	cmp	r3, #128	; 0x80
 8002cda:	d107      	bne.n	8002cec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 fa6b 	bl	80031c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf6:	2b40      	cmp	r3, #64	; 0x40
 8002cf8:	d10e      	bne.n	8002d18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d04:	2b40      	cmp	r3, #64	; 0x40
 8002d06:	d107      	bne.n	8002d18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 f8fc 	bl	8002f10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	f003 0320 	and.w	r3, r3, #32
 8002d22:	2b20      	cmp	r3, #32
 8002d24:	d10e      	bne.n	8002d44 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	f003 0320 	and.w	r3, r3, #32
 8002d30:	2b20      	cmp	r3, #32
 8002d32:	d107      	bne.n	8002d44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f06f 0220 	mvn.w	r2, #32
 8002d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 fa36 	bl	80031b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d44:	bf00      	nop
 8002d46:	3708      	adds	r7, #8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d56:	2300      	movs	r3, #0
 8002d58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d101      	bne.n	8002d68 <HAL_TIM_ConfigClockSource+0x1c>
 8002d64:	2302      	movs	r3, #2
 8002d66:	e0b4      	b.n	8002ed2 <HAL_TIM_ConfigClockSource+0x186>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2202      	movs	r2, #2
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68ba      	ldr	r2, [r7, #8]
 8002d96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002da0:	d03e      	beq.n	8002e20 <HAL_TIM_ConfigClockSource+0xd4>
 8002da2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002da6:	f200 8087 	bhi.w	8002eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002daa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dae:	f000 8086 	beq.w	8002ebe <HAL_TIM_ConfigClockSource+0x172>
 8002db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002db6:	d87f      	bhi.n	8002eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002db8:	2b70      	cmp	r3, #112	; 0x70
 8002dba:	d01a      	beq.n	8002df2 <HAL_TIM_ConfigClockSource+0xa6>
 8002dbc:	2b70      	cmp	r3, #112	; 0x70
 8002dbe:	d87b      	bhi.n	8002eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002dc0:	2b60      	cmp	r3, #96	; 0x60
 8002dc2:	d050      	beq.n	8002e66 <HAL_TIM_ConfigClockSource+0x11a>
 8002dc4:	2b60      	cmp	r3, #96	; 0x60
 8002dc6:	d877      	bhi.n	8002eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002dc8:	2b50      	cmp	r3, #80	; 0x50
 8002dca:	d03c      	beq.n	8002e46 <HAL_TIM_ConfigClockSource+0xfa>
 8002dcc:	2b50      	cmp	r3, #80	; 0x50
 8002dce:	d873      	bhi.n	8002eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002dd0:	2b40      	cmp	r3, #64	; 0x40
 8002dd2:	d058      	beq.n	8002e86 <HAL_TIM_ConfigClockSource+0x13a>
 8002dd4:	2b40      	cmp	r3, #64	; 0x40
 8002dd6:	d86f      	bhi.n	8002eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002dd8:	2b30      	cmp	r3, #48	; 0x30
 8002dda:	d064      	beq.n	8002ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8002ddc:	2b30      	cmp	r3, #48	; 0x30
 8002dde:	d86b      	bhi.n	8002eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002de0:	2b20      	cmp	r3, #32
 8002de2:	d060      	beq.n	8002ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8002de4:	2b20      	cmp	r3, #32
 8002de6:	d867      	bhi.n	8002eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d05c      	beq.n	8002ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8002dec:	2b10      	cmp	r3, #16
 8002dee:	d05a      	beq.n	8002ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8002df0:	e062      	b.n	8002eb8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6818      	ldr	r0, [r3, #0]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	6899      	ldr	r1, [r3, #8]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	f000 f95e 	bl	80030c2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68ba      	ldr	r2, [r7, #8]
 8002e1c:	609a      	str	r2, [r3, #8]
      break;
 8002e1e:	e04f      	b.n	8002ec0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6818      	ldr	r0, [r3, #0]
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	6899      	ldr	r1, [r3, #8]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	f000 f947 	bl	80030c2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689a      	ldr	r2, [r3, #8]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e42:	609a      	str	r2, [r3, #8]
      break;
 8002e44:	e03c      	b.n	8002ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6818      	ldr	r0, [r3, #0]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	6859      	ldr	r1, [r3, #4]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	461a      	mov	r2, r3
 8002e54:	f000 f8be 	bl	8002fd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2150      	movs	r1, #80	; 0x50
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 f915 	bl	800308e <TIM_ITRx_SetConfig>
      break;
 8002e64:	e02c      	b.n	8002ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6818      	ldr	r0, [r3, #0]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	6859      	ldr	r1, [r3, #4]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	461a      	mov	r2, r3
 8002e74:	f000 f8dc 	bl	8003030 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2160      	movs	r1, #96	; 0x60
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 f905 	bl	800308e <TIM_ITRx_SetConfig>
      break;
 8002e84:	e01c      	b.n	8002ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6818      	ldr	r0, [r3, #0]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	6859      	ldr	r1, [r3, #4]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	461a      	mov	r2, r3
 8002e94:	f000 f89e 	bl	8002fd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2140      	movs	r1, #64	; 0x40
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 f8f5 	bl	800308e <TIM_ITRx_SetConfig>
      break;
 8002ea4:	e00c      	b.n	8002ec0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4619      	mov	r1, r3
 8002eb0:	4610      	mov	r0, r2
 8002eb2:	f000 f8ec 	bl	800308e <TIM_ITRx_SetConfig>
      break;
 8002eb6:	e003      	b.n	8002ec0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	73fb      	strb	r3, [r7, #15]
      break;
 8002ebc:	e000      	b.n	8002ec0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ebe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr

08002eec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bc80      	pop	{r7}
 8002efc:	4770      	bx	lr

08002efe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b083      	sub	sp, #12
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr

08002f10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bc80      	pop	{r7}
 8002f20:	4770      	bx	lr
	...

08002f24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a25      	ldr	r2, [pc, #148]	; (8002fcc <TIM_Base_SetConfig+0xa8>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d007      	beq.n	8002f4c <TIM_Base_SetConfig+0x28>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f42:	d003      	beq.n	8002f4c <TIM_Base_SetConfig+0x28>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a22      	ldr	r2, [pc, #136]	; (8002fd0 <TIM_Base_SetConfig+0xac>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d108      	bne.n	8002f5e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a1a      	ldr	r2, [pc, #104]	; (8002fcc <TIM_Base_SetConfig+0xa8>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d007      	beq.n	8002f76 <TIM_Base_SetConfig+0x52>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f6c:	d003      	beq.n	8002f76 <TIM_Base_SetConfig+0x52>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a17      	ldr	r2, [pc, #92]	; (8002fd0 <TIM_Base_SetConfig+0xac>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d108      	bne.n	8002f88 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a07      	ldr	r2, [pc, #28]	; (8002fcc <TIM_Base_SetConfig+0xa8>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d103      	bne.n	8002fbc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	691a      	ldr	r2, [r3, #16]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	615a      	str	r2, [r3, #20]
}
 8002fc2:	bf00      	nop
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc80      	pop	{r7}
 8002fca:	4770      	bx	lr
 8002fcc:	40012c00 	.word	0x40012c00
 8002fd0:	40000400 	.word	0x40000400

08002fd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b087      	sub	sp, #28
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	f023 0201 	bic.w	r2, r3, #1
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ffe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	011b      	lsls	r3, r3, #4
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	4313      	orrs	r3, r2
 8003008:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f023 030a 	bic.w	r3, r3, #10
 8003010:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	4313      	orrs	r3, r2
 8003018:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	621a      	str	r2, [r3, #32]
}
 8003026:	bf00      	nop
 8003028:	371c      	adds	r7, #28
 800302a:	46bd      	mov	sp, r7
 800302c:	bc80      	pop	{r7}
 800302e:	4770      	bx	lr

08003030 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003030:	b480      	push	{r7}
 8003032:	b087      	sub	sp, #28
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	f023 0210 	bic.w	r2, r3, #16
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800305a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	031b      	lsls	r3, r3, #12
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	4313      	orrs	r3, r2
 8003064:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800306c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	4313      	orrs	r3, r2
 8003076:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	621a      	str	r2, [r3, #32]
}
 8003084:	bf00      	nop
 8003086:	371c      	adds	r7, #28
 8003088:	46bd      	mov	sp, r7
 800308a:	bc80      	pop	{r7}
 800308c:	4770      	bx	lr

0800308e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800308e:	b480      	push	{r7}
 8003090:	b085      	sub	sp, #20
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
 8003096:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	f043 0307 	orr.w	r3, r3, #7
 80030b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	609a      	str	r2, [r3, #8]
}
 80030b8:	bf00      	nop
 80030ba:	3714      	adds	r7, #20
 80030bc:	46bd      	mov	sp, r7
 80030be:	bc80      	pop	{r7}
 80030c0:	4770      	bx	lr

080030c2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b087      	sub	sp, #28
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	60f8      	str	r0, [r7, #12]
 80030ca:	60b9      	str	r1, [r7, #8]
 80030cc:	607a      	str	r2, [r7, #4]
 80030ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030dc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	021a      	lsls	r2, r3, #8
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	431a      	orrs	r2, r3
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	609a      	str	r2, [r3, #8]
}
 80030f6:	bf00      	nop
 80030f8:	371c      	adds	r7, #28
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bc80      	pop	{r7}
 80030fe:	4770      	bx	lr

08003100 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003110:	2b01      	cmp	r3, #1
 8003112:	d101      	bne.n	8003118 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003114:	2302      	movs	r3, #2
 8003116:	e041      	b.n	800319c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2202      	movs	r2, #2
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800313e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	4313      	orrs	r3, r2
 8003148:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a14      	ldr	r2, [pc, #80]	; (80031a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d009      	beq.n	8003170 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003164:	d004      	beq.n	8003170 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a10      	ldr	r2, [pc, #64]	; (80031ac <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d10c      	bne.n	800318a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003176:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	68ba      	ldr	r2, [r7, #8]
 800317e:	4313      	orrs	r3, r2
 8003180:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3714      	adds	r7, #20
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bc80      	pop	{r7}
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	40012c00 	.word	0x40012c00
 80031ac:	40000400 	.word	0x40000400

080031b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	bc80      	pop	{r7}
 80031c0:	4770      	bx	lr

080031c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b083      	sub	sp, #12
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc80      	pop	{r7}
 80031d2:	4770      	bx	lr

080031d4 <__libc_init_array>:
 80031d4:	b570      	push	{r4, r5, r6, lr}
 80031d6:	2600      	movs	r6, #0
 80031d8:	4d0c      	ldr	r5, [pc, #48]	; (800320c <__libc_init_array+0x38>)
 80031da:	4c0d      	ldr	r4, [pc, #52]	; (8003210 <__libc_init_array+0x3c>)
 80031dc:	1b64      	subs	r4, r4, r5
 80031de:	10a4      	asrs	r4, r4, #2
 80031e0:	42a6      	cmp	r6, r4
 80031e2:	d109      	bne.n	80031f8 <__libc_init_array+0x24>
 80031e4:	f000 f822 	bl	800322c <_init>
 80031e8:	2600      	movs	r6, #0
 80031ea:	4d0a      	ldr	r5, [pc, #40]	; (8003214 <__libc_init_array+0x40>)
 80031ec:	4c0a      	ldr	r4, [pc, #40]	; (8003218 <__libc_init_array+0x44>)
 80031ee:	1b64      	subs	r4, r4, r5
 80031f0:	10a4      	asrs	r4, r4, #2
 80031f2:	42a6      	cmp	r6, r4
 80031f4:	d105      	bne.n	8003202 <__libc_init_array+0x2e>
 80031f6:	bd70      	pop	{r4, r5, r6, pc}
 80031f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80031fc:	4798      	blx	r3
 80031fe:	3601      	adds	r6, #1
 8003200:	e7ee      	b.n	80031e0 <__libc_init_array+0xc>
 8003202:	f855 3b04 	ldr.w	r3, [r5], #4
 8003206:	4798      	blx	r3
 8003208:	3601      	adds	r6, #1
 800320a:	e7f2      	b.n	80031f2 <__libc_init_array+0x1e>
 800320c:	08003268 	.word	0x08003268
 8003210:	08003268 	.word	0x08003268
 8003214:	08003268 	.word	0x08003268
 8003218:	0800326c 	.word	0x0800326c

0800321c <memset>:
 800321c:	4603      	mov	r3, r0
 800321e:	4402      	add	r2, r0
 8003220:	4293      	cmp	r3, r2
 8003222:	d100      	bne.n	8003226 <memset+0xa>
 8003224:	4770      	bx	lr
 8003226:	f803 1b01 	strb.w	r1, [r3], #1
 800322a:	e7f9      	b.n	8003220 <memset+0x4>

0800322c <_init>:
 800322c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800322e:	bf00      	nop
 8003230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003232:	bc08      	pop	{r3}
 8003234:	469e      	mov	lr, r3
 8003236:	4770      	bx	lr

08003238 <_fini>:
 8003238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800323a:	bf00      	nop
 800323c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800323e:	bc08      	pop	{r3}
 8003240:	469e      	mov	lr, r3
 8003242:	4770      	bx	lr
