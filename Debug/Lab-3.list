
Lab-3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ce8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002df4  08002df4  00012df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e18  08002e18  00020054  2**0
                  CONTENTS
  4 .ARM          00000000  08002e18  08002e18  00020054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e18  08002e18  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e18  08002e18  00012e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e1c  08002e1c  00012e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08002e20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  20000054  08002e74  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08002e74  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009593  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001961  00000000  00000000  00029610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e0  00000000  00000000  0002af78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000908  00000000  00000000  0002b958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016905  00000000  00000000  0002c260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b131  00000000  00000000  00042b65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000824f9  00000000  00000000  0004dc96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d018f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027b8  00000000  00000000  000d01e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000054 	.word	0x20000054
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ddc 	.word	0x08002ddc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000058 	.word	0x20000058
 8000148:	08002ddc 	.word	0x08002ddc

0800014c <is_BUTTON_MODE_pressed>:
 	 	   current_BUTTON_SAVE 		= RELEASED_STATE,
		   pre_stable_BUTTON_SAVE 	= RELEASED_STATE,
		   BUTTON_SAVE_flag = 0;		   

static bool is_BUTTON_MODE_pressed(void)
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if (BUTTON_MODE_flag == 1)
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <is_BUTTON_MODE_pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <is_BUTTON_MODE_pressed+0x16>
	{
		BUTTON_MODE_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <is_BUTTON_MODE_pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return true;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <is_BUTTON_MODE_pressed+0x18>
	}
	else return false;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000070 	.word	0x20000070

08000170 <is_BUTTON_MODIFY_pressed>:

static bool is_BUTTON_MODIFY_pressed(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if (BUTTON_MODIFY_flag == 1)
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <is_BUTTON_MODIFY_pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <is_BUTTON_MODIFY_pressed+0x16>
	{
		BUTTON_MODIFY_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <is_BUTTON_MODIFY_pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return true;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <is_BUTTON_MODIFY_pressed+0x18>
	}
	else return false;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000074 	.word	0x20000074

08000194 <is_BUTTON_SAVE_pressed>:

static bool is_BUTTON_SAVE_pressed(void)
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if (BUTTON_SAVE_flag == 1)
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <is_BUTTON_SAVE_pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <is_BUTTON_SAVE_pressed+0x16>
	{
		BUTTON_SAVE_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <is_BUTTON_SAVE_pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return true;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <is_BUTTON_SAVE_pressed+0x18>
	}
	else return false;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	20000078 	.word	0x20000078

080001b8 <get_BUTTONs>:

extern void get_BUTTONs(void) //được gọi mỗi 10ms
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	BUTTON_MODE_Reg[0] = BUTTON_MODE_Reg[1];
 80001bc:	4b45      	ldr	r3, [pc, #276]	; (80002d4 <get_BUTTONs+0x11c>)
 80001be:	685b      	ldr	r3, [r3, #4]
 80001c0:	4a44      	ldr	r2, [pc, #272]	; (80002d4 <get_BUTTONs+0x11c>)
 80001c2:	6013      	str	r3, [r2, #0]
	BUTTON_MODE_Reg[1] = current_BUTTON_MODE;
 80001c4:	4b44      	ldr	r3, [pc, #272]	; (80002d8 <get_BUTTONs+0x120>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	4a42      	ldr	r2, [pc, #264]	; (80002d4 <get_BUTTONs+0x11c>)
 80001ca:	6053      	str	r3, [r2, #4]
	current_BUTTON_MODE = HAL_GPIO_ReadPin(BUTTON_MODE_GPIO_Port, BUTTON_MODE_Pin);
 80001cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001d0:	4842      	ldr	r0, [pc, #264]	; (80002dc <get_BUTTONs+0x124>)
 80001d2:	f001 fdcb 	bl	8001d6c <HAL_GPIO_ReadPin>
 80001d6:	4603      	mov	r3, r0
 80001d8:	461a      	mov	r2, r3
 80001da:	4b3f      	ldr	r3, [pc, #252]	; (80002d8 <get_BUTTONs+0x120>)
 80001dc:	601a      	str	r2, [r3, #0]

	if ((BUTTON_MODE_Reg[0] == BUTTON_MODE_Reg[1]) && (BUTTON_MODE_Reg[1] == current_BUTTON_MODE)) //khi phím nhấn ổn định
 80001de:	4b3d      	ldr	r3, [pc, #244]	; (80002d4 <get_BUTTONs+0x11c>)
 80001e0:	681a      	ldr	r2, [r3, #0]
 80001e2:	4b3c      	ldr	r3, [pc, #240]	; (80002d4 <get_BUTTONs+0x11c>)
 80001e4:	685b      	ldr	r3, [r3, #4]
 80001e6:	429a      	cmp	r2, r3
 80001e8:	d116      	bne.n	8000218 <get_BUTTONs+0x60>
 80001ea:	4b3a      	ldr	r3, [pc, #232]	; (80002d4 <get_BUTTONs+0x11c>)
 80001ec:	685a      	ldr	r2, [r3, #4]
 80001ee:	4b3a      	ldr	r3, [pc, #232]	; (80002d8 <get_BUTTONs+0x120>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	429a      	cmp	r2, r3
 80001f4:	d110      	bne.n	8000218 <get_BUTTONs+0x60>
	{
		if (pre_stable_BUTTON_MODE != current_BUTTON_MODE) //trường hợp nhấn THẢ, hoặc là lần nhấn đầu tiên
 80001f6:	4b3a      	ldr	r3, [pc, #232]	; (80002e0 <get_BUTTONs+0x128>)
 80001f8:	681a      	ldr	r2, [r3, #0]
 80001fa:	4b37      	ldr	r3, [pc, #220]	; (80002d8 <get_BUTTONs+0x120>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	429a      	cmp	r2, r3
 8000200:	d00a      	beq.n	8000218 <get_BUTTONs+0x60>
		{
			pre_stable_BUTTON_MODE = current_BUTTON_MODE;
 8000202:	4b35      	ldr	r3, [pc, #212]	; (80002d8 <get_BUTTONs+0x120>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a36      	ldr	r2, [pc, #216]	; (80002e0 <get_BUTTONs+0x128>)
 8000208:	6013      	str	r3, [r2, #0]
			if (current_BUTTON_MODE == PRESSED_STATE)
 800020a:	4b33      	ldr	r3, [pc, #204]	; (80002d8 <get_BUTTONs+0x120>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	2b00      	cmp	r3, #0
 8000210:	d102      	bne.n	8000218 <get_BUTTONs+0x60>
			{
				//TO DO: set the flag
				BUTTON_MODE_flag = 1;
 8000212:	4b34      	ldr	r3, [pc, #208]	; (80002e4 <get_BUTTONs+0x12c>)
 8000214:	2201      	movs	r2, #1
 8000216:	601a      	str	r2, [r3, #0]
			}
		}
		*/
	}

	BUTTON_MODIFY_Reg[0] = BUTTON_MODIFY_Reg[1];
 8000218:	4b33      	ldr	r3, [pc, #204]	; (80002e8 <get_BUTTONs+0x130>)
 800021a:	685b      	ldr	r3, [r3, #4]
 800021c:	4a32      	ldr	r2, [pc, #200]	; (80002e8 <get_BUTTONs+0x130>)
 800021e:	6013      	str	r3, [r2, #0]
	BUTTON_MODIFY_Reg[1] = current_BUTTON_MODIFY;
 8000220:	4b32      	ldr	r3, [pc, #200]	; (80002ec <get_BUTTONs+0x134>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a30      	ldr	r2, [pc, #192]	; (80002e8 <get_BUTTONs+0x130>)
 8000226:	6053      	str	r3, [r2, #4]
	current_BUTTON_MODIFY = HAL_GPIO_ReadPin(BUTTON_MODIFY_GPIO_Port, BUTTON_MODIFY_Pin);
 8000228:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800022c:	482b      	ldr	r0, [pc, #172]	; (80002dc <get_BUTTONs+0x124>)
 800022e:	f001 fd9d 	bl	8001d6c <HAL_GPIO_ReadPin>
 8000232:	4603      	mov	r3, r0
 8000234:	461a      	mov	r2, r3
 8000236:	4b2d      	ldr	r3, [pc, #180]	; (80002ec <get_BUTTONs+0x134>)
 8000238:	601a      	str	r2, [r3, #0]

	if ((BUTTON_MODIFY_Reg[0] == BUTTON_MODIFY_Reg[1]) && (BUTTON_MODIFY_Reg[1] == current_BUTTON_MODIFY)) //khi phím nhấn ổn định
 800023a:	4b2b      	ldr	r3, [pc, #172]	; (80002e8 <get_BUTTONs+0x130>)
 800023c:	681a      	ldr	r2, [r3, #0]
 800023e:	4b2a      	ldr	r3, [pc, #168]	; (80002e8 <get_BUTTONs+0x130>)
 8000240:	685b      	ldr	r3, [r3, #4]
 8000242:	429a      	cmp	r2, r3
 8000244:	d116      	bne.n	8000274 <get_BUTTONs+0xbc>
 8000246:	4b28      	ldr	r3, [pc, #160]	; (80002e8 <get_BUTTONs+0x130>)
 8000248:	685a      	ldr	r2, [r3, #4]
 800024a:	4b28      	ldr	r3, [pc, #160]	; (80002ec <get_BUTTONs+0x134>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	429a      	cmp	r2, r3
 8000250:	d110      	bne.n	8000274 <get_BUTTONs+0xbc>
	{
		if (pre_stable_BUTTON_MODIFY != current_BUTTON_MODIFY) //trường hợp nhấn THẢ, hoặc là lần nhấn đầu tiên
 8000252:	4b27      	ldr	r3, [pc, #156]	; (80002f0 <get_BUTTONs+0x138>)
 8000254:	681a      	ldr	r2, [r3, #0]
 8000256:	4b25      	ldr	r3, [pc, #148]	; (80002ec <get_BUTTONs+0x134>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	429a      	cmp	r2, r3
 800025c:	d00a      	beq.n	8000274 <get_BUTTONs+0xbc>
		{
			pre_stable_BUTTON_MODIFY = current_BUTTON_MODIFY;
 800025e:	4b23      	ldr	r3, [pc, #140]	; (80002ec <get_BUTTONs+0x134>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4a23      	ldr	r2, [pc, #140]	; (80002f0 <get_BUTTONs+0x138>)
 8000264:	6013      	str	r3, [r2, #0]
			if (current_BUTTON_MODIFY == PRESSED_STATE)
 8000266:	4b21      	ldr	r3, [pc, #132]	; (80002ec <get_BUTTONs+0x134>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	2b00      	cmp	r3, #0
 800026c:	d102      	bne.n	8000274 <get_BUTTONs+0xbc>
			{
				//TO DO: set the flag
				BUTTON_MODIFY_flag = 1;
 800026e:	4b21      	ldr	r3, [pc, #132]	; (80002f4 <get_BUTTONs+0x13c>)
 8000270:	2201      	movs	r2, #1
 8000272:	601a      	str	r2, [r3, #0]
			}
		}
	}

	BUTTON_SAVE_Reg[0] = BUTTON_SAVE_Reg[1];
 8000274:	4b20      	ldr	r3, [pc, #128]	; (80002f8 <get_BUTTONs+0x140>)
 8000276:	685b      	ldr	r3, [r3, #4]
 8000278:	4a1f      	ldr	r2, [pc, #124]	; (80002f8 <get_BUTTONs+0x140>)
 800027a:	6013      	str	r3, [r2, #0]
	BUTTON_SAVE_Reg[1] = current_BUTTON_SAVE;
 800027c:	4b1f      	ldr	r3, [pc, #124]	; (80002fc <get_BUTTONs+0x144>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a1d      	ldr	r2, [pc, #116]	; (80002f8 <get_BUTTONs+0x140>)
 8000282:	6053      	str	r3, [r2, #4]
	current_BUTTON_SAVE = HAL_GPIO_ReadPin(BUTTON_SAVE_GPIO_Port, BUTTON_SAVE_Pin);
 8000284:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000288:	4814      	ldr	r0, [pc, #80]	; (80002dc <get_BUTTONs+0x124>)
 800028a:	f001 fd6f 	bl	8001d6c <HAL_GPIO_ReadPin>
 800028e:	4603      	mov	r3, r0
 8000290:	461a      	mov	r2, r3
 8000292:	4b1a      	ldr	r3, [pc, #104]	; (80002fc <get_BUTTONs+0x144>)
 8000294:	601a      	str	r2, [r3, #0]

	if ((BUTTON_SAVE_Reg[0] == BUTTON_SAVE_Reg[1]) && (BUTTON_SAVE_Reg[1] == current_BUTTON_SAVE)) //khi phím nhấn ổn định
 8000296:	4b18      	ldr	r3, [pc, #96]	; (80002f8 <get_BUTTONs+0x140>)
 8000298:	681a      	ldr	r2, [r3, #0]
 800029a:	4b17      	ldr	r3, [pc, #92]	; (80002f8 <get_BUTTONs+0x140>)
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	429a      	cmp	r2, r3
 80002a0:	d116      	bne.n	80002d0 <get_BUTTONs+0x118>
 80002a2:	4b15      	ldr	r3, [pc, #84]	; (80002f8 <get_BUTTONs+0x140>)
 80002a4:	685a      	ldr	r2, [r3, #4]
 80002a6:	4b15      	ldr	r3, [pc, #84]	; (80002fc <get_BUTTONs+0x144>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	429a      	cmp	r2, r3
 80002ac:	d110      	bne.n	80002d0 <get_BUTTONs+0x118>
	{
		if (pre_stable_BUTTON_SAVE != current_BUTTON_SAVE) //trường hợp nhấn THẢ, hoặc là lần nhấn đầu tiên
 80002ae:	4b14      	ldr	r3, [pc, #80]	; (8000300 <get_BUTTONs+0x148>)
 80002b0:	681a      	ldr	r2, [r3, #0]
 80002b2:	4b12      	ldr	r3, [pc, #72]	; (80002fc <get_BUTTONs+0x144>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	429a      	cmp	r2, r3
 80002b8:	d00a      	beq.n	80002d0 <get_BUTTONs+0x118>
		{
			pre_stable_BUTTON_SAVE = current_BUTTON_SAVE;
 80002ba:	4b10      	ldr	r3, [pc, #64]	; (80002fc <get_BUTTONs+0x144>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	4a10      	ldr	r2, [pc, #64]	; (8000300 <get_BUTTONs+0x148>)
 80002c0:	6013      	str	r3, [r2, #0]
			if (current_BUTTON_SAVE == PRESSED_STATE)
 80002c2:	4b0e      	ldr	r3, [pc, #56]	; (80002fc <get_BUTTONs+0x144>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d102      	bne.n	80002d0 <get_BUTTONs+0x118>
			{
				//TO DO: set the flag
				BUTTON_SAVE_flag = 1;
 80002ca:	4b0e      	ldr	r3, [pc, #56]	; (8000304 <get_BUTTONs+0x14c>)
 80002cc:	2201      	movs	r2, #1
 80002ce:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 80002d0:	bf00      	nop
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	20000000 	.word	0x20000000
 80002d8:	20000008 	.word	0x20000008
 80002dc:	40010800 	.word	0x40010800
 80002e0:	2000000c 	.word	0x2000000c
 80002e4:	20000070 	.word	0x20000070
 80002e8:	20000010 	.word	0x20000010
 80002ec:	20000018 	.word	0x20000018
 80002f0:	2000001c 	.word	0x2000001c
 80002f4:	20000074 	.word	0x20000074
 80002f8:	20000020 	.word	0x20000020
 80002fc:	20000028 	.word	0x20000028
 8000300:	2000002c 	.word	0x2000002c
 8000304:	20000078 	.word	0x20000078

08000308 <fsm_input_processing>:

static int counter_buffer;

extern void fsm_input_processing(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	switch (current_MODE_status)
 800030c:	4ba6      	ldr	r3, [pc, #664]	; (80005a8 <fsm_input_processing+0x2a0>)
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	2b03      	cmp	r3, #3
 8000312:	f200 813d 	bhi.w	8000590 <fsm_input_processing+0x288>
 8000316:	a201      	add	r2, pc, #4	; (adr r2, 800031c <fsm_input_processing+0x14>)
 8000318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800031c:	0800032d 	.word	0x0800032d
 8000320:	08000377 	.word	0x08000377
 8000324:	08000435 	.word	0x08000435
 8000328:	080004f1 	.word	0x080004f1
	{ 
		case NORMAL_MODE:
			if (timer0_flag == 1)
 800032c:	4b9f      	ldr	r3, [pc, #636]	; (80005ac <fsm_input_processing+0x2a4>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	2b01      	cmp	r3, #1
 8000332:	d105      	bne.n	8000340 <fsm_input_processing+0x38>
			{
				setTimer0(1000);
 8000334:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000338:	f001 f9dc 	bl	80016f4 <setTimer0>
				traffic_light_fsm();
 800033c:	f000 ffee 	bl	800131c <traffic_light_fsm>
			}
			
			if (is_BUTTON_MODE_pressed())
 8000340:	f7ff ff04 	bl	800014c <is_BUTTON_MODE_pressed>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	f000 8124 	beq.w	8000594 <fsm_input_processing+0x28c>
			{
				current_MODE_status = MODIFY_RED_MODE;
 800034c:	4b96      	ldr	r3, [pc, #600]	; (80005a8 <fsm_input_processing+0x2a0>)
 800034e:	2201      	movs	r2, #1
 8000350:	701a      	strb	r2, [r3, #0]
				setTimer0(250);
 8000352:	20fa      	movs	r0, #250	; 0xfa
 8000354:	f001 f9ce 	bl	80016f4 <setTimer0>
				counter_buffer = RED_light_counter;
 8000358:	4b95      	ldr	r3, [pc, #596]	; (80005b0 <fsm_input_processing+0x2a8>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a95      	ldr	r2, [pc, #596]	; (80005b4 <fsm_input_processing+0x2ac>)
 800035e:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(RED0_GPIO_Port, RED0_Pin, 1);
 8000360:	2201      	movs	r2, #1
 8000362:	2120      	movs	r1, #32
 8000364:	4894      	ldr	r0, [pc, #592]	; (80005b8 <fsm_input_processing+0x2b0>)
 8000366:	f001 fd18 	bl	8001d9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, 1);
 800036a:	2201      	movs	r2, #1
 800036c:	2108      	movs	r1, #8
 800036e:	4892      	ldr	r0, [pc, #584]	; (80005b8 <fsm_input_processing+0x2b0>)
 8000370:	f001 fd13 	bl	8001d9a <HAL_GPIO_WritePin>
			}
			break;
 8000374:	e10e      	b.n	8000594 <fsm_input_processing+0x28c>
		
		case MODIFY_RED_MODE:
            HAL_GPIO_WritePin(YELLOW0_GPIO_Port, YELLOW0_Pin, 0);
 8000376:	2200      	movs	r2, #0
 8000378:	2140      	movs	r1, #64	; 0x40
 800037a:	488f      	ldr	r0, [pc, #572]	; (80005b8 <fsm_input_processing+0x2b0>)
 800037c:	f001 fd0d 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GREEN0_GPIO_Port, GREEN0_Pin, 0);
 8000380:	2200      	movs	r2, #0
 8000382:	2180      	movs	r1, #128	; 0x80
 8000384:	488c      	ldr	r0, [pc, #560]	; (80005b8 <fsm_input_processing+0x2b0>)
 8000386:	f001 fd08 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, 0);
 800038a:	2200      	movs	r2, #0
 800038c:	2104      	movs	r1, #4
 800038e:	488a      	ldr	r0, [pc, #552]	; (80005b8 <fsm_input_processing+0x2b0>)
 8000390:	f001 fd03 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, 0);
 8000394:	2200      	movs	r2, #0
 8000396:	2102      	movs	r1, #2
 8000398:	4887      	ldr	r0, [pc, #540]	; (80005b8 <fsm_input_processing+0x2b0>)
 800039a:	f001 fcfe 	bl	8001d9a <HAL_GPIO_WritePin>
			SEG7_buffer[0] = 2;
 800039e:	4b87      	ldr	r3, [pc, #540]	; (80005bc <fsm_input_processing+0x2b4>)
 80003a0:	2202      	movs	r2, #2
 80003a2:	601a      	str	r2, [r3, #0]
			SEG7_buffer[1] = counter_buffer;
 80003a4:	4b83      	ldr	r3, [pc, #524]	; (80005b4 <fsm_input_processing+0x2ac>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a84      	ldr	r2, [pc, #528]	; (80005bc <fsm_input_processing+0x2b4>)
 80003aa:	6053      	str	r3, [r2, #4]

			if (timer0_flag == 1)
 80003ac:	4b7f      	ldr	r3, [pc, #508]	; (80005ac <fsm_input_processing+0x2a4>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	2b01      	cmp	r3, #1
 80003b2:	d10a      	bne.n	80003ca <fsm_input_processing+0xc2>
			{
				setTimer0(250);
 80003b4:	20fa      	movs	r0, #250	; 0xfa
 80003b6:	f001 f99d 	bl	80016f4 <setTimer0>
				HAL_GPIO_TogglePin(RED0_GPIO_Port, RED0_Pin);
 80003ba:	2120      	movs	r1, #32
 80003bc:	487e      	ldr	r0, [pc, #504]	; (80005b8 <fsm_input_processing+0x2b0>)
 80003be:	f001 fd04 	bl	8001dca <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(RED1_GPIO_Port, RED1_Pin);
 80003c2:	2108      	movs	r1, #8
 80003c4:	487c      	ldr	r0, [pc, #496]	; (80005b8 <fsm_input_processing+0x2b0>)
 80003c6:	f001 fd00 	bl	8001dca <HAL_GPIO_TogglePin>
			}
			if (is_BUTTON_MODIFY_pressed())
 80003ca:	f7ff fed1 	bl	8000170 <is_BUTTON_MODIFY_pressed>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d00b      	beq.n	80003ec <fsm_input_processing+0xe4>
			{
				counter_buffer++;
 80003d4:	4b77      	ldr	r3, [pc, #476]	; (80005b4 <fsm_input_processing+0x2ac>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	3301      	adds	r3, #1
 80003da:	4a76      	ldr	r2, [pc, #472]	; (80005b4 <fsm_input_processing+0x2ac>)
 80003dc:	6013      	str	r3, [r2, #0]
				if (counter_buffer >= 100) counter_buffer = 1;
 80003de:	4b75      	ldr	r3, [pc, #468]	; (80005b4 <fsm_input_processing+0x2ac>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	2b63      	cmp	r3, #99	; 0x63
 80003e4:	dd02      	ble.n	80003ec <fsm_input_processing+0xe4>
 80003e6:	4b73      	ldr	r3, [pc, #460]	; (80005b4 <fsm_input_processing+0x2ac>)
 80003e8:	2201      	movs	r2, #1
 80003ea:	601a      	str	r2, [r3, #0]
			}
			if (is_BUTTON_SAVE_pressed()) 
 80003ec:	f7ff fed2 	bl	8000194 <is_BUTTON_SAVE_pressed>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d003      	beq.n	80003fe <fsm_input_processing+0xf6>
				RED_light_counter = counter_buffer;
 80003f6:	4b6f      	ldr	r3, [pc, #444]	; (80005b4 <fsm_input_processing+0x2ac>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4a6d      	ldr	r2, [pc, #436]	; (80005b0 <fsm_input_processing+0x2a8>)
 80003fc:	6013      	str	r3, [r2, #0]
			if (is_BUTTON_MODE_pressed())
 80003fe:	f7ff fea5 	bl	800014c <is_BUTTON_MODE_pressed>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	f000 80c7 	beq.w	8000598 <fsm_input_processing+0x290>
			{
				current_MODE_status = MODIFY_YELLOW_MODE;
 800040a:	4b67      	ldr	r3, [pc, #412]	; (80005a8 <fsm_input_processing+0x2a0>)
 800040c:	2202      	movs	r2, #2
 800040e:	701a      	strb	r2, [r3, #0]
				setTimer0(250);
 8000410:	20fa      	movs	r0, #250	; 0xfa
 8000412:	f001 f96f 	bl	80016f4 <setTimer0>
				counter_buffer = YELLOW_light_counter;
 8000416:	4b6a      	ldr	r3, [pc, #424]	; (80005c0 <fsm_input_processing+0x2b8>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4a66      	ldr	r2, [pc, #408]	; (80005b4 <fsm_input_processing+0x2ac>)
 800041c:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(YELLOW0_GPIO_Port, YELLOW0_Pin, 1);
 800041e:	2201      	movs	r2, #1
 8000420:	2140      	movs	r1, #64	; 0x40
 8000422:	4865      	ldr	r0, [pc, #404]	; (80005b8 <fsm_input_processing+0x2b0>)
 8000424:	f001 fcb9 	bl	8001d9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, 1);
 8000428:	2201      	movs	r2, #1
 800042a:	2104      	movs	r1, #4
 800042c:	4862      	ldr	r0, [pc, #392]	; (80005b8 <fsm_input_processing+0x2b0>)
 800042e:	f001 fcb4 	bl	8001d9a <HAL_GPIO_WritePin>
			}
			break;
 8000432:	e0b1      	b.n	8000598 <fsm_input_processing+0x290>
		
		case MODIFY_YELLOW_MODE:
            HAL_GPIO_WritePin(RED0_GPIO_Port, RED0_Pin, 0);
 8000434:	2200      	movs	r2, #0
 8000436:	2120      	movs	r1, #32
 8000438:	485f      	ldr	r0, [pc, #380]	; (80005b8 <fsm_input_processing+0x2b0>)
 800043a:	f001 fcae 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GREEN0_GPIO_Port, GREEN0_Pin, 0);
 800043e:	2200      	movs	r2, #0
 8000440:	2180      	movs	r1, #128	; 0x80
 8000442:	485d      	ldr	r0, [pc, #372]	; (80005b8 <fsm_input_processing+0x2b0>)
 8000444:	f001 fca9 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, 0);
 8000448:	2200      	movs	r2, #0
 800044a:	2108      	movs	r1, #8
 800044c:	485a      	ldr	r0, [pc, #360]	; (80005b8 <fsm_input_processing+0x2b0>)
 800044e:	f001 fca4 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, 0);
 8000452:	2200      	movs	r2, #0
 8000454:	2102      	movs	r1, #2
 8000456:	4858      	ldr	r0, [pc, #352]	; (80005b8 <fsm_input_processing+0x2b0>)
 8000458:	f001 fc9f 	bl	8001d9a <HAL_GPIO_WritePin>
			SEG7_buffer[0] = 3;
 800045c:	4b57      	ldr	r3, [pc, #348]	; (80005bc <fsm_input_processing+0x2b4>)
 800045e:	2203      	movs	r2, #3
 8000460:	601a      	str	r2, [r3, #0]
			SEG7_buffer[1] = counter_buffer;
 8000462:	4b54      	ldr	r3, [pc, #336]	; (80005b4 <fsm_input_processing+0x2ac>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a55      	ldr	r2, [pc, #340]	; (80005bc <fsm_input_processing+0x2b4>)
 8000468:	6053      	str	r3, [r2, #4]

			if (timer0_flag == 1)
 800046a:	4b50      	ldr	r3, [pc, #320]	; (80005ac <fsm_input_processing+0x2a4>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	2b01      	cmp	r3, #1
 8000470:	d10a      	bne.n	8000488 <fsm_input_processing+0x180>
			{
				setTimer0(250);
 8000472:	20fa      	movs	r0, #250	; 0xfa
 8000474:	f001 f93e 	bl	80016f4 <setTimer0>
				HAL_GPIO_TogglePin(YELLOW0_GPIO_Port, YELLOW0_Pin);
 8000478:	2140      	movs	r1, #64	; 0x40
 800047a:	484f      	ldr	r0, [pc, #316]	; (80005b8 <fsm_input_processing+0x2b0>)
 800047c:	f001 fca5 	bl	8001dca <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(YELLOW1_GPIO_Port, YELLOW1_Pin);
 8000480:	2104      	movs	r1, #4
 8000482:	484d      	ldr	r0, [pc, #308]	; (80005b8 <fsm_input_processing+0x2b0>)
 8000484:	f001 fca1 	bl	8001dca <HAL_GPIO_TogglePin>
			}
			if (is_BUTTON_MODIFY_pressed())
 8000488:	f7ff fe72 	bl	8000170 <is_BUTTON_MODIFY_pressed>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d00b      	beq.n	80004aa <fsm_input_processing+0x1a2>
			{
				counter_buffer++;
 8000492:	4b48      	ldr	r3, [pc, #288]	; (80005b4 <fsm_input_processing+0x2ac>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	3301      	adds	r3, #1
 8000498:	4a46      	ldr	r2, [pc, #280]	; (80005b4 <fsm_input_processing+0x2ac>)
 800049a:	6013      	str	r3, [r2, #0]
				if (counter_buffer >= 100) counter_buffer = 1;
 800049c:	4b45      	ldr	r3, [pc, #276]	; (80005b4 <fsm_input_processing+0x2ac>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	2b63      	cmp	r3, #99	; 0x63
 80004a2:	dd02      	ble.n	80004aa <fsm_input_processing+0x1a2>
 80004a4:	4b43      	ldr	r3, [pc, #268]	; (80005b4 <fsm_input_processing+0x2ac>)
 80004a6:	2201      	movs	r2, #1
 80004a8:	601a      	str	r2, [r3, #0]
			}
			if (is_BUTTON_SAVE_pressed()) 
 80004aa:	f7ff fe73 	bl	8000194 <is_BUTTON_SAVE_pressed>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d003      	beq.n	80004bc <fsm_input_processing+0x1b4>
				YELLOW_light_counter = counter_buffer;
 80004b4:	4b3f      	ldr	r3, [pc, #252]	; (80005b4 <fsm_input_processing+0x2ac>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a41      	ldr	r2, [pc, #260]	; (80005c0 <fsm_input_processing+0x2b8>)
 80004ba:	6013      	str	r3, [r2, #0]
			if (is_BUTTON_MODE_pressed())
 80004bc:	f7ff fe46 	bl	800014c <is_BUTTON_MODE_pressed>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d06a      	beq.n	800059c <fsm_input_processing+0x294>
			{
				current_MODE_status = MODIFY_GREEN_MODE;
 80004c6:	4b38      	ldr	r3, [pc, #224]	; (80005a8 <fsm_input_processing+0x2a0>)
 80004c8:	2203      	movs	r2, #3
 80004ca:	701a      	strb	r2, [r3, #0]
				setTimer0(250);
 80004cc:	20fa      	movs	r0, #250	; 0xfa
 80004ce:	f001 f911 	bl	80016f4 <setTimer0>
				counter_buffer = GREEN_light_counter;
 80004d2:	4b3c      	ldr	r3, [pc, #240]	; (80005c4 <fsm_input_processing+0x2bc>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4a37      	ldr	r2, [pc, #220]	; (80005b4 <fsm_input_processing+0x2ac>)
 80004d8:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(GREEN0_GPIO_Port, GREEN0_Pin, 1);
 80004da:	2201      	movs	r2, #1
 80004dc:	2180      	movs	r1, #128	; 0x80
 80004de:	4836      	ldr	r0, [pc, #216]	; (80005b8 <fsm_input_processing+0x2b0>)
 80004e0:	f001 fc5b 	bl	8001d9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, 1);
 80004e4:	2201      	movs	r2, #1
 80004e6:	2102      	movs	r1, #2
 80004e8:	4833      	ldr	r0, [pc, #204]	; (80005b8 <fsm_input_processing+0x2b0>)
 80004ea:	f001 fc56 	bl	8001d9a <HAL_GPIO_WritePin>
			}
			break;
 80004ee:	e055      	b.n	800059c <fsm_input_processing+0x294>

		case MODIFY_GREEN_MODE:
            HAL_GPIO_WritePin(RED0_GPIO_Port, RED0_Pin, 0);
 80004f0:	2200      	movs	r2, #0
 80004f2:	2120      	movs	r1, #32
 80004f4:	4830      	ldr	r0, [pc, #192]	; (80005b8 <fsm_input_processing+0x2b0>)
 80004f6:	f001 fc50 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(YELLOW0_GPIO_Port, YELLOW0_Pin, 0);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2140      	movs	r1, #64	; 0x40
 80004fe:	482e      	ldr	r0, [pc, #184]	; (80005b8 <fsm_input_processing+0x2b0>)
 8000500:	f001 fc4b 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, 0);
 8000504:	2200      	movs	r2, #0
 8000506:	2108      	movs	r1, #8
 8000508:	482b      	ldr	r0, [pc, #172]	; (80005b8 <fsm_input_processing+0x2b0>)
 800050a:	f001 fc46 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, 0);
 800050e:	2200      	movs	r2, #0
 8000510:	2104      	movs	r1, #4
 8000512:	4829      	ldr	r0, [pc, #164]	; (80005b8 <fsm_input_processing+0x2b0>)
 8000514:	f001 fc41 	bl	8001d9a <HAL_GPIO_WritePin>
			SEG7_buffer[0] = 4;
 8000518:	4b28      	ldr	r3, [pc, #160]	; (80005bc <fsm_input_processing+0x2b4>)
 800051a:	2204      	movs	r2, #4
 800051c:	601a      	str	r2, [r3, #0]
			SEG7_buffer[1] = counter_buffer;
 800051e:	4b25      	ldr	r3, [pc, #148]	; (80005b4 <fsm_input_processing+0x2ac>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4a26      	ldr	r2, [pc, #152]	; (80005bc <fsm_input_processing+0x2b4>)
 8000524:	6053      	str	r3, [r2, #4]

			if (timer0_flag == 1)
 8000526:	4b21      	ldr	r3, [pc, #132]	; (80005ac <fsm_input_processing+0x2a4>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	2b01      	cmp	r3, #1
 800052c:	d10a      	bne.n	8000544 <fsm_input_processing+0x23c>
			{
				setTimer0(250);
 800052e:	20fa      	movs	r0, #250	; 0xfa
 8000530:	f001 f8e0 	bl	80016f4 <setTimer0>
				HAL_GPIO_TogglePin(GREEN0_GPIO_Port, GREEN0_Pin);
 8000534:	2180      	movs	r1, #128	; 0x80
 8000536:	4820      	ldr	r0, [pc, #128]	; (80005b8 <fsm_input_processing+0x2b0>)
 8000538:	f001 fc47 	bl	8001dca <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(GREEN1_GPIO_Port, GREEN1_Pin);
 800053c:	2102      	movs	r1, #2
 800053e:	481e      	ldr	r0, [pc, #120]	; (80005b8 <fsm_input_processing+0x2b0>)
 8000540:	f001 fc43 	bl	8001dca <HAL_GPIO_TogglePin>
			}
			if (is_BUTTON_MODIFY_pressed())
 8000544:	f7ff fe14 	bl	8000170 <is_BUTTON_MODIFY_pressed>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d00b      	beq.n	8000566 <fsm_input_processing+0x25e>
			{
				counter_buffer++;
 800054e:	4b19      	ldr	r3, [pc, #100]	; (80005b4 <fsm_input_processing+0x2ac>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	3301      	adds	r3, #1
 8000554:	4a17      	ldr	r2, [pc, #92]	; (80005b4 <fsm_input_processing+0x2ac>)
 8000556:	6013      	str	r3, [r2, #0]
				if (counter_buffer >= 100) counter_buffer = 1;
 8000558:	4b16      	ldr	r3, [pc, #88]	; (80005b4 <fsm_input_processing+0x2ac>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2b63      	cmp	r3, #99	; 0x63
 800055e:	dd02      	ble.n	8000566 <fsm_input_processing+0x25e>
 8000560:	4b14      	ldr	r3, [pc, #80]	; (80005b4 <fsm_input_processing+0x2ac>)
 8000562:	2201      	movs	r2, #1
 8000564:	601a      	str	r2, [r3, #0]
			}
			if (is_BUTTON_SAVE_pressed()) 
 8000566:	f7ff fe15 	bl	8000194 <is_BUTTON_SAVE_pressed>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d003      	beq.n	8000578 <fsm_input_processing+0x270>
				GREEN_light_counter = counter_buffer;
 8000570:	4b10      	ldr	r3, [pc, #64]	; (80005b4 <fsm_input_processing+0x2ac>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a13      	ldr	r2, [pc, #76]	; (80005c4 <fsm_input_processing+0x2bc>)
 8000576:	6013      	str	r3, [r2, #0]
			if (is_BUTTON_MODE_pressed())
 8000578:	f7ff fde8 	bl	800014c <is_BUTTON_MODE_pressed>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d00e      	beq.n	80005a0 <fsm_input_processing+0x298>
			{
				current_MODE_status = NORMAL_MODE;
 8000582:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <fsm_input_processing+0x2a0>)
 8000584:	2200      	movs	r2, #0
 8000586:	701a      	strb	r2, [r3, #0]
				timer0_flag = 1;
 8000588:	4b08      	ldr	r3, [pc, #32]	; (80005ac <fsm_input_processing+0x2a4>)
 800058a:	2201      	movs	r2, #1
 800058c:	601a      	str	r2, [r3, #0]
			}
			break;
 800058e:	e007      	b.n	80005a0 <fsm_input_processing+0x298>
		
		default:
			break;
 8000590:	bf00      	nop
 8000592:	e006      	b.n	80005a2 <fsm_input_processing+0x29a>
			break;
 8000594:	bf00      	nop
 8000596:	e004      	b.n	80005a2 <fsm_input_processing+0x29a>
			break;
 8000598:	bf00      	nop
 800059a:	e002      	b.n	80005a2 <fsm_input_processing+0x29a>
			break;
 800059c:	bf00      	nop
 800059e:	e000      	b.n	80005a2 <fsm_input_processing+0x29a>
			break;
 80005a0:	bf00      	nop
	}
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	200000a8 	.word	0x200000a8
 80005ac:	20000090 	.word	0x20000090
 80005b0:	20000038 	.word	0x20000038
 80005b4:	2000007c 	.word	0x2000007c
 80005b8:	40010800 	.word	0x40010800
 80005bc:	20000080 	.word	0x20000080
 80005c0:	20000034 	.word	0x20000034
 80005c4:	20000030 	.word	0x20000030

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005cc:	f001 f8e4 	bl	8001798 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d0:	f000 f826 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 80005d4:	f000 f860 	bl	8000698 <MX_TIM2_Init>
  MX_GPIO_Init();
 80005d8:	f000 f8aa 	bl	8000730 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start_IT(&htim2);
 80005dc:	480d      	ldr	r0, [pc, #52]	; (8000614 <main+0x4c>)
 80005de:	f002 f839 	bl	8002654 <HAL_TIM_Base_Start_IT>
    
    setTimer0(1000);
 80005e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005e6:	f001 f885 	bl	80016f4 <setTimer0>
    current_MODE_status = NORMAL_MODE;
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <main+0x50>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
    setTimer1(500);
 80005f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005f4:	f001 f894 	bl	8001720 <setTimer1>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1) {		
		//cal; continuously
		fsm_input_processing();
 80005f8:	f7ff fe86 	bl	8000308 <fsm_input_processing>
		
    if (timer1_flag == 1)
 80005fc:	4b07      	ldr	r3, [pc, #28]	; (800061c <main+0x54>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b01      	cmp	r3, #1
 8000602:	d1f9      	bne.n	80005f8 <main+0x30>
    {
      setTimer1(500);
 8000604:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000608:	f001 f88a 	bl	8001720 <setTimer1>
      update_7SEGs();
 800060c:	f000 fdf0 	bl	80011f0 <update_7SEGs>
		fsm_input_processing();
 8000610:	e7f2      	b.n	80005f8 <main+0x30>
 8000612:	bf00      	nop
 8000614:	200000ac 	.word	0x200000ac
 8000618:	200000a8 	.word	0x200000a8
 800061c:	20000094 	.word	0x20000094

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b090      	sub	sp, #64	; 0x40
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0318 	add.w	r3, r7, #24
 800062a:	2228      	movs	r2, #40	; 0x28
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f002 fbcc 	bl	8002dcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000642:	2302      	movs	r3, #2
 8000644:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000646:	2301      	movs	r3, #1
 8000648:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064a:	2310      	movs	r3, #16
 800064c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800064e:	2300      	movs	r3, #0
 8000650:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000652:	f107 0318 	add.w	r3, r7, #24
 8000656:	4618      	mov	r0, r3
 8000658:	f001 fbd0 	bl	8001dfc <HAL_RCC_OscConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000662:	f000 f8d5 	bl	8000810 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000666:	230f      	movs	r3, #15
 8000668:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800066a:	2300      	movs	r3, #0
 800066c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f001 fe3c 	bl	80022fc <HAL_RCC_ClockConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800068a:	f000 f8c1 	bl	8000810 <Error_Handler>
  }
}
 800068e:	bf00      	nop
 8000690:	3740      	adds	r7, #64	; 0x40
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
	...

08000698 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b086      	sub	sp, #24
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800069e:	f107 0308 	add.w	r3, r7, #8
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ac:	463b      	mov	r3, r7
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006b4:	4b1d      	ldr	r3, [pc, #116]	; (800072c <MX_TIM2_Init+0x94>)
 80006b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80006bc:	4b1b      	ldr	r3, [pc, #108]	; (800072c <MX_TIM2_Init+0x94>)
 80006be:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80006c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c4:	4b19      	ldr	r3, [pc, #100]	; (800072c <MX_TIM2_Init+0x94>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80006ca:	4b18      	ldr	r3, [pc, #96]	; (800072c <MX_TIM2_Init+0x94>)
 80006cc:	2209      	movs	r2, #9
 80006ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d0:	4b16      	ldr	r3, [pc, #88]	; (800072c <MX_TIM2_Init+0x94>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006d6:	4b15      	ldr	r3, [pc, #84]	; (800072c <MX_TIM2_Init+0x94>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006dc:	4813      	ldr	r0, [pc, #76]	; (800072c <MX_TIM2_Init+0x94>)
 80006de:	f001 ff69 	bl	80025b4 <HAL_TIM_Base_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80006e8:	f000 f892 	bl	8000810 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006f2:	f107 0308 	add.w	r3, r7, #8
 80006f6:	4619      	mov	r1, r3
 80006f8:	480c      	ldr	r0, [pc, #48]	; (800072c <MX_TIM2_Init+0x94>)
 80006fa:	f002 f8ff 	bl	80028fc <HAL_TIM_ConfigClockSource>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000704:	f000 f884 	bl	8000810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000708:	2300      	movs	r3, #0
 800070a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800070c:	2300      	movs	r3, #0
 800070e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000710:	463b      	mov	r3, r7
 8000712:	4619      	mov	r1, r3
 8000714:	4805      	ldr	r0, [pc, #20]	; (800072c <MX_TIM2_Init+0x94>)
 8000716:	f002 facb 	bl	8002cb0 <HAL_TIMEx_MasterConfigSynchronization>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000720:	f000 f876 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	3718      	adds	r7, #24
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	200000ac 	.word	0x200000ac

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 0308 	add.w	r3, r7, #8
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000744:	4b2f      	ldr	r3, [pc, #188]	; (8000804 <MX_GPIO_Init+0xd4>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	4a2e      	ldr	r2, [pc, #184]	; (8000804 <MX_GPIO_Init+0xd4>)
 800074a:	f043 0304 	orr.w	r3, r3, #4
 800074e:	6193      	str	r3, [r2, #24]
 8000750:	4b2c      	ldr	r3, [pc, #176]	; (8000804 <MX_GPIO_Init+0xd4>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f003 0304 	and.w	r3, r3, #4
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075c:	4b29      	ldr	r3, [pc, #164]	; (8000804 <MX_GPIO_Init+0xd4>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	4a28      	ldr	r2, [pc, #160]	; (8000804 <MX_GPIO_Init+0xd4>)
 8000762:	f043 0308 	orr.w	r3, r3, #8
 8000766:	6193      	str	r3, [r2, #24]
 8000768:	4b26      	ldr	r3, [pc, #152]	; (8000804 <MX_GPIO_Init+0xd4>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	f003 0308 	and.w	r3, r3, #8
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GREEN1_Pin|YELLOW1_Pin|RED1_Pin|a0_Pin
 8000774:	2200      	movs	r2, #0
 8000776:	f24f 11fe 	movw	r1, #61950	; 0xf1fe
 800077a:	4823      	ldr	r0, [pc, #140]	; (8000808 <MX_GPIO_Init+0xd8>)
 800077c:	f001 fb0d 	bl	8001d9a <HAL_GPIO_WritePin>
                          |RED0_Pin|YELLOW0_Pin|GREEN0_Pin|b0_Pin
                          |c0_Pin|d0_Pin|e0_Pin|f0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, b1_Pin|c1_Pin|EN3_Pin|g0_Pin
 8000780:	2200      	movs	r2, #0
 8000782:	f244 71fe 	movw	r1, #18430	; 0x47fe
 8000786:	4821      	ldr	r0, [pc, #132]	; (800080c <MX_GPIO_Init+0xdc>)
 8000788:	f001 fb07 	bl	8001d9a <HAL_GPIO_WritePin>
                          |EN0_Pin|EN1_Pin|EN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : GREEN1_Pin YELLOW1_Pin RED1_Pin a0_Pin
                           RED0_Pin YELLOW0_Pin GREEN0_Pin b0_Pin
                           c0_Pin d0_Pin e0_Pin f0_Pin */
  GPIO_InitStruct.Pin = GREEN1_Pin|YELLOW1_Pin|RED1_Pin|a0_Pin
 800078c:	f24f 13fe 	movw	r3, #61950	; 0xf1fe
 8000790:	60bb      	str	r3, [r7, #8]
                          |RED0_Pin|YELLOW0_Pin|GREEN0_Pin|b0_Pin
                          |c0_Pin|d0_Pin|e0_Pin|f0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000792:	2301      	movs	r3, #1
 8000794:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079a:	2302      	movs	r3, #2
 800079c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079e:	f107 0308 	add.w	r3, r7, #8
 80007a2:	4619      	mov	r1, r3
 80007a4:	4818      	ldr	r0, [pc, #96]	; (8000808 <MX_GPIO_Init+0xd8>)
 80007a6:	f001 f967 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : a1_Pin */
  GPIO_InitStruct.Pin = a1_Pin;
 80007aa:	2301      	movs	r3, #1
 80007ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007b2:	2301      	movs	r3, #1
 80007b4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(a1_GPIO_Port, &GPIO_InitStruct);
 80007b6:	f107 0308 	add.w	r3, r7, #8
 80007ba:	4619      	mov	r1, r3
 80007bc:	4813      	ldr	r0, [pc, #76]	; (800080c <MX_GPIO_Init+0xdc>)
 80007be:	f001 f95b 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : b1_Pin c1_Pin EN3_Pin g0_Pin
                           d1_Pin e1_Pin f1_Pin g1_Pin
                           EN0_Pin EN1_Pin EN2_Pin */
  GPIO_InitStruct.Pin = b1_Pin|c1_Pin|EN3_Pin|g0_Pin
 80007c2:	f244 73fe 	movw	r3, #18430	; 0x47fe
 80007c6:	60bb      	str	r3, [r7, #8]
                          |d1_Pin|e1_Pin|f1_Pin|g1_Pin
                          |EN0_Pin|EN1_Pin|EN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c8:	2301      	movs	r3, #1
 80007ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	2302      	movs	r3, #2
 80007d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d4:	f107 0308 	add.w	r3, r7, #8
 80007d8:	4619      	mov	r1, r3
 80007da:	480c      	ldr	r0, [pc, #48]	; (800080c <MX_GPIO_Init+0xdc>)
 80007dc:	f001 f94c 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_MODE_Pin BUTTON_MODIFY_Pin BUTTON_SAVE_Pin */
  GPIO_InitStruct.Pin = BUTTON_MODE_Pin|BUTTON_MODIFY_Pin|BUTTON_SAVE_Pin;
 80007e0:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 80007e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ee:	f107 0308 	add.w	r3, r7, #8
 80007f2:	4619      	mov	r1, r3
 80007f4:	4804      	ldr	r0, [pc, #16]	; (8000808 <MX_GPIO_Init+0xd8>)
 80007f6:	f001 f93f 	bl	8001a78 <HAL_GPIO_Init>

}
 80007fa:	bf00      	nop
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40021000 	.word	0x40021000
 8000808:	40010800 	.word	0x40010800
 800080c:	40010c00 	.word	0x40010c00

08000810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000814:	b672      	cpsid	i
}
 8000816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8000818:	e7fe      	b.n	8000818 <Error_Handler+0x8>
	...

0800081c <display7SEG_0>:
int RED_light_counter = 5;
int GREEN_light_counter = 3;
int YELLOW_light_counter = 2;

static void display7SEG_0 (int number)
{   
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
    const int ON_ = 0, OFF_ = 1;
 8000824:	2300      	movs	r3, #0
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	2301      	movs	r3, #1
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2b09      	cmp	r3, #9
 8000830:	f200 824c 	bhi.w	8000ccc <display7SEG_0+0x4b0>
 8000834:	a201      	add	r2, pc, #4	; (adr r2, 800083c <display7SEG_0+0x20>)
 8000836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800083a:	bf00      	nop
 800083c:	08000865 	.word	0x08000865
 8000840:	080008d5 	.word	0x080008d5
 8000844:	08000945 	.word	0x08000945
 8000848:	080009b5 	.word	0x080009b5
 800084c:	08000a25 	.word	0x08000a25
 8000850:	08000a95 	.word	0x08000a95
 8000854:	08000b0d 	.word	0x08000b0d
 8000858:	08000b7d 	.word	0x08000b7d
 800085c:	08000bed 	.word	0x08000bed
 8000860:	08000c5d 	.word	0x08000c5d
    switch(number)
    {
        case 0:
            HAL_GPIO_WritePin(a0_GPIO_Port, a0_Pin, ON_);
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	b2db      	uxtb	r3, r3
 8000868:	461a      	mov	r2, r3
 800086a:	2110      	movs	r1, #16
 800086c:	48a5      	ldr	r0, [pc, #660]	; (8000b04 <display7SEG_0+0x2e8>)
 800086e:	f001 fa94 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b0_GPIO_Port, b0_Pin, ON_);
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	b2db      	uxtb	r3, r3
 8000876:	461a      	mov	r2, r3
 8000878:	f44f 7180 	mov.w	r1, #256	; 0x100
 800087c:	48a1      	ldr	r0, [pc, #644]	; (8000b04 <display7SEG_0+0x2e8>)
 800087e:	f001 fa8c 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c0_GPIO_Port, c0_Pin, ON_);
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	b2db      	uxtb	r3, r3
 8000886:	461a      	mov	r2, r3
 8000888:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800088c:	489d      	ldr	r0, [pc, #628]	; (8000b04 <display7SEG_0+0x2e8>)
 800088e:	f001 fa84 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d0_GPIO_Port, d0_Pin, ON_);
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	b2db      	uxtb	r3, r3
 8000896:	461a      	mov	r2, r3
 8000898:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800089c:	4899      	ldr	r0, [pc, #612]	; (8000b04 <display7SEG_0+0x2e8>)
 800089e:	f001 fa7c 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e0_GPIO_Port, e0_Pin, ON_);
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	461a      	mov	r2, r3
 80008a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008ac:	4895      	ldr	r0, [pc, #596]	; (8000b04 <display7SEG_0+0x2e8>)
 80008ae:	f001 fa74 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f0_GPIO_Port, f0_Pin, ON_);
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	461a      	mov	r2, r3
 80008b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008bc:	4891      	ldr	r0, [pc, #580]	; (8000b04 <display7SEG_0+0x2e8>)
 80008be:	f001 fa6c 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g0_GPIO_Port, g0_Pin, OFF_);
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	461a      	mov	r2, r3
 80008c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008cc:	488e      	ldr	r0, [pc, #568]	; (8000b08 <display7SEG_0+0x2ec>)
 80008ce:	f001 fa64 	bl	8001d9a <HAL_GPIO_WritePin>
            break;
 80008d2:	e233      	b.n	8000d3c <display7SEG_0+0x520>

        case 1:
            HAL_GPIO_WritePin(a0_GPIO_Port, a0_Pin, OFF_);
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	461a      	mov	r2, r3
 80008da:	2110      	movs	r1, #16
 80008dc:	4889      	ldr	r0, [pc, #548]	; (8000b04 <display7SEG_0+0x2e8>)
 80008de:	f001 fa5c 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b0_GPIO_Port, b0_Pin, ON_);
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	461a      	mov	r2, r3
 80008e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008ec:	4885      	ldr	r0, [pc, #532]	; (8000b04 <display7SEG_0+0x2e8>)
 80008ee:	f001 fa54 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c0_GPIO_Port, c0_Pin, ON_);
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	461a      	mov	r2, r3
 80008f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008fc:	4881      	ldr	r0, [pc, #516]	; (8000b04 <display7SEG_0+0x2e8>)
 80008fe:	f001 fa4c 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d0_GPIO_Port, d0_Pin, OFF_);
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	b2db      	uxtb	r3, r3
 8000906:	461a      	mov	r2, r3
 8000908:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800090c:	487d      	ldr	r0, [pc, #500]	; (8000b04 <display7SEG_0+0x2e8>)
 800090e:	f001 fa44 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e0_GPIO_Port, e0_Pin, OFF_);
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	b2db      	uxtb	r3, r3
 8000916:	461a      	mov	r2, r3
 8000918:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800091c:	4879      	ldr	r0, [pc, #484]	; (8000b04 <display7SEG_0+0x2e8>)
 800091e:	f001 fa3c 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f0_GPIO_Port, f0_Pin, OFF_);
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	b2db      	uxtb	r3, r3
 8000926:	461a      	mov	r2, r3
 8000928:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800092c:	4875      	ldr	r0, [pc, #468]	; (8000b04 <display7SEG_0+0x2e8>)
 800092e:	f001 fa34 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g0_GPIO_Port, g0_Pin, OFF_);
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	b2db      	uxtb	r3, r3
 8000936:	461a      	mov	r2, r3
 8000938:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800093c:	4872      	ldr	r0, [pc, #456]	; (8000b08 <display7SEG_0+0x2ec>)
 800093e:	f001 fa2c 	bl	8001d9a <HAL_GPIO_WritePin>
            break;
 8000942:	e1fb      	b.n	8000d3c <display7SEG_0+0x520>

        case 2:
            HAL_GPIO_WritePin(a0_GPIO_Port, a0_Pin, ON_);
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	b2db      	uxtb	r3, r3
 8000948:	461a      	mov	r2, r3
 800094a:	2110      	movs	r1, #16
 800094c:	486d      	ldr	r0, [pc, #436]	; (8000b04 <display7SEG_0+0x2e8>)
 800094e:	f001 fa24 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b0_GPIO_Port, b0_Pin, ON_);
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	b2db      	uxtb	r3, r3
 8000956:	461a      	mov	r2, r3
 8000958:	f44f 7180 	mov.w	r1, #256	; 0x100
 800095c:	4869      	ldr	r0, [pc, #420]	; (8000b04 <display7SEG_0+0x2e8>)
 800095e:	f001 fa1c 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c0_GPIO_Port, c0_Pin, OFF_);
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	b2db      	uxtb	r3, r3
 8000966:	461a      	mov	r2, r3
 8000968:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800096c:	4865      	ldr	r0, [pc, #404]	; (8000b04 <display7SEG_0+0x2e8>)
 800096e:	f001 fa14 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d0_GPIO_Port, d0_Pin, ON_);
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	b2db      	uxtb	r3, r3
 8000976:	461a      	mov	r2, r3
 8000978:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800097c:	4861      	ldr	r0, [pc, #388]	; (8000b04 <display7SEG_0+0x2e8>)
 800097e:	f001 fa0c 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e0_GPIO_Port, e0_Pin, ON_);
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	b2db      	uxtb	r3, r3
 8000986:	461a      	mov	r2, r3
 8000988:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800098c:	485d      	ldr	r0, [pc, #372]	; (8000b04 <display7SEG_0+0x2e8>)
 800098e:	f001 fa04 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f0_GPIO_Port, f0_Pin, OFF_);
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	b2db      	uxtb	r3, r3
 8000996:	461a      	mov	r2, r3
 8000998:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800099c:	4859      	ldr	r0, [pc, #356]	; (8000b04 <display7SEG_0+0x2e8>)
 800099e:	f001 f9fc 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g0_GPIO_Port, g0_Pin, ON_);
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	461a      	mov	r2, r3
 80009a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009ac:	4856      	ldr	r0, [pc, #344]	; (8000b08 <display7SEG_0+0x2ec>)
 80009ae:	f001 f9f4 	bl	8001d9a <HAL_GPIO_WritePin>
            break;
 80009b2:	e1c3      	b.n	8000d3c <display7SEG_0+0x520>

        case 3:
            HAL_GPIO_WritePin(a0_GPIO_Port, a0_Pin, ON_);
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	461a      	mov	r2, r3
 80009ba:	2110      	movs	r1, #16
 80009bc:	4851      	ldr	r0, [pc, #324]	; (8000b04 <display7SEG_0+0x2e8>)
 80009be:	f001 f9ec 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b0_GPIO_Port, b0_Pin, ON_);
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	461a      	mov	r2, r3
 80009c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009cc:	484d      	ldr	r0, [pc, #308]	; (8000b04 <display7SEG_0+0x2e8>)
 80009ce:	f001 f9e4 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c0_GPIO_Port, c0_Pin, ON_);
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	461a      	mov	r2, r3
 80009d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009dc:	4849      	ldr	r0, [pc, #292]	; (8000b04 <display7SEG_0+0x2e8>)
 80009de:	f001 f9dc 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d0_GPIO_Port, d0_Pin, ON_);
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	461a      	mov	r2, r3
 80009e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ec:	4845      	ldr	r0, [pc, #276]	; (8000b04 <display7SEG_0+0x2e8>)
 80009ee:	f001 f9d4 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e0_GPIO_Port, e0_Pin, OFF_);
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	461a      	mov	r2, r3
 80009f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009fc:	4841      	ldr	r0, [pc, #260]	; (8000b04 <display7SEG_0+0x2e8>)
 80009fe:	f001 f9cc 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f0_GPIO_Port, f0_Pin, OFF_);
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	461a      	mov	r2, r3
 8000a08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a0c:	483d      	ldr	r0, [pc, #244]	; (8000b04 <display7SEG_0+0x2e8>)
 8000a0e:	f001 f9c4 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g0_GPIO_Port, g0_Pin, ON_);
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	461a      	mov	r2, r3
 8000a18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a1c:	483a      	ldr	r0, [pc, #232]	; (8000b08 <display7SEG_0+0x2ec>)
 8000a1e:	f001 f9bc 	bl	8001d9a <HAL_GPIO_WritePin>
            break;
 8000a22:	e18b      	b.n	8000d3c <display7SEG_0+0x520>

        case 4:
            HAL_GPIO_WritePin(a0_GPIO_Port, a0_Pin, OFF_);
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	461a      	mov	r2, r3
 8000a2a:	2110      	movs	r1, #16
 8000a2c:	4835      	ldr	r0, [pc, #212]	; (8000b04 <display7SEG_0+0x2e8>)
 8000a2e:	f001 f9b4 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b0_GPIO_Port, b0_Pin, ON_);
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	461a      	mov	r2, r3
 8000a38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a3c:	4831      	ldr	r0, [pc, #196]	; (8000b04 <display7SEG_0+0x2e8>)
 8000a3e:	f001 f9ac 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c0_GPIO_Port, c0_Pin, ON_);
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	461a      	mov	r2, r3
 8000a48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a4c:	482d      	ldr	r0, [pc, #180]	; (8000b04 <display7SEG_0+0x2e8>)
 8000a4e:	f001 f9a4 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d0_GPIO_Port, d0_Pin, OFF_);
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	461a      	mov	r2, r3
 8000a58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a5c:	4829      	ldr	r0, [pc, #164]	; (8000b04 <display7SEG_0+0x2e8>)
 8000a5e:	f001 f99c 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e0_GPIO_Port, e0_Pin, OFF_);
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	461a      	mov	r2, r3
 8000a68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a6c:	4825      	ldr	r0, [pc, #148]	; (8000b04 <display7SEG_0+0x2e8>)
 8000a6e:	f001 f994 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f0_GPIO_Port, f0_Pin, ON_);
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	461a      	mov	r2, r3
 8000a78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a7c:	4821      	ldr	r0, [pc, #132]	; (8000b04 <display7SEG_0+0x2e8>)
 8000a7e:	f001 f98c 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g0_GPIO_Port, g0_Pin, ON_);
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	461a      	mov	r2, r3
 8000a88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a8c:	481e      	ldr	r0, [pc, #120]	; (8000b08 <display7SEG_0+0x2ec>)
 8000a8e:	f001 f984 	bl	8001d9a <HAL_GPIO_WritePin>
            break;
 8000a92:	e153      	b.n	8000d3c <display7SEG_0+0x520>

        case 5:
            HAL_GPIO_WritePin(a0_GPIO_Port, a0_Pin, ON_);
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	461a      	mov	r2, r3
 8000a9a:	2110      	movs	r1, #16
 8000a9c:	4819      	ldr	r0, [pc, #100]	; (8000b04 <display7SEG_0+0x2e8>)
 8000a9e:	f001 f97c 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b0_GPIO_Port, b0_Pin, OFF_);
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aac:	4815      	ldr	r0, [pc, #84]	; (8000b04 <display7SEG_0+0x2e8>)
 8000aae:	f001 f974 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c0_GPIO_Port, c0_Pin, ON_);
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000abc:	4811      	ldr	r0, [pc, #68]	; (8000b04 <display7SEG_0+0x2e8>)
 8000abe:	f001 f96c 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d0_GPIO_Port, d0_Pin, ON_);
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000acc:	480d      	ldr	r0, [pc, #52]	; (8000b04 <display7SEG_0+0x2e8>)
 8000ace:	f001 f964 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e0_GPIO_Port, e0_Pin, OFF_);
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000adc:	4809      	ldr	r0, [pc, #36]	; (8000b04 <display7SEG_0+0x2e8>)
 8000ade:	f001 f95c 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f0_GPIO_Port, f0_Pin, ON_);
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aec:	4805      	ldr	r0, [pc, #20]	; (8000b04 <display7SEG_0+0x2e8>)
 8000aee:	f001 f954 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g0_GPIO_Port, g0_Pin, ON_);
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	461a      	mov	r2, r3
 8000af8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000afc:	4802      	ldr	r0, [pc, #8]	; (8000b08 <display7SEG_0+0x2ec>)
 8000afe:	f001 f94c 	bl	8001d9a <HAL_GPIO_WritePin>
            break;
 8000b02:	e11b      	b.n	8000d3c <display7SEG_0+0x520>
 8000b04:	40010800 	.word	0x40010800
 8000b08:	40010c00 	.word	0x40010c00

        case 6:
            HAL_GPIO_WritePin(a0_GPIO_Port, a0_Pin, ON_);
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	461a      	mov	r2, r3
 8000b12:	2110      	movs	r1, #16
 8000b14:	488b      	ldr	r0, [pc, #556]	; (8000d44 <display7SEG_0+0x528>)
 8000b16:	f001 f940 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b0_GPIO_Port, b0_Pin, OFF_);
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	461a      	mov	r2, r3
 8000b20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b24:	4887      	ldr	r0, [pc, #540]	; (8000d44 <display7SEG_0+0x528>)
 8000b26:	f001 f938 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c0_GPIO_Port, c0_Pin, ON_);
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	461a      	mov	r2, r3
 8000b30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b34:	4883      	ldr	r0, [pc, #524]	; (8000d44 <display7SEG_0+0x528>)
 8000b36:	f001 f930 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d0_GPIO_Port, d0_Pin, ON_);
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	461a      	mov	r2, r3
 8000b40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b44:	487f      	ldr	r0, [pc, #508]	; (8000d44 <display7SEG_0+0x528>)
 8000b46:	f001 f928 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e0_GPIO_Port, e0_Pin, ON_);
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	461a      	mov	r2, r3
 8000b50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b54:	487b      	ldr	r0, [pc, #492]	; (8000d44 <display7SEG_0+0x528>)
 8000b56:	f001 f920 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f0_GPIO_Port, f0_Pin, ON_);
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	461a      	mov	r2, r3
 8000b60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b64:	4877      	ldr	r0, [pc, #476]	; (8000d44 <display7SEG_0+0x528>)
 8000b66:	f001 f918 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g0_GPIO_Port, g0_Pin, ON_);
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	461a      	mov	r2, r3
 8000b70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b74:	4874      	ldr	r0, [pc, #464]	; (8000d48 <display7SEG_0+0x52c>)
 8000b76:	f001 f910 	bl	8001d9a <HAL_GPIO_WritePin>
            break;
 8000b7a:	e0df      	b.n	8000d3c <display7SEG_0+0x520>

        case 7:
            HAL_GPIO_WritePin(a0_GPIO_Port, a0_Pin, ON_);
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	461a      	mov	r2, r3
 8000b82:	2110      	movs	r1, #16
 8000b84:	486f      	ldr	r0, [pc, #444]	; (8000d44 <display7SEG_0+0x528>)
 8000b86:	f001 f908 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b0_GPIO_Port, b0_Pin, ON_);
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	461a      	mov	r2, r3
 8000b90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b94:	486b      	ldr	r0, [pc, #428]	; (8000d44 <display7SEG_0+0x528>)
 8000b96:	f001 f900 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c0_GPIO_Port, c0_Pin, ON_);
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ba4:	4867      	ldr	r0, [pc, #412]	; (8000d44 <display7SEG_0+0x528>)
 8000ba6:	f001 f8f8 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d0_GPIO_Port, d0_Pin, OFF_);
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	461a      	mov	r2, r3
 8000bb0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb4:	4863      	ldr	r0, [pc, #396]	; (8000d44 <display7SEG_0+0x528>)
 8000bb6:	f001 f8f0 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e0_GPIO_Port, e0_Pin, OFF_);
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bc4:	485f      	ldr	r0, [pc, #380]	; (8000d44 <display7SEG_0+0x528>)
 8000bc6:	f001 f8e8 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f0_GPIO_Port, f0_Pin, OFF_);
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	461a      	mov	r2, r3
 8000bd0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bd4:	485b      	ldr	r0, [pc, #364]	; (8000d44 <display7SEG_0+0x528>)
 8000bd6:	f001 f8e0 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g0_GPIO_Port, g0_Pin, OFF_);
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	461a      	mov	r2, r3
 8000be0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000be4:	4858      	ldr	r0, [pc, #352]	; (8000d48 <display7SEG_0+0x52c>)
 8000be6:	f001 f8d8 	bl	8001d9a <HAL_GPIO_WritePin>
            break;
 8000bea:	e0a7      	b.n	8000d3c <display7SEG_0+0x520>

        case 8:
            HAL_GPIO_WritePin(a0_GPIO_Port, a0_Pin, ON_);
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	2110      	movs	r1, #16
 8000bf4:	4853      	ldr	r0, [pc, #332]	; (8000d44 <display7SEG_0+0x528>)
 8000bf6:	f001 f8d0 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b0_GPIO_Port, b0_Pin, ON_);
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	461a      	mov	r2, r3
 8000c00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c04:	484f      	ldr	r0, [pc, #316]	; (8000d44 <display7SEG_0+0x528>)
 8000c06:	f001 f8c8 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c0_GPIO_Port, c0_Pin, ON_);
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	461a      	mov	r2, r3
 8000c10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c14:	484b      	ldr	r0, [pc, #300]	; (8000d44 <display7SEG_0+0x528>)
 8000c16:	f001 f8c0 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d0_GPIO_Port, d0_Pin, ON_);
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	461a      	mov	r2, r3
 8000c20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c24:	4847      	ldr	r0, [pc, #284]	; (8000d44 <display7SEG_0+0x528>)
 8000c26:	f001 f8b8 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e0_GPIO_Port, e0_Pin, ON_);
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	461a      	mov	r2, r3
 8000c30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c34:	4843      	ldr	r0, [pc, #268]	; (8000d44 <display7SEG_0+0x528>)
 8000c36:	f001 f8b0 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f0_GPIO_Port, f0_Pin, ON_);
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	461a      	mov	r2, r3
 8000c40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c44:	483f      	ldr	r0, [pc, #252]	; (8000d44 <display7SEG_0+0x528>)
 8000c46:	f001 f8a8 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g0_GPIO_Port, g0_Pin, ON_);
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	461a      	mov	r2, r3
 8000c50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c54:	483c      	ldr	r0, [pc, #240]	; (8000d48 <display7SEG_0+0x52c>)
 8000c56:	f001 f8a0 	bl	8001d9a <HAL_GPIO_WritePin>
            break;
 8000c5a:	e06f      	b.n	8000d3c <display7SEG_0+0x520>

        case 9:
            HAL_GPIO_WritePin(a0_GPIO_Port, a0_Pin, ON_);
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	461a      	mov	r2, r3
 8000c62:	2110      	movs	r1, #16
 8000c64:	4837      	ldr	r0, [pc, #220]	; (8000d44 <display7SEG_0+0x528>)
 8000c66:	f001 f898 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b0_GPIO_Port, b0_Pin, ON_);
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	461a      	mov	r2, r3
 8000c70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c74:	4833      	ldr	r0, [pc, #204]	; (8000d44 <display7SEG_0+0x528>)
 8000c76:	f001 f890 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c0_GPIO_Port, c0_Pin, ON_);
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	461a      	mov	r2, r3
 8000c80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c84:	482f      	ldr	r0, [pc, #188]	; (8000d44 <display7SEG_0+0x528>)
 8000c86:	f001 f888 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d0_GPIO_Port, d0_Pin, ON_);
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	461a      	mov	r2, r3
 8000c90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c94:	482b      	ldr	r0, [pc, #172]	; (8000d44 <display7SEG_0+0x528>)
 8000c96:	f001 f880 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e0_GPIO_Port, e0_Pin, OFF_);
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ca4:	4827      	ldr	r0, [pc, #156]	; (8000d44 <display7SEG_0+0x528>)
 8000ca6:	f001 f878 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f0_GPIO_Port, f0_Pin, ON_);
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	461a      	mov	r2, r3
 8000cb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cb4:	4823      	ldr	r0, [pc, #140]	; (8000d44 <display7SEG_0+0x528>)
 8000cb6:	f001 f870 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g0_GPIO_Port, g0_Pin, ON_);
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cc4:	4820      	ldr	r0, [pc, #128]	; (8000d48 <display7SEG_0+0x52c>)
 8000cc6:	f001 f868 	bl	8001d9a <HAL_GPIO_WritePin>
            break;
 8000cca:	e037      	b.n	8000d3c <display7SEG_0+0x520>

        default:
            HAL_GPIO_WritePin(a0_GPIO_Port, a0_Pin, OFF_);
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	2110      	movs	r1, #16
 8000cd4:	481b      	ldr	r0, [pc, #108]	; (8000d44 <display7SEG_0+0x528>)
 8000cd6:	f001 f860 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b0_GPIO_Port, b0_Pin, OFF_);
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	461a      	mov	r2, r3
 8000ce0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ce4:	4817      	ldr	r0, [pc, #92]	; (8000d44 <display7SEG_0+0x528>)
 8000ce6:	f001 f858 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c0_GPIO_Port, c0_Pin, OFF_);
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	461a      	mov	r2, r3
 8000cf0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cf4:	4813      	ldr	r0, [pc, #76]	; (8000d44 <display7SEG_0+0x528>)
 8000cf6:	f001 f850 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d0_GPIO_Port, d0_Pin, OFF_);
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	461a      	mov	r2, r3
 8000d00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d04:	480f      	ldr	r0, [pc, #60]	; (8000d44 <display7SEG_0+0x528>)
 8000d06:	f001 f848 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e0_GPIO_Port, e0_Pin, OFF_);
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	461a      	mov	r2, r3
 8000d10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d14:	480b      	ldr	r0, [pc, #44]	; (8000d44 <display7SEG_0+0x528>)
 8000d16:	f001 f840 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f0_GPIO_Port, f0_Pin, OFF_);
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	461a      	mov	r2, r3
 8000d20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d24:	4807      	ldr	r0, [pc, #28]	; (8000d44 <display7SEG_0+0x528>)
 8000d26:	f001 f838 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g0_GPIO_Port, g0_Pin, OFF_);
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	461a      	mov	r2, r3
 8000d30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d34:	4804      	ldr	r0, [pc, #16]	; (8000d48 <display7SEG_0+0x52c>)
 8000d36:	f001 f830 	bl	8001d9a <HAL_GPIO_WritePin>
            break;
 8000d3a:	bf00      	nop
    }
}
 8000d3c:	bf00      	nop
 8000d3e:	3710      	adds	r7, #16
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40010800 	.word	0x40010800
 8000d48:	40010c00 	.word	0x40010c00

08000d4c <display7SEG_1>:

static void display7SEG_1 (int number)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
    const int ON_ = 0, OFF_ = 1;
 8000d54:	2300      	movs	r3, #0
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	2301      	movs	r3, #1
 8000d5a:	60bb      	str	r3, [r7, #8]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2b09      	cmp	r3, #9
 8000d60:	f200 820e 	bhi.w	8001180 <display7SEG_1+0x434>
 8000d64:	a201      	add	r2, pc, #4	; (adr r2, 8000d6c <display7SEG_1+0x20>)
 8000d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d6a:	bf00      	nop
 8000d6c:	08000d95 	.word	0x08000d95
 8000d70:	08000df9 	.word	0x08000df9
 8000d74:	08000e5d 	.word	0x08000e5d
 8000d78:	08000ec1 	.word	0x08000ec1
 8000d7c:	08000f25 	.word	0x08000f25
 8000d80:	08000f89 	.word	0x08000f89
 8000d84:	08000fed 	.word	0x08000fed
 8000d88:	08001055 	.word	0x08001055
 8000d8c:	080010b9 	.word	0x080010b9
 8000d90:	0800111d 	.word	0x0800111d
    switch(number)
    {
        case 0:
            HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, ON_);
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	461a      	mov	r2, r3
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	48ac      	ldr	r0, [pc, #688]	; (8001050 <display7SEG_1+0x304>)
 8000d9e:	f000 fffc 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, ON_);
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	461a      	mov	r2, r3
 8000da8:	2102      	movs	r1, #2
 8000daa:	48a9      	ldr	r0, [pc, #676]	; (8001050 <display7SEG_1+0x304>)
 8000dac:	f000 fff5 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, ON_);
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	461a      	mov	r2, r3
 8000db6:	2104      	movs	r1, #4
 8000db8:	48a5      	ldr	r0, [pc, #660]	; (8001050 <display7SEG_1+0x304>)
 8000dba:	f000 ffee 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, ON_);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	2108      	movs	r1, #8
 8000dc6:	48a2      	ldr	r0, [pc, #648]	; (8001050 <display7SEG_1+0x304>)
 8000dc8:	f000 ffe7 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, ON_);
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	2110      	movs	r1, #16
 8000dd4:	489e      	ldr	r0, [pc, #632]	; (8001050 <display7SEG_1+0x304>)
 8000dd6:	f000 ffe0 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, ON_);
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	461a      	mov	r2, r3
 8000de0:	2120      	movs	r1, #32
 8000de2:	489b      	ldr	r0, [pc, #620]	; (8001050 <display7SEG_1+0x304>)
 8000de4:	f000 ffd9 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, OFF_);
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	461a      	mov	r2, r3
 8000dee:	2140      	movs	r1, #64	; 0x40
 8000df0:	4897      	ldr	r0, [pc, #604]	; (8001050 <display7SEG_1+0x304>)
 8000df2:	f000 ffd2 	bl	8001d9a <HAL_GPIO_WritePin>
            break;
 8000df6:	e1f5      	b.n	80011e4 <display7SEG_1+0x498>

        case 1:
            HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, OFF_);
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	2101      	movs	r1, #1
 8000e00:	4893      	ldr	r0, [pc, #588]	; (8001050 <display7SEG_1+0x304>)
 8000e02:	f000 ffca 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, ON_);
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	2102      	movs	r1, #2
 8000e0e:	4890      	ldr	r0, [pc, #576]	; (8001050 <display7SEG_1+0x304>)
 8000e10:	f000 ffc3 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, ON_);
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	461a      	mov	r2, r3
 8000e1a:	2104      	movs	r1, #4
 8000e1c:	488c      	ldr	r0, [pc, #560]	; (8001050 <display7SEG_1+0x304>)
 8000e1e:	f000 ffbc 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, OFF_);
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	461a      	mov	r2, r3
 8000e28:	2108      	movs	r1, #8
 8000e2a:	4889      	ldr	r0, [pc, #548]	; (8001050 <display7SEG_1+0x304>)
 8000e2c:	f000 ffb5 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, OFF_);
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	461a      	mov	r2, r3
 8000e36:	2110      	movs	r1, #16
 8000e38:	4885      	ldr	r0, [pc, #532]	; (8001050 <display7SEG_1+0x304>)
 8000e3a:	f000 ffae 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, OFF_);
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	461a      	mov	r2, r3
 8000e44:	2120      	movs	r1, #32
 8000e46:	4882      	ldr	r0, [pc, #520]	; (8001050 <display7SEG_1+0x304>)
 8000e48:	f000 ffa7 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, OFF_);
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	461a      	mov	r2, r3
 8000e52:	2140      	movs	r1, #64	; 0x40
 8000e54:	487e      	ldr	r0, [pc, #504]	; (8001050 <display7SEG_1+0x304>)
 8000e56:	f000 ffa0 	bl	8001d9a <HAL_GPIO_WritePin>
            break;
 8000e5a:	e1c3      	b.n	80011e4 <display7SEG_1+0x498>

        case 2:
            HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, ON_);
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	461a      	mov	r2, r3
 8000e62:	2101      	movs	r1, #1
 8000e64:	487a      	ldr	r0, [pc, #488]	; (8001050 <display7SEG_1+0x304>)
 8000e66:	f000 ff98 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, ON_);
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	461a      	mov	r2, r3
 8000e70:	2102      	movs	r1, #2
 8000e72:	4877      	ldr	r0, [pc, #476]	; (8001050 <display7SEG_1+0x304>)
 8000e74:	f000 ff91 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, OFF_);
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	2104      	movs	r1, #4
 8000e80:	4873      	ldr	r0, [pc, #460]	; (8001050 <display7SEG_1+0x304>)
 8000e82:	f000 ff8a 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, ON_);
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	2108      	movs	r1, #8
 8000e8e:	4870      	ldr	r0, [pc, #448]	; (8001050 <display7SEG_1+0x304>)
 8000e90:	f000 ff83 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, ON_);
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	461a      	mov	r2, r3
 8000e9a:	2110      	movs	r1, #16
 8000e9c:	486c      	ldr	r0, [pc, #432]	; (8001050 <display7SEG_1+0x304>)
 8000e9e:	f000 ff7c 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, OFF_);
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	2120      	movs	r1, #32
 8000eaa:	4869      	ldr	r0, [pc, #420]	; (8001050 <display7SEG_1+0x304>)
 8000eac:	f000 ff75 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, ON_);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	2140      	movs	r1, #64	; 0x40
 8000eb8:	4865      	ldr	r0, [pc, #404]	; (8001050 <display7SEG_1+0x304>)
 8000eba:	f000 ff6e 	bl	8001d9a <HAL_GPIO_WritePin>
            break;
 8000ebe:	e191      	b.n	80011e4 <display7SEG_1+0x498>

        case 3:
            HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, ON_);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	4861      	ldr	r0, [pc, #388]	; (8001050 <display7SEG_1+0x304>)
 8000eca:	f000 ff66 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, ON_);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	2102      	movs	r1, #2
 8000ed6:	485e      	ldr	r0, [pc, #376]	; (8001050 <display7SEG_1+0x304>)
 8000ed8:	f000 ff5f 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, ON_);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	2104      	movs	r1, #4
 8000ee4:	485a      	ldr	r0, [pc, #360]	; (8001050 <display7SEG_1+0x304>)
 8000ee6:	f000 ff58 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, ON_);
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	461a      	mov	r2, r3
 8000ef0:	2108      	movs	r1, #8
 8000ef2:	4857      	ldr	r0, [pc, #348]	; (8001050 <display7SEG_1+0x304>)
 8000ef4:	f000 ff51 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, OFF_);
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	461a      	mov	r2, r3
 8000efe:	2110      	movs	r1, #16
 8000f00:	4853      	ldr	r0, [pc, #332]	; (8001050 <display7SEG_1+0x304>)
 8000f02:	f000 ff4a 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, OFF_);
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	2120      	movs	r1, #32
 8000f0e:	4850      	ldr	r0, [pc, #320]	; (8001050 <display7SEG_1+0x304>)
 8000f10:	f000 ff43 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, ON_);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	461a      	mov	r2, r3
 8000f1a:	2140      	movs	r1, #64	; 0x40
 8000f1c:	484c      	ldr	r0, [pc, #304]	; (8001050 <display7SEG_1+0x304>)
 8000f1e:	f000 ff3c 	bl	8001d9a <HAL_GPIO_WritePin>
            break;
 8000f22:	e15f      	b.n	80011e4 <display7SEG_1+0x498>

        case 4:
            HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, OFF_);
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	461a      	mov	r2, r3
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	4848      	ldr	r0, [pc, #288]	; (8001050 <display7SEG_1+0x304>)
 8000f2e:	f000 ff34 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, ON_);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	461a      	mov	r2, r3
 8000f38:	2102      	movs	r1, #2
 8000f3a:	4845      	ldr	r0, [pc, #276]	; (8001050 <display7SEG_1+0x304>)
 8000f3c:	f000 ff2d 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, ON_);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	461a      	mov	r2, r3
 8000f46:	2104      	movs	r1, #4
 8000f48:	4841      	ldr	r0, [pc, #260]	; (8001050 <display7SEG_1+0x304>)
 8000f4a:	f000 ff26 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, OFF_);
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	461a      	mov	r2, r3
 8000f54:	2108      	movs	r1, #8
 8000f56:	483e      	ldr	r0, [pc, #248]	; (8001050 <display7SEG_1+0x304>)
 8000f58:	f000 ff1f 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, OFF_);
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	461a      	mov	r2, r3
 8000f62:	2110      	movs	r1, #16
 8000f64:	483a      	ldr	r0, [pc, #232]	; (8001050 <display7SEG_1+0x304>)
 8000f66:	f000 ff18 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, ON_);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	461a      	mov	r2, r3
 8000f70:	2120      	movs	r1, #32
 8000f72:	4837      	ldr	r0, [pc, #220]	; (8001050 <display7SEG_1+0x304>)
 8000f74:	f000 ff11 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, ON_);
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	2140      	movs	r1, #64	; 0x40
 8000f80:	4833      	ldr	r0, [pc, #204]	; (8001050 <display7SEG_1+0x304>)
 8000f82:	f000 ff0a 	bl	8001d9a <HAL_GPIO_WritePin>
            break;
 8000f86:	e12d      	b.n	80011e4 <display7SEG_1+0x498>

        case 5:
            HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, ON_);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	2101      	movs	r1, #1
 8000f90:	482f      	ldr	r0, [pc, #188]	; (8001050 <display7SEG_1+0x304>)
 8000f92:	f000 ff02 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, OFF_);
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	2102      	movs	r1, #2
 8000f9e:	482c      	ldr	r0, [pc, #176]	; (8001050 <display7SEG_1+0x304>)
 8000fa0:	f000 fefb 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, ON_);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	461a      	mov	r2, r3
 8000faa:	2104      	movs	r1, #4
 8000fac:	4828      	ldr	r0, [pc, #160]	; (8001050 <display7SEG_1+0x304>)
 8000fae:	f000 fef4 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, ON_);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	2108      	movs	r1, #8
 8000fba:	4825      	ldr	r0, [pc, #148]	; (8001050 <display7SEG_1+0x304>)
 8000fbc:	f000 feed 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, OFF_);
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	2110      	movs	r1, #16
 8000fc8:	4821      	ldr	r0, [pc, #132]	; (8001050 <display7SEG_1+0x304>)
 8000fca:	f000 fee6 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, ON_);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	2120      	movs	r1, #32
 8000fd6:	481e      	ldr	r0, [pc, #120]	; (8001050 <display7SEG_1+0x304>)
 8000fd8:	f000 fedf 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, ON_);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	2140      	movs	r1, #64	; 0x40
 8000fe4:	481a      	ldr	r0, [pc, #104]	; (8001050 <display7SEG_1+0x304>)
 8000fe6:	f000 fed8 	bl	8001d9a <HAL_GPIO_WritePin>
            break;
 8000fea:	e0fb      	b.n	80011e4 <display7SEG_1+0x498>

        case 6:
            HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, ON_);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	4816      	ldr	r0, [pc, #88]	; (8001050 <display7SEG_1+0x304>)
 8000ff6:	f000 fed0 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, OFF_);
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	461a      	mov	r2, r3
 8001000:	2102      	movs	r1, #2
 8001002:	4813      	ldr	r0, [pc, #76]	; (8001050 <display7SEG_1+0x304>)
 8001004:	f000 fec9 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, ON_);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	b2db      	uxtb	r3, r3
 800100c:	461a      	mov	r2, r3
 800100e:	2104      	movs	r1, #4
 8001010:	480f      	ldr	r0, [pc, #60]	; (8001050 <display7SEG_1+0x304>)
 8001012:	f000 fec2 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, ON_);
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	b2db      	uxtb	r3, r3
 800101a:	461a      	mov	r2, r3
 800101c:	2108      	movs	r1, #8
 800101e:	480c      	ldr	r0, [pc, #48]	; (8001050 <display7SEG_1+0x304>)
 8001020:	f000 febb 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, ON_);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	b2db      	uxtb	r3, r3
 8001028:	461a      	mov	r2, r3
 800102a:	2110      	movs	r1, #16
 800102c:	4808      	ldr	r0, [pc, #32]	; (8001050 <display7SEG_1+0x304>)
 800102e:	f000 feb4 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, ON_);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	461a      	mov	r2, r3
 8001038:	2120      	movs	r1, #32
 800103a:	4805      	ldr	r0, [pc, #20]	; (8001050 <display7SEG_1+0x304>)
 800103c:	f000 fead 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, ON_);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	b2db      	uxtb	r3, r3
 8001044:	461a      	mov	r2, r3
 8001046:	2140      	movs	r1, #64	; 0x40
 8001048:	4801      	ldr	r0, [pc, #4]	; (8001050 <display7SEG_1+0x304>)
 800104a:	f000 fea6 	bl	8001d9a <HAL_GPIO_WritePin>
            break;
 800104e:	e0c9      	b.n	80011e4 <display7SEG_1+0x498>
 8001050:	40010c00 	.word	0x40010c00

        case 7:
            HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, ON_);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	b2db      	uxtb	r3, r3
 8001058:	461a      	mov	r2, r3
 800105a:	2101      	movs	r1, #1
 800105c:	4863      	ldr	r0, [pc, #396]	; (80011ec <display7SEG_1+0x4a0>)
 800105e:	f000 fe9c 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, ON_);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	b2db      	uxtb	r3, r3
 8001066:	461a      	mov	r2, r3
 8001068:	2102      	movs	r1, #2
 800106a:	4860      	ldr	r0, [pc, #384]	; (80011ec <display7SEG_1+0x4a0>)
 800106c:	f000 fe95 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, ON_);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	b2db      	uxtb	r3, r3
 8001074:	461a      	mov	r2, r3
 8001076:	2104      	movs	r1, #4
 8001078:	485c      	ldr	r0, [pc, #368]	; (80011ec <display7SEG_1+0x4a0>)
 800107a:	f000 fe8e 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, OFF_);
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	b2db      	uxtb	r3, r3
 8001082:	461a      	mov	r2, r3
 8001084:	2108      	movs	r1, #8
 8001086:	4859      	ldr	r0, [pc, #356]	; (80011ec <display7SEG_1+0x4a0>)
 8001088:	f000 fe87 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, OFF_);
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	b2db      	uxtb	r3, r3
 8001090:	461a      	mov	r2, r3
 8001092:	2110      	movs	r1, #16
 8001094:	4855      	ldr	r0, [pc, #340]	; (80011ec <display7SEG_1+0x4a0>)
 8001096:	f000 fe80 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, OFF_);
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	b2db      	uxtb	r3, r3
 800109e:	461a      	mov	r2, r3
 80010a0:	2120      	movs	r1, #32
 80010a2:	4852      	ldr	r0, [pc, #328]	; (80011ec <display7SEG_1+0x4a0>)
 80010a4:	f000 fe79 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, OFF_);
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	461a      	mov	r2, r3
 80010ae:	2140      	movs	r1, #64	; 0x40
 80010b0:	484e      	ldr	r0, [pc, #312]	; (80011ec <display7SEG_1+0x4a0>)
 80010b2:	f000 fe72 	bl	8001d9a <HAL_GPIO_WritePin>
            break;
 80010b6:	e095      	b.n	80011e4 <display7SEG_1+0x498>

        case 8:
            HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, ON_);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	461a      	mov	r2, r3
 80010be:	2101      	movs	r1, #1
 80010c0:	484a      	ldr	r0, [pc, #296]	; (80011ec <display7SEG_1+0x4a0>)
 80010c2:	f000 fe6a 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, ON_);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	461a      	mov	r2, r3
 80010cc:	2102      	movs	r1, #2
 80010ce:	4847      	ldr	r0, [pc, #284]	; (80011ec <display7SEG_1+0x4a0>)
 80010d0:	f000 fe63 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, ON_);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	461a      	mov	r2, r3
 80010da:	2104      	movs	r1, #4
 80010dc:	4843      	ldr	r0, [pc, #268]	; (80011ec <display7SEG_1+0x4a0>)
 80010de:	f000 fe5c 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, ON_);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	461a      	mov	r2, r3
 80010e8:	2108      	movs	r1, #8
 80010ea:	4840      	ldr	r0, [pc, #256]	; (80011ec <display7SEG_1+0x4a0>)
 80010ec:	f000 fe55 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, ON_);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	461a      	mov	r2, r3
 80010f6:	2110      	movs	r1, #16
 80010f8:	483c      	ldr	r0, [pc, #240]	; (80011ec <display7SEG_1+0x4a0>)
 80010fa:	f000 fe4e 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, ON_);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	b2db      	uxtb	r3, r3
 8001102:	461a      	mov	r2, r3
 8001104:	2120      	movs	r1, #32
 8001106:	4839      	ldr	r0, [pc, #228]	; (80011ec <display7SEG_1+0x4a0>)
 8001108:	f000 fe47 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, ON_);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	b2db      	uxtb	r3, r3
 8001110:	461a      	mov	r2, r3
 8001112:	2140      	movs	r1, #64	; 0x40
 8001114:	4835      	ldr	r0, [pc, #212]	; (80011ec <display7SEG_1+0x4a0>)
 8001116:	f000 fe40 	bl	8001d9a <HAL_GPIO_WritePin>
            break;
 800111a:	e063      	b.n	80011e4 <display7SEG_1+0x498>

        case 9:
            HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, ON_);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	b2db      	uxtb	r3, r3
 8001120:	461a      	mov	r2, r3
 8001122:	2101      	movs	r1, #1
 8001124:	4831      	ldr	r0, [pc, #196]	; (80011ec <display7SEG_1+0x4a0>)
 8001126:	f000 fe38 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, ON_);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	b2db      	uxtb	r3, r3
 800112e:	461a      	mov	r2, r3
 8001130:	2102      	movs	r1, #2
 8001132:	482e      	ldr	r0, [pc, #184]	; (80011ec <display7SEG_1+0x4a0>)
 8001134:	f000 fe31 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, ON_);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	461a      	mov	r2, r3
 800113e:	2104      	movs	r1, #4
 8001140:	482a      	ldr	r0, [pc, #168]	; (80011ec <display7SEG_1+0x4a0>)
 8001142:	f000 fe2a 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, ON_);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	b2db      	uxtb	r3, r3
 800114a:	461a      	mov	r2, r3
 800114c:	2108      	movs	r1, #8
 800114e:	4827      	ldr	r0, [pc, #156]	; (80011ec <display7SEG_1+0x4a0>)
 8001150:	f000 fe23 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, OFF_);
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	b2db      	uxtb	r3, r3
 8001158:	461a      	mov	r2, r3
 800115a:	2110      	movs	r1, #16
 800115c:	4823      	ldr	r0, [pc, #140]	; (80011ec <display7SEG_1+0x4a0>)
 800115e:	f000 fe1c 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, ON_);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	b2db      	uxtb	r3, r3
 8001166:	461a      	mov	r2, r3
 8001168:	2120      	movs	r1, #32
 800116a:	4820      	ldr	r0, [pc, #128]	; (80011ec <display7SEG_1+0x4a0>)
 800116c:	f000 fe15 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, ON_);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	b2db      	uxtb	r3, r3
 8001174:	461a      	mov	r2, r3
 8001176:	2140      	movs	r1, #64	; 0x40
 8001178:	481c      	ldr	r0, [pc, #112]	; (80011ec <display7SEG_1+0x4a0>)
 800117a:	f000 fe0e 	bl	8001d9a <HAL_GPIO_WritePin>
            break;
 800117e:	e031      	b.n	80011e4 <display7SEG_1+0x498>

        default:
            HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, OFF_);
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	b2db      	uxtb	r3, r3
 8001184:	461a      	mov	r2, r3
 8001186:	2101      	movs	r1, #1
 8001188:	4818      	ldr	r0, [pc, #96]	; (80011ec <display7SEG_1+0x4a0>)
 800118a:	f000 fe06 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, OFF_);
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	b2db      	uxtb	r3, r3
 8001192:	461a      	mov	r2, r3
 8001194:	2102      	movs	r1, #2
 8001196:	4815      	ldr	r0, [pc, #84]	; (80011ec <display7SEG_1+0x4a0>)
 8001198:	f000 fdff 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, OFF_);
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	461a      	mov	r2, r3
 80011a2:	2104      	movs	r1, #4
 80011a4:	4811      	ldr	r0, [pc, #68]	; (80011ec <display7SEG_1+0x4a0>)
 80011a6:	f000 fdf8 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, OFF_);
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	461a      	mov	r2, r3
 80011b0:	2108      	movs	r1, #8
 80011b2:	480e      	ldr	r0, [pc, #56]	; (80011ec <display7SEG_1+0x4a0>)
 80011b4:	f000 fdf1 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, OFF_);
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	461a      	mov	r2, r3
 80011be:	2110      	movs	r1, #16
 80011c0:	480a      	ldr	r0, [pc, #40]	; (80011ec <display7SEG_1+0x4a0>)
 80011c2:	f000 fdea 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, OFF_);
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	461a      	mov	r2, r3
 80011cc:	2120      	movs	r1, #32
 80011ce:	4807      	ldr	r0, [pc, #28]	; (80011ec <display7SEG_1+0x4a0>)
 80011d0:	f000 fde3 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, OFF_);
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	461a      	mov	r2, r3
 80011da:	2140      	movs	r1, #64	; 0x40
 80011dc:	4803      	ldr	r0, [pc, #12]	; (80011ec <display7SEG_1+0x4a0>)
 80011de:	f000 fddc 	bl	8001d9a <HAL_GPIO_WritePin>
            break;
 80011e2:	bf00      	nop
    }
}
 80011e4:	bf00      	nop
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40010c00 	.word	0x40010c00

080011f0 <update_7SEGs>:

extern void update_7SEGs(void)
{   
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
    const int ON = 1, OFF = 0;
 80011f6:	2301      	movs	r3, #1
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	2300      	movs	r3, #0
 80011fc:	603b      	str	r3, [r7, #0]
    static int flag = 0;

    switch(flag)
 80011fe:	4b43      	ldr	r3, [pc, #268]	; (800130c <update_7SEGs+0x11c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d002      	beq.n	800120c <update_7SEGs+0x1c>
 8001206:	2b01      	cmp	r3, #1
 8001208:	d039      	beq.n	800127e <update_7SEGs+0x8e>
            display7SEG_0(SEG7_buffer[0] % 10);
            display7SEG_1(SEG7_buffer[1] % 10);
            flag = 0;
            break;
    }
}
 800120a:	e07b      	b.n	8001304 <update_7SEGs+0x114>
            HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, ON);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	b2db      	uxtb	r3, r3
 8001210:	461a      	mov	r2, r3
 8001212:	2180      	movs	r1, #128	; 0x80
 8001214:	483e      	ldr	r0, [pc, #248]	; (8001310 <update_7SEGs+0x120>)
 8001216:	f000 fdc0 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, ON);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	b2db      	uxtb	r3, r3
 800121e:	461a      	mov	r2, r3
 8001220:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001224:	483a      	ldr	r0, [pc, #232]	; (8001310 <update_7SEGs+0x120>)
 8001226:	f000 fdb8 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, OFF);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	b2db      	uxtb	r3, r3
 800122e:	461a      	mov	r2, r3
 8001230:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001234:	4836      	ldr	r0, [pc, #216]	; (8001310 <update_7SEGs+0x120>)
 8001236:	f000 fdb0 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, OFF);
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	b2db      	uxtb	r3, r3
 800123e:	461a      	mov	r2, r3
 8001240:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001244:	4832      	ldr	r0, [pc, #200]	; (8001310 <update_7SEGs+0x120>)
 8001246:	f000 fda8 	bl	8001d9a <HAL_GPIO_WritePin>
            display7SEG_0(SEG7_buffer[0] / 10);
 800124a:	4b32      	ldr	r3, [pc, #200]	; (8001314 <update_7SEGs+0x124>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a32      	ldr	r2, [pc, #200]	; (8001318 <update_7SEGs+0x128>)
 8001250:	fb82 1203 	smull	r1, r2, r2, r3
 8001254:	1092      	asrs	r2, r2, #2
 8001256:	17db      	asrs	r3, r3, #31
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff fade 	bl	800081c <display7SEG_0>
            display7SEG_1(SEG7_buffer[1] / 10);
 8001260:	4b2c      	ldr	r3, [pc, #176]	; (8001314 <update_7SEGs+0x124>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	4a2c      	ldr	r2, [pc, #176]	; (8001318 <update_7SEGs+0x128>)
 8001266:	fb82 1203 	smull	r1, r2, r2, r3
 800126a:	1092      	asrs	r2, r2, #2
 800126c:	17db      	asrs	r3, r3, #31
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fd6b 	bl	8000d4c <display7SEG_1>
            flag = 1;
 8001276:	4b25      	ldr	r3, [pc, #148]	; (800130c <update_7SEGs+0x11c>)
 8001278:	2201      	movs	r2, #1
 800127a:	601a      	str	r2, [r3, #0]
            break;
 800127c:	e042      	b.n	8001304 <update_7SEGs+0x114>
            HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, OFF);
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	b2db      	uxtb	r3, r3
 8001282:	461a      	mov	r2, r3
 8001284:	2180      	movs	r1, #128	; 0x80
 8001286:	4822      	ldr	r0, [pc, #136]	; (8001310 <update_7SEGs+0x120>)
 8001288:	f000 fd87 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, OFF);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	b2db      	uxtb	r3, r3
 8001290:	461a      	mov	r2, r3
 8001292:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001296:	481e      	ldr	r0, [pc, #120]	; (8001310 <update_7SEGs+0x120>)
 8001298:	f000 fd7f 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, ON);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	461a      	mov	r2, r3
 80012a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012a6:	481a      	ldr	r0, [pc, #104]	; (8001310 <update_7SEGs+0x120>)
 80012a8:	f000 fd77 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, ON);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	461a      	mov	r2, r3
 80012b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012b6:	4816      	ldr	r0, [pc, #88]	; (8001310 <update_7SEGs+0x120>)
 80012b8:	f000 fd6f 	bl	8001d9a <HAL_GPIO_WritePin>
            display7SEG_0(SEG7_buffer[0] % 10);
 80012bc:	4b15      	ldr	r3, [pc, #84]	; (8001314 <update_7SEGs+0x124>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b15      	ldr	r3, [pc, #84]	; (8001318 <update_7SEGs+0x128>)
 80012c2:	fb83 1302 	smull	r1, r3, r3, r2
 80012c6:	1099      	asrs	r1, r3, #2
 80012c8:	17d3      	asrs	r3, r2, #31
 80012ca:	1ac9      	subs	r1, r1, r3
 80012cc:	460b      	mov	r3, r1
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	440b      	add	r3, r1
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	1ad1      	subs	r1, r2, r3
 80012d6:	4608      	mov	r0, r1
 80012d8:	f7ff faa0 	bl	800081c <display7SEG_0>
            display7SEG_1(SEG7_buffer[1] % 10);
 80012dc:	4b0d      	ldr	r3, [pc, #52]	; (8001314 <update_7SEGs+0x124>)
 80012de:	685a      	ldr	r2, [r3, #4]
 80012e0:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <update_7SEGs+0x128>)
 80012e2:	fb83 1302 	smull	r1, r3, r3, r2
 80012e6:	1099      	asrs	r1, r3, #2
 80012e8:	17d3      	asrs	r3, r2, #31
 80012ea:	1ac9      	subs	r1, r1, r3
 80012ec:	460b      	mov	r3, r1
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	440b      	add	r3, r1
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	1ad1      	subs	r1, r2, r3
 80012f6:	4608      	mov	r0, r1
 80012f8:	f7ff fd28 	bl	8000d4c <display7SEG_1>
            flag = 0;
 80012fc:	4b03      	ldr	r3, [pc, #12]	; (800130c <update_7SEGs+0x11c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
            break;
 8001302:	bf00      	nop
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000088 	.word	0x20000088
 8001310:	40010c00 	.word	0x40010c00
 8001314:	20000080 	.word	0x20000080
 8001318:	66666667 	.word	0x66666667

0800131c <traffic_light_fsm>:

void traffic_light_fsm(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
    static int               counter0   = 5;

    static TrafficLightState state1     = GREEN;
    static int               counter1   = 3;

    switch (state0)
 8001320:	4b7d      	ldr	r3, [pc, #500]	; (8001518 <traffic_light_fsm+0x1fc>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b02      	cmp	r3, #2
 8001326:	d029      	beq.n	800137c <traffic_light_fsm+0x60>
 8001328:	2b02      	cmp	r3, #2
 800132a:	dc6f      	bgt.n	800140c <traffic_light_fsm+0xf0>
 800132c:	2b00      	cmp	r3, #0
 800132e:	d049      	beq.n	80013c4 <traffic_light_fsm+0xa8>
 8001330:	2b01      	cmp	r3, #1
 8001332:	d16b      	bne.n	800140c <traffic_light_fsm+0xf0>
    {
        case GREEN:
            HAL_GPIO_WritePin(RED0_GPIO_Port, RED0_Pin, 0);
 8001334:	2200      	movs	r2, #0
 8001336:	2120      	movs	r1, #32
 8001338:	4878      	ldr	r0, [pc, #480]	; (800151c <traffic_light_fsm+0x200>)
 800133a:	f000 fd2e 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(YELLOW0_GPIO_Port, YELLOW0_Pin, 0);
 800133e:	2200      	movs	r2, #0
 8001340:	2140      	movs	r1, #64	; 0x40
 8001342:	4876      	ldr	r0, [pc, #472]	; (800151c <traffic_light_fsm+0x200>)
 8001344:	f000 fd29 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GREEN0_GPIO_Port, GREEN0_Pin, 1);
 8001348:	2201      	movs	r2, #1
 800134a:	2180      	movs	r1, #128	; 0x80
 800134c:	4873      	ldr	r0, [pc, #460]	; (800151c <traffic_light_fsm+0x200>)
 800134e:	f000 fd24 	bl	8001d9a <HAL_GPIO_WritePin>

            SEG7_buffer[0] = --counter0;
 8001352:	4b73      	ldr	r3, [pc, #460]	; (8001520 <traffic_light_fsm+0x204>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	3b01      	subs	r3, #1
 8001358:	4a71      	ldr	r2, [pc, #452]	; (8001520 <traffic_light_fsm+0x204>)
 800135a:	6013      	str	r3, [r2, #0]
 800135c:	4b70      	ldr	r3, [pc, #448]	; (8001520 <traffic_light_fsm+0x204>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a70      	ldr	r2, [pc, #448]	; (8001524 <traffic_light_fsm+0x208>)
 8001362:	6013      	str	r3, [r2, #0]
            if (counter0 <= 0)
 8001364:	4b6e      	ldr	r3, [pc, #440]	; (8001520 <traffic_light_fsm+0x204>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	dc51      	bgt.n	8001410 <traffic_light_fsm+0xf4>
            {
                state0 = YELLOW;
 800136c:	4b6a      	ldr	r3, [pc, #424]	; (8001518 <traffic_light_fsm+0x1fc>)
 800136e:	2202      	movs	r2, #2
 8001370:	701a      	strb	r2, [r3, #0]
                counter0 = YELLOW_light_counter;
 8001372:	4b6d      	ldr	r3, [pc, #436]	; (8001528 <traffic_light_fsm+0x20c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a6a      	ldr	r2, [pc, #424]	; (8001520 <traffic_light_fsm+0x204>)
 8001378:	6013      	str	r3, [r2, #0]
            }
            break;
 800137a:	e049      	b.n	8001410 <traffic_light_fsm+0xf4>
        
        case YELLOW:
            HAL_GPIO_WritePin(RED0_GPIO_Port, RED0_Pin, 0);
 800137c:	2200      	movs	r2, #0
 800137e:	2120      	movs	r1, #32
 8001380:	4866      	ldr	r0, [pc, #408]	; (800151c <traffic_light_fsm+0x200>)
 8001382:	f000 fd0a 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(YELLOW0_GPIO_Port, YELLOW0_Pin, 1);
 8001386:	2201      	movs	r2, #1
 8001388:	2140      	movs	r1, #64	; 0x40
 800138a:	4864      	ldr	r0, [pc, #400]	; (800151c <traffic_light_fsm+0x200>)
 800138c:	f000 fd05 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GREEN0_GPIO_Port, GREEN0_Pin, 0);
 8001390:	2200      	movs	r2, #0
 8001392:	2180      	movs	r1, #128	; 0x80
 8001394:	4861      	ldr	r0, [pc, #388]	; (800151c <traffic_light_fsm+0x200>)
 8001396:	f000 fd00 	bl	8001d9a <HAL_GPIO_WritePin>

            SEG7_buffer[0] = --counter0;
 800139a:	4b61      	ldr	r3, [pc, #388]	; (8001520 <traffic_light_fsm+0x204>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	3b01      	subs	r3, #1
 80013a0:	4a5f      	ldr	r2, [pc, #380]	; (8001520 <traffic_light_fsm+0x204>)
 80013a2:	6013      	str	r3, [r2, #0]
 80013a4:	4b5e      	ldr	r3, [pc, #376]	; (8001520 <traffic_light_fsm+0x204>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a5e      	ldr	r2, [pc, #376]	; (8001524 <traffic_light_fsm+0x208>)
 80013aa:	6013      	str	r3, [r2, #0]
            if (counter0 <= 0)
 80013ac:	4b5c      	ldr	r3, [pc, #368]	; (8001520 <traffic_light_fsm+0x204>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	dc2f      	bgt.n	8001414 <traffic_light_fsm+0xf8>
            {
                state0 = RED;
 80013b4:	4b58      	ldr	r3, [pc, #352]	; (8001518 <traffic_light_fsm+0x1fc>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	701a      	strb	r2, [r3, #0]
                counter0 = RED_light_counter;
 80013ba:	4b5c      	ldr	r3, [pc, #368]	; (800152c <traffic_light_fsm+0x210>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a58      	ldr	r2, [pc, #352]	; (8001520 <traffic_light_fsm+0x204>)
 80013c0:	6013      	str	r3, [r2, #0]
            }
            break;
 80013c2:	e027      	b.n	8001414 <traffic_light_fsm+0xf8>
        
        case RED:
            HAL_GPIO_WritePin(RED0_GPIO_Port, RED0_Pin, 1);
 80013c4:	2201      	movs	r2, #1
 80013c6:	2120      	movs	r1, #32
 80013c8:	4854      	ldr	r0, [pc, #336]	; (800151c <traffic_light_fsm+0x200>)
 80013ca:	f000 fce6 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(YELLOW0_GPIO_Port, YELLOW0_Pin, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2140      	movs	r1, #64	; 0x40
 80013d2:	4852      	ldr	r0, [pc, #328]	; (800151c <traffic_light_fsm+0x200>)
 80013d4:	f000 fce1 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GREEN0_GPIO_Port, GREEN0_Pin, 0);
 80013d8:	2200      	movs	r2, #0
 80013da:	2180      	movs	r1, #128	; 0x80
 80013dc:	484f      	ldr	r0, [pc, #316]	; (800151c <traffic_light_fsm+0x200>)
 80013de:	f000 fcdc 	bl	8001d9a <HAL_GPIO_WritePin>

            SEG7_buffer[0] = --counter0;
 80013e2:	4b4f      	ldr	r3, [pc, #316]	; (8001520 <traffic_light_fsm+0x204>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	4a4d      	ldr	r2, [pc, #308]	; (8001520 <traffic_light_fsm+0x204>)
 80013ea:	6013      	str	r3, [r2, #0]
 80013ec:	4b4c      	ldr	r3, [pc, #304]	; (8001520 <traffic_light_fsm+0x204>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a4c      	ldr	r2, [pc, #304]	; (8001524 <traffic_light_fsm+0x208>)
 80013f2:	6013      	str	r3, [r2, #0]
            if (counter0 <= 0)
 80013f4:	4b4a      	ldr	r3, [pc, #296]	; (8001520 <traffic_light_fsm+0x204>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	dc0d      	bgt.n	8001418 <traffic_light_fsm+0xfc>
            {
                state0 = GREEN;
 80013fc:	4b46      	ldr	r3, [pc, #280]	; (8001518 <traffic_light_fsm+0x1fc>)
 80013fe:	2201      	movs	r2, #1
 8001400:	701a      	strb	r2, [r3, #0]
                counter0 = GREEN_light_counter;
 8001402:	4b4b      	ldr	r3, [pc, #300]	; (8001530 <traffic_light_fsm+0x214>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a46      	ldr	r2, [pc, #280]	; (8001520 <traffic_light_fsm+0x204>)
 8001408:	6013      	str	r3, [r2, #0]
            }
            break;
 800140a:	e005      	b.n	8001418 <traffic_light_fsm+0xfc>
        
        default:
            break;
 800140c:	bf00      	nop
 800140e:	e004      	b.n	800141a <traffic_light_fsm+0xfe>
            break;
 8001410:	bf00      	nop
 8001412:	e002      	b.n	800141a <traffic_light_fsm+0xfe>
            break;
 8001414:	bf00      	nop
 8001416:	e000      	b.n	800141a <traffic_light_fsm+0xfe>
            break;
 8001418:	bf00      	nop
    }


    switch (state1)
 800141a:	4b46      	ldr	r3, [pc, #280]	; (8001534 <traffic_light_fsm+0x218>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	2b02      	cmp	r3, #2
 8001420:	d029      	beq.n	8001476 <traffic_light_fsm+0x15a>
 8001422:	2b02      	cmp	r3, #2
 8001424:	dc6f      	bgt.n	8001506 <traffic_light_fsm+0x1ea>
 8001426:	2b00      	cmp	r3, #0
 8001428:	d049      	beq.n	80014be <traffic_light_fsm+0x1a2>
 800142a:	2b01      	cmp	r3, #1
 800142c:	d16b      	bne.n	8001506 <traffic_light_fsm+0x1ea>
    {
        case GREEN:
            HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, 0);
 800142e:	2200      	movs	r2, #0
 8001430:	2108      	movs	r1, #8
 8001432:	483a      	ldr	r0, [pc, #232]	; (800151c <traffic_light_fsm+0x200>)
 8001434:	f000 fcb1 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, 0);
 8001438:	2200      	movs	r2, #0
 800143a:	2104      	movs	r1, #4
 800143c:	4837      	ldr	r0, [pc, #220]	; (800151c <traffic_light_fsm+0x200>)
 800143e:	f000 fcac 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, 1);
 8001442:	2201      	movs	r2, #1
 8001444:	2102      	movs	r1, #2
 8001446:	4835      	ldr	r0, [pc, #212]	; (800151c <traffic_light_fsm+0x200>)
 8001448:	f000 fca7 	bl	8001d9a <HAL_GPIO_WritePin>

            SEG7_buffer[1] = --counter1;
 800144c:	4b3a      	ldr	r3, [pc, #232]	; (8001538 <traffic_light_fsm+0x21c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	3b01      	subs	r3, #1
 8001452:	4a39      	ldr	r2, [pc, #228]	; (8001538 <traffic_light_fsm+0x21c>)
 8001454:	6013      	str	r3, [r2, #0]
 8001456:	4b38      	ldr	r3, [pc, #224]	; (8001538 <traffic_light_fsm+0x21c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a32      	ldr	r2, [pc, #200]	; (8001524 <traffic_light_fsm+0x208>)
 800145c:	6053      	str	r3, [r2, #4]
            if (counter1 <= 0)
 800145e:	4b36      	ldr	r3, [pc, #216]	; (8001538 <traffic_light_fsm+0x21c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	dc51      	bgt.n	800150a <traffic_light_fsm+0x1ee>
            {
                state1 = YELLOW;
 8001466:	4b33      	ldr	r3, [pc, #204]	; (8001534 <traffic_light_fsm+0x218>)
 8001468:	2202      	movs	r2, #2
 800146a:	701a      	strb	r2, [r3, #0]
                counter1 = YELLOW_light_counter;
 800146c:	4b2e      	ldr	r3, [pc, #184]	; (8001528 <traffic_light_fsm+0x20c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a31      	ldr	r2, [pc, #196]	; (8001538 <traffic_light_fsm+0x21c>)
 8001472:	6013      	str	r3, [r2, #0]
            }
            break;
 8001474:	e049      	b.n	800150a <traffic_light_fsm+0x1ee>
        
        case YELLOW:
            HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2108      	movs	r1, #8
 800147a:	4828      	ldr	r0, [pc, #160]	; (800151c <traffic_light_fsm+0x200>)
 800147c:	f000 fc8d 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, 1);
 8001480:	2201      	movs	r2, #1
 8001482:	2104      	movs	r1, #4
 8001484:	4825      	ldr	r0, [pc, #148]	; (800151c <traffic_light_fsm+0x200>)
 8001486:	f000 fc88 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, 0);
 800148a:	2200      	movs	r2, #0
 800148c:	2102      	movs	r1, #2
 800148e:	4823      	ldr	r0, [pc, #140]	; (800151c <traffic_light_fsm+0x200>)
 8001490:	f000 fc83 	bl	8001d9a <HAL_GPIO_WritePin>

            SEG7_buffer[1] = --counter1;
 8001494:	4b28      	ldr	r3, [pc, #160]	; (8001538 <traffic_light_fsm+0x21c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	3b01      	subs	r3, #1
 800149a:	4a27      	ldr	r2, [pc, #156]	; (8001538 <traffic_light_fsm+0x21c>)
 800149c:	6013      	str	r3, [r2, #0]
 800149e:	4b26      	ldr	r3, [pc, #152]	; (8001538 <traffic_light_fsm+0x21c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a20      	ldr	r2, [pc, #128]	; (8001524 <traffic_light_fsm+0x208>)
 80014a4:	6053      	str	r3, [r2, #4]
            if (counter1 <= 0)
 80014a6:	4b24      	ldr	r3, [pc, #144]	; (8001538 <traffic_light_fsm+0x21c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	dc2f      	bgt.n	800150e <traffic_light_fsm+0x1f2>
            {
                state1 = RED;
 80014ae:	4b21      	ldr	r3, [pc, #132]	; (8001534 <traffic_light_fsm+0x218>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	701a      	strb	r2, [r3, #0]
                counter1 = RED_light_counter;
 80014b4:	4b1d      	ldr	r3, [pc, #116]	; (800152c <traffic_light_fsm+0x210>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a1f      	ldr	r2, [pc, #124]	; (8001538 <traffic_light_fsm+0x21c>)
 80014ba:	6013      	str	r3, [r2, #0]
            }
            break;
 80014bc:	e027      	b.n	800150e <traffic_light_fsm+0x1f2>
        
        case RED:
            HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, 1);
 80014be:	2201      	movs	r2, #1
 80014c0:	2108      	movs	r1, #8
 80014c2:	4816      	ldr	r0, [pc, #88]	; (800151c <traffic_light_fsm+0x200>)
 80014c4:	f000 fc69 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, 0);
 80014c8:	2200      	movs	r2, #0
 80014ca:	2104      	movs	r1, #4
 80014cc:	4813      	ldr	r0, [pc, #76]	; (800151c <traffic_light_fsm+0x200>)
 80014ce:	f000 fc64 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, 0);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2102      	movs	r1, #2
 80014d6:	4811      	ldr	r0, [pc, #68]	; (800151c <traffic_light_fsm+0x200>)
 80014d8:	f000 fc5f 	bl	8001d9a <HAL_GPIO_WritePin>

            SEG7_buffer[1] = --counter1;
 80014dc:	4b16      	ldr	r3, [pc, #88]	; (8001538 <traffic_light_fsm+0x21c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	3b01      	subs	r3, #1
 80014e2:	4a15      	ldr	r2, [pc, #84]	; (8001538 <traffic_light_fsm+0x21c>)
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	4b14      	ldr	r3, [pc, #80]	; (8001538 <traffic_light_fsm+0x21c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a0e      	ldr	r2, [pc, #56]	; (8001524 <traffic_light_fsm+0x208>)
 80014ec:	6053      	str	r3, [r2, #4]
            if (counter1 <= 0)
 80014ee:	4b12      	ldr	r3, [pc, #72]	; (8001538 <traffic_light_fsm+0x21c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	dc0d      	bgt.n	8001512 <traffic_light_fsm+0x1f6>
            {
                state1 = GREEN;
 80014f6:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <traffic_light_fsm+0x218>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	701a      	strb	r2, [r3, #0]
                counter1 = GREEN_light_counter;
 80014fc:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <traffic_light_fsm+0x214>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a0d      	ldr	r2, [pc, #52]	; (8001538 <traffic_light_fsm+0x21c>)
 8001502:	6013      	str	r3, [r2, #0]
            }
            break;
 8001504:	e005      	b.n	8001512 <traffic_light_fsm+0x1f6>
        
        default:
            break;
 8001506:	bf00      	nop
 8001508:	e004      	b.n	8001514 <traffic_light_fsm+0x1f8>
            break;
 800150a:	bf00      	nop
 800150c:	e002      	b.n	8001514 <traffic_light_fsm+0x1f8>
            break;
 800150e:	bf00      	nop
 8001510:	e000      	b.n	8001514 <traffic_light_fsm+0x1f8>
            break;
 8001512:	bf00      	nop
    }
}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}
 8001518:	2000008c 	.word	0x2000008c
 800151c:	40010800 	.word	0x40010800
 8001520:	2000003c 	.word	0x2000003c
 8001524:	20000080 	.word	0x20000080
 8001528:	20000034 	.word	0x20000034
 800152c:	20000038 	.word	0x20000038
 8001530:	20000030 	.word	0x20000030
 8001534:	20000040 	.word	0x20000040
 8001538:	20000044 	.word	0x20000044

0800153c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001542:	4b15      	ldr	r3, [pc, #84]	; (8001598 <HAL_MspInit+0x5c>)
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	4a14      	ldr	r2, [pc, #80]	; (8001598 <HAL_MspInit+0x5c>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	6193      	str	r3, [r2, #24]
 800154e:	4b12      	ldr	r3, [pc, #72]	; (8001598 <HAL_MspInit+0x5c>)
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800155a:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <HAL_MspInit+0x5c>)
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	4a0e      	ldr	r2, [pc, #56]	; (8001598 <HAL_MspInit+0x5c>)
 8001560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001564:	61d3      	str	r3, [r2, #28]
 8001566:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <HAL_MspInit+0x5c>)
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001572:	4b0a      	ldr	r3, [pc, #40]	; (800159c <HAL_MspInit+0x60>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	4a04      	ldr	r2, [pc, #16]	; (800159c <HAL_MspInit+0x60>)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158e:	bf00      	nop
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr
 8001598:	40021000 	.word	0x40021000
 800159c:	40010000 	.word	0x40010000

080015a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015b0:	d113      	bne.n	80015da <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015b2:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <HAL_TIM_Base_MspInit+0x44>)
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	4a0b      	ldr	r2, [pc, #44]	; (80015e4 <HAL_TIM_Base_MspInit+0x44>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	61d3      	str	r3, [r2, #28]
 80015be:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <HAL_TIM_Base_MspInit+0x44>)
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2100      	movs	r1, #0
 80015ce:	201c      	movs	r0, #28
 80015d0:	f000 fa1b 	bl	8001a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015d4:	201c      	movs	r0, #28
 80015d6:	f000 fa34 	bl	8001a42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015da:	bf00      	nop
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40021000 	.word	0x40021000

080015e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015ec:	e7fe      	b.n	80015ec <NMI_Handler+0x4>

080015ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015f2:	e7fe      	b.n	80015f2 <HardFault_Handler+0x4>

080015f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <MemManage_Handler+0x4>

080015fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015fe:	e7fe      	b.n	80015fe <BusFault_Handler+0x4>

08001600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001604:	e7fe      	b.n	8001604 <UsageFault_Handler+0x4>

08001606 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr

08001612 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr

0800161e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr

0800162a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800162e:	f000 f8f9 	bl	8001824 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800163c:	4802      	ldr	r0, [pc, #8]	; (8001648 <TIM2_IRQHandler+0x10>)
 800163e:	f001 f855 	bl	80026ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200000ac 	.word	0x200000ac

0800164c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr

08001658 <timer_run>:

static int timer2_counter = 0;
int timer2_flag = 0;

static void timer_run (void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
	if( timer0_counter > 0)
 800165c:	4b19      	ldr	r3, [pc, #100]	; (80016c4 <timer_run+0x6c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	dd0b      	ble.n	800167c <timer_run+0x24>
	{
		timer0_counter--;
 8001664:	4b17      	ldr	r3, [pc, #92]	; (80016c4 <timer_run+0x6c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	3b01      	subs	r3, #1
 800166a:	4a16      	ldr	r2, [pc, #88]	; (80016c4 <timer_run+0x6c>)
 800166c:	6013      	str	r3, [r2, #0]
		if( timer0_counter <= 0) timer0_flag = 1; //turn on the flag, the function will run
 800166e:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <timer_run+0x6c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	dc02      	bgt.n	800167c <timer_run+0x24>
 8001676:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <timer_run+0x70>)
 8001678:	2201      	movs	r2, #1
 800167a:	601a      	str	r2, [r3, #0]
	}
	if( timer1_counter > 0)
 800167c:	4b13      	ldr	r3, [pc, #76]	; (80016cc <timer_run+0x74>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	dd0b      	ble.n	800169c <timer_run+0x44>
	{
		timer1_counter--;
 8001684:	4b11      	ldr	r3, [pc, #68]	; (80016cc <timer_run+0x74>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	3b01      	subs	r3, #1
 800168a:	4a10      	ldr	r2, [pc, #64]	; (80016cc <timer_run+0x74>)
 800168c:	6013      	str	r3, [r2, #0]
		if( timer1_counter <= 0) timer1_flag = 1; //turn on the flag, the function will run
 800168e:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <timer_run+0x74>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	dc02      	bgt.n	800169c <timer_run+0x44>
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <timer_run+0x78>)
 8001698:	2201      	movs	r2, #1
 800169a:	601a      	str	r2, [r3, #0]
	}
	if( timer2_counter > 0)
 800169c:	4b0d      	ldr	r3, [pc, #52]	; (80016d4 <timer_run+0x7c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	dd0b      	ble.n	80016bc <timer_run+0x64>
	{
		timer2_counter--;
 80016a4:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <timer_run+0x7c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	3b01      	subs	r3, #1
 80016aa:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <timer_run+0x7c>)
 80016ac:	6013      	str	r3, [r2, #0]
		if( timer2_counter <= 0) timer2_flag = 1; //turn on the flag, the function will run
 80016ae:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <timer_run+0x7c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	dc02      	bgt.n	80016bc <timer_run+0x64>
 80016b6:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <timer_run+0x80>)
 80016b8:	2201      	movs	r2, #1
 80016ba:	601a      	str	r2, [r3, #0]
	}
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr
 80016c4:	2000009c 	.word	0x2000009c
 80016c8:	20000090 	.word	0x20000090
 80016cc:	200000a0 	.word	0x200000a0
 80016d0:	20000094 	.word	0x20000094
 80016d4:	200000a4 	.word	0x200000a4
 80016d8:	20000098 	.word	0x20000098

080016dc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
	get_BUTTONs();
 80016e4:	f7fe fd68 	bl	80001b8 <get_BUTTONs>
	timer_run();
 80016e8:	f7ff ffb6 	bl	8001658 <timer_run>
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <setTimer0>:



void setTimer0 ( int duration ) //to reset the timer.
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
	timer0_counter = duration / TIMER_CYCLE ; //the duration must be a divisor of hardware timer period
 80016fc:	220a      	movs	r2, #10
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	fb93 f3f2 	sdiv	r3, r3, r2
 8001704:	4a04      	ldr	r2, [pc, #16]	; (8001718 <setTimer0+0x24>)
 8001706:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 8001708:	4b04      	ldr	r3, [pc, #16]	; (800171c <setTimer0+0x28>)
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr
 8001718:	2000009c 	.word	0x2000009c
 800171c:	20000090 	.word	0x20000090

08001720 <setTimer1>:
void setTimer1 ( int duration ) //to reset the timer.
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE ; //the duration must be a divisor of hardware timer period
 8001728:	220a      	movs	r2, #10
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	fb93 f3f2 	sdiv	r3, r3, r2
 8001730:	4a04      	ldr	r2, [pc, #16]	; (8001744 <setTimer1+0x24>)
 8001732:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001734:	4b04      	ldr	r3, [pc, #16]	; (8001748 <setTimer1+0x28>)
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr
 8001744:	200000a0 	.word	0x200000a0
 8001748:	20000094 	.word	0x20000094

0800174c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800174c:	f7ff ff7e 	bl	800164c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001750:	480b      	ldr	r0, [pc, #44]	; (8001780 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001752:	490c      	ldr	r1, [pc, #48]	; (8001784 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001754:	4a0c      	ldr	r2, [pc, #48]	; (8001788 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001758:	e002      	b.n	8001760 <LoopCopyDataInit>

0800175a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800175a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800175c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800175e:	3304      	adds	r3, #4

08001760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001764:	d3f9      	bcc.n	800175a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001766:	4a09      	ldr	r2, [pc, #36]	; (800178c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001768:	4c09      	ldr	r4, [pc, #36]	; (8001790 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800176a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800176c:	e001      	b.n	8001772 <LoopFillZerobss>

0800176e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800176e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001770:	3204      	adds	r2, #4

08001772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001774:	d3fb      	bcc.n	800176e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001776:	f001 fb05 	bl	8002d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800177a:	f7fe ff25 	bl	80005c8 <main>
  bx lr
 800177e:	4770      	bx	lr
  ldr r0, =_sdata
 8001780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001784:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8001788:	08002e20 	.word	0x08002e20
  ldr r2, =_sbss
 800178c:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8001790:	200000f8 	.word	0x200000f8

08001794 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001794:	e7fe      	b.n	8001794 <ADC1_2_IRQHandler>
	...

08001798 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800179c:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <HAL_Init+0x28>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a07      	ldr	r2, [pc, #28]	; (80017c0 <HAL_Init+0x28>)
 80017a2:	f043 0310 	orr.w	r3, r3, #16
 80017a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a8:	2003      	movs	r0, #3
 80017aa:	f000 f923 	bl	80019f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ae:	200f      	movs	r0, #15
 80017b0:	f000 f808 	bl	80017c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017b4:	f7ff fec2 	bl	800153c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40022000 	.word	0x40022000

080017c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <HAL_InitTick+0x54>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4b12      	ldr	r3, [pc, #72]	; (800181c <HAL_InitTick+0x58>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	4619      	mov	r1, r3
 80017d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017da:	fbb3 f3f1 	udiv	r3, r3, r1
 80017de:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 f93b 	bl	8001a5e <HAL_SYSTICK_Config>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e00e      	b.n	8001810 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b0f      	cmp	r3, #15
 80017f6:	d80a      	bhi.n	800180e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f8:	2200      	movs	r2, #0
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001800:	f000 f903 	bl	8001a0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001804:	4a06      	ldr	r2, [pc, #24]	; (8001820 <HAL_InitTick+0x5c>)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	e000      	b.n	8001810 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
}
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000048 	.word	0x20000048
 800181c:	20000050 	.word	0x20000050
 8001820:	2000004c 	.word	0x2000004c

08001824 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001828:	4b05      	ldr	r3, [pc, #20]	; (8001840 <HAL_IncTick+0x1c>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	461a      	mov	r2, r3
 800182e:	4b05      	ldr	r3, [pc, #20]	; (8001844 <HAL_IncTick+0x20>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4413      	add	r3, r2
 8001834:	4a03      	ldr	r2, [pc, #12]	; (8001844 <HAL_IncTick+0x20>)
 8001836:	6013      	str	r3, [r2, #0]
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr
 8001840:	20000050 	.word	0x20000050
 8001844:	200000f4 	.word	0x200000f4

08001848 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  return uwTick;
 800184c:	4b02      	ldr	r3, [pc, #8]	; (8001858 <HAL_GetTick+0x10>)
 800184e:	681b      	ldr	r3, [r3, #0]
}
 8001850:	4618      	mov	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr
 8001858:	200000f4 	.word	0x200000f4

0800185c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800186c:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <__NVIC_SetPriorityGrouping+0x44>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001872:	68ba      	ldr	r2, [r7, #8]
 8001874:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001878:	4013      	ands	r3, r2
 800187a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001884:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800188c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800188e:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	60d3      	str	r3, [r2, #12]
}
 8001894:	bf00      	nop
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a8:	4b04      	ldr	r3, [pc, #16]	; (80018bc <__NVIC_GetPriorityGrouping+0x18>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	0a1b      	lsrs	r3, r3, #8
 80018ae:	f003 0307 	and.w	r3, r3, #7
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	db0b      	blt.n	80018ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	f003 021f 	and.w	r2, r3, #31
 80018d8:	4906      	ldr	r1, [pc, #24]	; (80018f4 <__NVIC_EnableIRQ+0x34>)
 80018da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018de:	095b      	lsrs	r3, r3, #5
 80018e0:	2001      	movs	r0, #1
 80018e2:	fa00 f202 	lsl.w	r2, r0, r2
 80018e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr
 80018f4:	e000e100 	.word	0xe000e100

080018f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	6039      	str	r1, [r7, #0]
 8001902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001908:	2b00      	cmp	r3, #0
 800190a:	db0a      	blt.n	8001922 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	b2da      	uxtb	r2, r3
 8001910:	490c      	ldr	r1, [pc, #48]	; (8001944 <__NVIC_SetPriority+0x4c>)
 8001912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001916:	0112      	lsls	r2, r2, #4
 8001918:	b2d2      	uxtb	r2, r2
 800191a:	440b      	add	r3, r1
 800191c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001920:	e00a      	b.n	8001938 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	b2da      	uxtb	r2, r3
 8001926:	4908      	ldr	r1, [pc, #32]	; (8001948 <__NVIC_SetPriority+0x50>)
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	3b04      	subs	r3, #4
 8001930:	0112      	lsls	r2, r2, #4
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	440b      	add	r3, r1
 8001936:	761a      	strb	r2, [r3, #24]
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e000e100 	.word	0xe000e100
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800194c:	b480      	push	{r7}
 800194e:	b089      	sub	sp, #36	; 0x24
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	f1c3 0307 	rsb	r3, r3, #7
 8001966:	2b04      	cmp	r3, #4
 8001968:	bf28      	it	cs
 800196a:	2304      	movcs	r3, #4
 800196c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3304      	adds	r3, #4
 8001972:	2b06      	cmp	r3, #6
 8001974:	d902      	bls.n	800197c <NVIC_EncodePriority+0x30>
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3b03      	subs	r3, #3
 800197a:	e000      	b.n	800197e <NVIC_EncodePriority+0x32>
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001980:	f04f 32ff 	mov.w	r2, #4294967295
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	43da      	mvns	r2, r3
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	401a      	ands	r2, r3
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001994:	f04f 31ff 	mov.w	r1, #4294967295
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	fa01 f303 	lsl.w	r3, r1, r3
 800199e:	43d9      	mvns	r1, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a4:	4313      	orrs	r3, r2
         );
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3724      	adds	r7, #36	; 0x24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr

080019b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019c0:	d301      	bcc.n	80019c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019c2:	2301      	movs	r3, #1
 80019c4:	e00f      	b.n	80019e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019c6:	4a0a      	ldr	r2, [pc, #40]	; (80019f0 <SysTick_Config+0x40>)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ce:	210f      	movs	r1, #15
 80019d0:	f04f 30ff 	mov.w	r0, #4294967295
 80019d4:	f7ff ff90 	bl	80018f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d8:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <SysTick_Config+0x40>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019de:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <SysTick_Config+0x40>)
 80019e0:	2207      	movs	r2, #7
 80019e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	e000e010 	.word	0xe000e010

080019f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff ff2d 	bl	800185c <__NVIC_SetPriorityGrouping>
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b086      	sub	sp, #24
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	4603      	mov	r3, r0
 8001a12:	60b9      	str	r1, [r7, #8]
 8001a14:	607a      	str	r2, [r7, #4]
 8001a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a1c:	f7ff ff42 	bl	80018a4 <__NVIC_GetPriorityGrouping>
 8001a20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	68b9      	ldr	r1, [r7, #8]
 8001a26:	6978      	ldr	r0, [r7, #20]
 8001a28:	f7ff ff90 	bl	800194c <NVIC_EncodePriority>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a32:	4611      	mov	r1, r2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff5f 	bl	80018f8 <__NVIC_SetPriority>
}
 8001a3a:	bf00      	nop
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	4603      	mov	r3, r0
 8001a4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff35 	bl	80018c0 <__NVIC_EnableIRQ>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff ffa2 	bl	80019b0 <SysTick_Config>
 8001a6c:	4603      	mov	r3, r0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b08b      	sub	sp, #44	; 0x2c
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a82:	2300      	movs	r3, #0
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a86:	2300      	movs	r3, #0
 8001a88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a8a:	e148      	b.n	8001d1e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	69fa      	ldr	r2, [r7, #28]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	f040 8137 	bne.w	8001d18 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	4aa3      	ldr	r2, [pc, #652]	; (8001d3c <HAL_GPIO_Init+0x2c4>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d05e      	beq.n	8001b72 <HAL_GPIO_Init+0xfa>
 8001ab4:	4aa1      	ldr	r2, [pc, #644]	; (8001d3c <HAL_GPIO_Init+0x2c4>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d875      	bhi.n	8001ba6 <HAL_GPIO_Init+0x12e>
 8001aba:	4aa1      	ldr	r2, [pc, #644]	; (8001d40 <HAL_GPIO_Init+0x2c8>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d058      	beq.n	8001b72 <HAL_GPIO_Init+0xfa>
 8001ac0:	4a9f      	ldr	r2, [pc, #636]	; (8001d40 <HAL_GPIO_Init+0x2c8>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d86f      	bhi.n	8001ba6 <HAL_GPIO_Init+0x12e>
 8001ac6:	4a9f      	ldr	r2, [pc, #636]	; (8001d44 <HAL_GPIO_Init+0x2cc>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d052      	beq.n	8001b72 <HAL_GPIO_Init+0xfa>
 8001acc:	4a9d      	ldr	r2, [pc, #628]	; (8001d44 <HAL_GPIO_Init+0x2cc>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d869      	bhi.n	8001ba6 <HAL_GPIO_Init+0x12e>
 8001ad2:	4a9d      	ldr	r2, [pc, #628]	; (8001d48 <HAL_GPIO_Init+0x2d0>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d04c      	beq.n	8001b72 <HAL_GPIO_Init+0xfa>
 8001ad8:	4a9b      	ldr	r2, [pc, #620]	; (8001d48 <HAL_GPIO_Init+0x2d0>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d863      	bhi.n	8001ba6 <HAL_GPIO_Init+0x12e>
 8001ade:	4a9b      	ldr	r2, [pc, #620]	; (8001d4c <HAL_GPIO_Init+0x2d4>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d046      	beq.n	8001b72 <HAL_GPIO_Init+0xfa>
 8001ae4:	4a99      	ldr	r2, [pc, #612]	; (8001d4c <HAL_GPIO_Init+0x2d4>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d85d      	bhi.n	8001ba6 <HAL_GPIO_Init+0x12e>
 8001aea:	2b12      	cmp	r3, #18
 8001aec:	d82a      	bhi.n	8001b44 <HAL_GPIO_Init+0xcc>
 8001aee:	2b12      	cmp	r3, #18
 8001af0:	d859      	bhi.n	8001ba6 <HAL_GPIO_Init+0x12e>
 8001af2:	a201      	add	r2, pc, #4	; (adr r2, 8001af8 <HAL_GPIO_Init+0x80>)
 8001af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af8:	08001b73 	.word	0x08001b73
 8001afc:	08001b4d 	.word	0x08001b4d
 8001b00:	08001b5f 	.word	0x08001b5f
 8001b04:	08001ba1 	.word	0x08001ba1
 8001b08:	08001ba7 	.word	0x08001ba7
 8001b0c:	08001ba7 	.word	0x08001ba7
 8001b10:	08001ba7 	.word	0x08001ba7
 8001b14:	08001ba7 	.word	0x08001ba7
 8001b18:	08001ba7 	.word	0x08001ba7
 8001b1c:	08001ba7 	.word	0x08001ba7
 8001b20:	08001ba7 	.word	0x08001ba7
 8001b24:	08001ba7 	.word	0x08001ba7
 8001b28:	08001ba7 	.word	0x08001ba7
 8001b2c:	08001ba7 	.word	0x08001ba7
 8001b30:	08001ba7 	.word	0x08001ba7
 8001b34:	08001ba7 	.word	0x08001ba7
 8001b38:	08001ba7 	.word	0x08001ba7
 8001b3c:	08001b55 	.word	0x08001b55
 8001b40:	08001b69 	.word	0x08001b69
 8001b44:	4a82      	ldr	r2, [pc, #520]	; (8001d50 <HAL_GPIO_Init+0x2d8>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d013      	beq.n	8001b72 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b4a:	e02c      	b.n	8001ba6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	623b      	str	r3, [r7, #32]
          break;
 8001b52:	e029      	b.n	8001ba8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	3304      	adds	r3, #4
 8001b5a:	623b      	str	r3, [r7, #32]
          break;
 8001b5c:	e024      	b.n	8001ba8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	3308      	adds	r3, #8
 8001b64:	623b      	str	r3, [r7, #32]
          break;
 8001b66:	e01f      	b.n	8001ba8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	330c      	adds	r3, #12
 8001b6e:	623b      	str	r3, [r7, #32]
          break;
 8001b70:	e01a      	b.n	8001ba8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d102      	bne.n	8001b80 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b7a:	2304      	movs	r3, #4
 8001b7c:	623b      	str	r3, [r7, #32]
          break;
 8001b7e:	e013      	b.n	8001ba8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d105      	bne.n	8001b94 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b88:	2308      	movs	r3, #8
 8001b8a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	69fa      	ldr	r2, [r7, #28]
 8001b90:	611a      	str	r2, [r3, #16]
          break;
 8001b92:	e009      	b.n	8001ba8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b94:	2308      	movs	r3, #8
 8001b96:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	69fa      	ldr	r2, [r7, #28]
 8001b9c:	615a      	str	r2, [r3, #20]
          break;
 8001b9e:	e003      	b.n	8001ba8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	623b      	str	r3, [r7, #32]
          break;
 8001ba4:	e000      	b.n	8001ba8 <HAL_GPIO_Init+0x130>
          break;
 8001ba6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	2bff      	cmp	r3, #255	; 0xff
 8001bac:	d801      	bhi.n	8001bb2 <HAL_GPIO_Init+0x13a>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	e001      	b.n	8001bb6 <HAL_GPIO_Init+0x13e>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	2bff      	cmp	r3, #255	; 0xff
 8001bbc:	d802      	bhi.n	8001bc4 <HAL_GPIO_Init+0x14c>
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	e002      	b.n	8001bca <HAL_GPIO_Init+0x152>
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	3b08      	subs	r3, #8
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	210f      	movs	r1, #15
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	401a      	ands	r2, r3
 8001bdc:	6a39      	ldr	r1, [r7, #32]
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	fa01 f303 	lsl.w	r3, r1, r3
 8001be4:	431a      	orrs	r2, r3
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f000 8090 	beq.w	8001d18 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bf8:	4b56      	ldr	r3, [pc, #344]	; (8001d54 <HAL_GPIO_Init+0x2dc>)
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	4a55      	ldr	r2, [pc, #340]	; (8001d54 <HAL_GPIO_Init+0x2dc>)
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	6193      	str	r3, [r2, #24]
 8001c04:	4b53      	ldr	r3, [pc, #332]	; (8001d54 <HAL_GPIO_Init+0x2dc>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c10:	4a51      	ldr	r2, [pc, #324]	; (8001d58 <HAL_GPIO_Init+0x2e0>)
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	089b      	lsrs	r3, r3, #2
 8001c16:	3302      	adds	r3, #2
 8001c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	f003 0303 	and.w	r3, r3, #3
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	220f      	movs	r2, #15
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	4013      	ands	r3, r2
 8001c32:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a49      	ldr	r2, [pc, #292]	; (8001d5c <HAL_GPIO_Init+0x2e4>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d00d      	beq.n	8001c58 <HAL_GPIO_Init+0x1e0>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a48      	ldr	r2, [pc, #288]	; (8001d60 <HAL_GPIO_Init+0x2e8>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d007      	beq.n	8001c54 <HAL_GPIO_Init+0x1dc>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a47      	ldr	r2, [pc, #284]	; (8001d64 <HAL_GPIO_Init+0x2ec>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d101      	bne.n	8001c50 <HAL_GPIO_Init+0x1d8>
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	e004      	b.n	8001c5a <HAL_GPIO_Init+0x1e2>
 8001c50:	2303      	movs	r3, #3
 8001c52:	e002      	b.n	8001c5a <HAL_GPIO_Init+0x1e2>
 8001c54:	2301      	movs	r3, #1
 8001c56:	e000      	b.n	8001c5a <HAL_GPIO_Init+0x1e2>
 8001c58:	2300      	movs	r3, #0
 8001c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c5c:	f002 0203 	and.w	r2, r2, #3
 8001c60:	0092      	lsls	r2, r2, #2
 8001c62:	4093      	lsls	r3, r2
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c6a:	493b      	ldr	r1, [pc, #236]	; (8001d58 <HAL_GPIO_Init+0x2e0>)
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	089b      	lsrs	r3, r3, #2
 8001c70:	3302      	adds	r3, #2
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d006      	beq.n	8001c92 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c84:	4b38      	ldr	r3, [pc, #224]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	4937      	ldr	r1, [pc, #220]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	608b      	str	r3, [r1, #8]
 8001c90:	e006      	b.n	8001ca0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c92:	4b35      	ldr	r3, [pc, #212]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001c94:	689a      	ldr	r2, [r3, #8]
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	4933      	ldr	r1, [pc, #204]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d006      	beq.n	8001cba <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cac:	4b2e      	ldr	r3, [pc, #184]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001cae:	68da      	ldr	r2, [r3, #12]
 8001cb0:	492d      	ldr	r1, [pc, #180]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	60cb      	str	r3, [r1, #12]
 8001cb8:	e006      	b.n	8001cc8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cba:	4b2b      	ldr	r3, [pc, #172]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001cbc:	68da      	ldr	r2, [r3, #12]
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	4929      	ldr	r1, [pc, #164]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d006      	beq.n	8001ce2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cd4:	4b24      	ldr	r3, [pc, #144]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	4923      	ldr	r1, [pc, #140]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	604b      	str	r3, [r1, #4]
 8001ce0:	e006      	b.n	8001cf0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ce2:	4b21      	ldr	r3, [pc, #132]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	491f      	ldr	r1, [pc, #124]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001cec:	4013      	ands	r3, r2
 8001cee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d006      	beq.n	8001d0a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cfc:	4b1a      	ldr	r3, [pc, #104]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	4919      	ldr	r1, [pc, #100]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	600b      	str	r3, [r1, #0]
 8001d08:	e006      	b.n	8001d18 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d0a:	4b17      	ldr	r3, [pc, #92]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	43db      	mvns	r3, r3
 8001d12:	4915      	ldr	r1, [pc, #84]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001d14:	4013      	ands	r3, r2
 8001d16:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	fa22 f303 	lsr.w	r3, r2, r3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f47f aeaf 	bne.w	8001a8c <HAL_GPIO_Init+0x14>
  }
}
 8001d2e:	bf00      	nop
 8001d30:	bf00      	nop
 8001d32:	372c      	adds	r7, #44	; 0x2c
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bc80      	pop	{r7}
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	10320000 	.word	0x10320000
 8001d40:	10310000 	.word	0x10310000
 8001d44:	10220000 	.word	0x10220000
 8001d48:	10210000 	.word	0x10210000
 8001d4c:	10120000 	.word	0x10120000
 8001d50:	10110000 	.word	0x10110000
 8001d54:	40021000 	.word	0x40021000
 8001d58:	40010000 	.word	0x40010000
 8001d5c:	40010800 	.word	0x40010800
 8001d60:	40010c00 	.word	0x40010c00
 8001d64:	40011000 	.word	0x40011000
 8001d68:	40010400 	.word	0x40010400

08001d6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	887b      	ldrh	r3, [r7, #2]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d002      	beq.n	8001d8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d84:	2301      	movs	r3, #1
 8001d86:	73fb      	strb	r3, [r7, #15]
 8001d88:	e001      	b.n	8001d8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc80      	pop	{r7}
 8001d98:	4770      	bx	lr

08001d9a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	460b      	mov	r3, r1
 8001da4:	807b      	strh	r3, [r7, #2]
 8001da6:	4613      	mov	r3, r2
 8001da8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001daa:	787b      	ldrb	r3, [r7, #1]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001db0:	887a      	ldrh	r2, [r7, #2]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001db6:	e003      	b.n	8001dc0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001db8:	887b      	ldrh	r3, [r7, #2]
 8001dba:	041a      	lsls	r2, r3, #16
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	611a      	str	r2, [r3, #16]
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc80      	pop	{r7}
 8001dc8:	4770      	bx	lr

08001dca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b085      	sub	sp, #20
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ddc:	887a      	ldrh	r2, [r7, #2]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4013      	ands	r3, r2
 8001de2:	041a      	lsls	r2, r3, #16
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	43d9      	mvns	r1, r3
 8001de8:	887b      	ldrh	r3, [r7, #2]
 8001dea:	400b      	ands	r3, r1
 8001dec:	431a      	orrs	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	611a      	str	r2, [r3, #16]
}
 8001df2:	bf00      	nop
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr

08001dfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e26c      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f000 8087 	beq.w	8001f2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e1c:	4b92      	ldr	r3, [pc, #584]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 030c 	and.w	r3, r3, #12
 8001e24:	2b04      	cmp	r3, #4
 8001e26:	d00c      	beq.n	8001e42 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e28:	4b8f      	ldr	r3, [pc, #572]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 030c 	and.w	r3, r3, #12
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d112      	bne.n	8001e5a <HAL_RCC_OscConfig+0x5e>
 8001e34:	4b8c      	ldr	r3, [pc, #560]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e40:	d10b      	bne.n	8001e5a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e42:	4b89      	ldr	r3, [pc, #548]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d06c      	beq.n	8001f28 <HAL_RCC_OscConfig+0x12c>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d168      	bne.n	8001f28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e246      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e62:	d106      	bne.n	8001e72 <HAL_RCC_OscConfig+0x76>
 8001e64:	4b80      	ldr	r3, [pc, #512]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a7f      	ldr	r2, [pc, #508]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e6e:	6013      	str	r3, [r2, #0]
 8001e70:	e02e      	b.n	8001ed0 <HAL_RCC_OscConfig+0xd4>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10c      	bne.n	8001e94 <HAL_RCC_OscConfig+0x98>
 8001e7a:	4b7b      	ldr	r3, [pc, #492]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a7a      	ldr	r2, [pc, #488]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e84:	6013      	str	r3, [r2, #0]
 8001e86:	4b78      	ldr	r3, [pc, #480]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a77      	ldr	r2, [pc, #476]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	e01d      	b.n	8001ed0 <HAL_RCC_OscConfig+0xd4>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e9c:	d10c      	bne.n	8001eb8 <HAL_RCC_OscConfig+0xbc>
 8001e9e:	4b72      	ldr	r3, [pc, #456]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a71      	ldr	r2, [pc, #452]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	4b6f      	ldr	r3, [pc, #444]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a6e      	ldr	r2, [pc, #440]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	e00b      	b.n	8001ed0 <HAL_RCC_OscConfig+0xd4>
 8001eb8:	4b6b      	ldr	r3, [pc, #428]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a6a      	ldr	r2, [pc, #424]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001ebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ec2:	6013      	str	r3, [r2, #0]
 8001ec4:	4b68      	ldr	r3, [pc, #416]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a67      	ldr	r2, [pc, #412]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001eca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ece:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d013      	beq.n	8001f00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed8:	f7ff fcb6 	bl	8001848 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee0:	f7ff fcb2 	bl	8001848 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b64      	cmp	r3, #100	; 0x64
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e1fa      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef2:	4b5d      	ldr	r3, [pc, #372]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0f0      	beq.n	8001ee0 <HAL_RCC_OscConfig+0xe4>
 8001efe:	e014      	b.n	8001f2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f00:	f7ff fca2 	bl	8001848 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f08:	f7ff fc9e 	bl	8001848 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b64      	cmp	r3, #100	; 0x64
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e1e6      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f1a:	4b53      	ldr	r3, [pc, #332]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1f0      	bne.n	8001f08 <HAL_RCC_OscConfig+0x10c>
 8001f26:	e000      	b.n	8001f2a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d063      	beq.n	8001ffe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f36:	4b4c      	ldr	r3, [pc, #304]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f003 030c 	and.w	r3, r3, #12
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00b      	beq.n	8001f5a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f42:	4b49      	ldr	r3, [pc, #292]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f003 030c 	and.w	r3, r3, #12
 8001f4a:	2b08      	cmp	r3, #8
 8001f4c:	d11c      	bne.n	8001f88 <HAL_RCC_OscConfig+0x18c>
 8001f4e:	4b46      	ldr	r3, [pc, #280]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d116      	bne.n	8001f88 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f5a:	4b43      	ldr	r3, [pc, #268]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d005      	beq.n	8001f72 <HAL_RCC_OscConfig+0x176>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d001      	beq.n	8001f72 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e1ba      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f72:	4b3d      	ldr	r3, [pc, #244]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	4939      	ldr	r1, [pc, #228]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f86:	e03a      	b.n	8001ffe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d020      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f90:	4b36      	ldr	r3, [pc, #216]	; (800206c <HAL_RCC_OscConfig+0x270>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f96:	f7ff fc57 	bl	8001848 <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f9e:	f7ff fc53 	bl	8001848 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e19b      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb0:	4b2d      	ldr	r3, [pc, #180]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d0f0      	beq.n	8001f9e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fbc:	4b2a      	ldr	r3, [pc, #168]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	695b      	ldr	r3, [r3, #20]
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	4927      	ldr	r1, [pc, #156]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	600b      	str	r3, [r1, #0]
 8001fd0:	e015      	b.n	8001ffe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fd2:	4b26      	ldr	r3, [pc, #152]	; (800206c <HAL_RCC_OscConfig+0x270>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd8:	f7ff fc36 	bl	8001848 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fe0:	f7ff fc32 	bl	8001848 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e17a      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ff2:	4b1d      	ldr	r3, [pc, #116]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f0      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0308 	and.w	r3, r3, #8
 8002006:	2b00      	cmp	r3, #0
 8002008:	d03a      	beq.n	8002080 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d019      	beq.n	8002046 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002012:	4b17      	ldr	r3, [pc, #92]	; (8002070 <HAL_RCC_OscConfig+0x274>)
 8002014:	2201      	movs	r2, #1
 8002016:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002018:	f7ff fc16 	bl	8001848 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002020:	f7ff fc12 	bl	8001848 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e15a      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002032:	4b0d      	ldr	r3, [pc, #52]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8002034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0f0      	beq.n	8002020 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800203e:	2001      	movs	r0, #1
 8002040:	f000 fa9a 	bl	8002578 <RCC_Delay>
 8002044:	e01c      	b.n	8002080 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002046:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <HAL_RCC_OscConfig+0x274>)
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800204c:	f7ff fbfc 	bl	8001848 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002052:	e00f      	b.n	8002074 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002054:	f7ff fbf8 	bl	8001848 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d908      	bls.n	8002074 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e140      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
 8002066:	bf00      	nop
 8002068:	40021000 	.word	0x40021000
 800206c:	42420000 	.word	0x42420000
 8002070:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002074:	4b9e      	ldr	r3, [pc, #632]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1e9      	bne.n	8002054 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 80a6 	beq.w	80021da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800208e:	2300      	movs	r3, #0
 8002090:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002092:	4b97      	ldr	r3, [pc, #604]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10d      	bne.n	80020ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800209e:	4b94      	ldr	r3, [pc, #592]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	4a93      	ldr	r2, [pc, #588]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 80020a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a8:	61d3      	str	r3, [r2, #28]
 80020aa:	4b91      	ldr	r3, [pc, #580]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020b6:	2301      	movs	r3, #1
 80020b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ba:	4b8e      	ldr	r3, [pc, #568]	; (80022f4 <HAL_RCC_OscConfig+0x4f8>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d118      	bne.n	80020f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020c6:	4b8b      	ldr	r3, [pc, #556]	; (80022f4 <HAL_RCC_OscConfig+0x4f8>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a8a      	ldr	r2, [pc, #552]	; (80022f4 <HAL_RCC_OscConfig+0x4f8>)
 80020cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020d2:	f7ff fbb9 	bl	8001848 <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d8:	e008      	b.n	80020ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020da:	f7ff fbb5 	bl	8001848 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b64      	cmp	r3, #100	; 0x64
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e0fd      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ec:	4b81      	ldr	r3, [pc, #516]	; (80022f4 <HAL_RCC_OscConfig+0x4f8>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0f0      	beq.n	80020da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d106      	bne.n	800210e <HAL_RCC_OscConfig+0x312>
 8002100:	4b7b      	ldr	r3, [pc, #492]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	4a7a      	ldr	r2, [pc, #488]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	6213      	str	r3, [r2, #32]
 800210c:	e02d      	b.n	800216a <HAL_RCC_OscConfig+0x36e>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10c      	bne.n	8002130 <HAL_RCC_OscConfig+0x334>
 8002116:	4b76      	ldr	r3, [pc, #472]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	4a75      	ldr	r2, [pc, #468]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 800211c:	f023 0301 	bic.w	r3, r3, #1
 8002120:	6213      	str	r3, [r2, #32]
 8002122:	4b73      	ldr	r3, [pc, #460]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	4a72      	ldr	r2, [pc, #456]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002128:	f023 0304 	bic.w	r3, r3, #4
 800212c:	6213      	str	r3, [r2, #32]
 800212e:	e01c      	b.n	800216a <HAL_RCC_OscConfig+0x36e>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	2b05      	cmp	r3, #5
 8002136:	d10c      	bne.n	8002152 <HAL_RCC_OscConfig+0x356>
 8002138:	4b6d      	ldr	r3, [pc, #436]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	4a6c      	ldr	r2, [pc, #432]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 800213e:	f043 0304 	orr.w	r3, r3, #4
 8002142:	6213      	str	r3, [r2, #32]
 8002144:	4b6a      	ldr	r3, [pc, #424]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	4a69      	ldr	r2, [pc, #420]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	6213      	str	r3, [r2, #32]
 8002150:	e00b      	b.n	800216a <HAL_RCC_OscConfig+0x36e>
 8002152:	4b67      	ldr	r3, [pc, #412]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	4a66      	ldr	r2, [pc, #408]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002158:	f023 0301 	bic.w	r3, r3, #1
 800215c:	6213      	str	r3, [r2, #32]
 800215e:	4b64      	ldr	r3, [pc, #400]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002160:	6a1b      	ldr	r3, [r3, #32]
 8002162:	4a63      	ldr	r2, [pc, #396]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002164:	f023 0304 	bic.w	r3, r3, #4
 8002168:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d015      	beq.n	800219e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002172:	f7ff fb69 	bl	8001848 <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002178:	e00a      	b.n	8002190 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800217a:	f7ff fb65 	bl	8001848 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	f241 3288 	movw	r2, #5000	; 0x1388
 8002188:	4293      	cmp	r3, r2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e0ab      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002190:	4b57      	ldr	r3, [pc, #348]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0ee      	beq.n	800217a <HAL_RCC_OscConfig+0x37e>
 800219c:	e014      	b.n	80021c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800219e:	f7ff fb53 	bl	8001848 <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a4:	e00a      	b.n	80021bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a6:	f7ff fb4f 	bl	8001848 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e095      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021bc:	4b4c      	ldr	r3, [pc, #304]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1ee      	bne.n	80021a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021c8:	7dfb      	ldrb	r3, [r7, #23]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d105      	bne.n	80021da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ce:	4b48      	ldr	r3, [pc, #288]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	4a47      	ldr	r2, [pc, #284]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 80021d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 8081 	beq.w	80022e6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021e4:	4b42      	ldr	r3, [pc, #264]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 030c 	and.w	r3, r3, #12
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	d061      	beq.n	80022b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d146      	bne.n	8002286 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f8:	4b3f      	ldr	r3, [pc, #252]	; (80022f8 <HAL_RCC_OscConfig+0x4fc>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fe:	f7ff fb23 	bl	8001848 <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002206:	f7ff fb1f 	bl	8001848 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e067      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002218:	4b35      	ldr	r3, [pc, #212]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1f0      	bne.n	8002206 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800222c:	d108      	bne.n	8002240 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800222e:	4b30      	ldr	r3, [pc, #192]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	492d      	ldr	r1, [pc, #180]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 800223c:	4313      	orrs	r3, r2
 800223e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002240:	4b2b      	ldr	r3, [pc, #172]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a19      	ldr	r1, [r3, #32]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	430b      	orrs	r3, r1
 8002252:	4927      	ldr	r1, [pc, #156]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002254:	4313      	orrs	r3, r2
 8002256:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002258:	4b27      	ldr	r3, [pc, #156]	; (80022f8 <HAL_RCC_OscConfig+0x4fc>)
 800225a:	2201      	movs	r2, #1
 800225c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225e:	f7ff faf3 	bl	8001848 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002266:	f7ff faef 	bl	8001848 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e037      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002278:	4b1d      	ldr	r3, [pc, #116]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0f0      	beq.n	8002266 <HAL_RCC_OscConfig+0x46a>
 8002284:	e02f      	b.n	80022e6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002286:	4b1c      	ldr	r3, [pc, #112]	; (80022f8 <HAL_RCC_OscConfig+0x4fc>)
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228c:	f7ff fadc 	bl	8001848 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002294:	f7ff fad8 	bl	8001848 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e020      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022a6:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0x498>
 80022b2:	e018      	b.n	80022e6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	69db      	ldr	r3, [r3, #28]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d101      	bne.n	80022c0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e013      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022c0:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d106      	bne.n	80022e2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022de:	429a      	cmp	r2, r3
 80022e0:	d001      	beq.n	80022e6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e000      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3718      	adds	r7, #24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40021000 	.word	0x40021000
 80022f4:	40007000 	.word	0x40007000
 80022f8:	42420060 	.word	0x42420060

080022fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e0d0      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002310:	4b6a      	ldr	r3, [pc, #424]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d910      	bls.n	8002340 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231e:	4b67      	ldr	r3, [pc, #412]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f023 0207 	bic.w	r2, r3, #7
 8002326:	4965      	ldr	r1, [pc, #404]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	4313      	orrs	r3, r2
 800232c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800232e:	4b63      	ldr	r3, [pc, #396]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	d001      	beq.n	8002340 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0b8      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d020      	beq.n	800238e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	2b00      	cmp	r3, #0
 8002356:	d005      	beq.n	8002364 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002358:	4b59      	ldr	r3, [pc, #356]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	4a58      	ldr	r2, [pc, #352]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 800235e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002362:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0308 	and.w	r3, r3, #8
 800236c:	2b00      	cmp	r3, #0
 800236e:	d005      	beq.n	800237c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002370:	4b53      	ldr	r3, [pc, #332]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	4a52      	ldr	r2, [pc, #328]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002376:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800237a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800237c:	4b50      	ldr	r3, [pc, #320]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	494d      	ldr	r1, [pc, #308]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 800238a:	4313      	orrs	r3, r2
 800238c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d040      	beq.n	800241c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d107      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a2:	4b47      	ldr	r3, [pc, #284]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d115      	bne.n	80023da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e07f      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d107      	bne.n	80023ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ba:	4b41      	ldr	r3, [pc, #260]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d109      	bne.n	80023da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e073      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ca:	4b3d      	ldr	r3, [pc, #244]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e06b      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023da:	4b39      	ldr	r3, [pc, #228]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f023 0203 	bic.w	r2, r3, #3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	4936      	ldr	r1, [pc, #216]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023ec:	f7ff fa2c 	bl	8001848 <HAL_GetTick>
 80023f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f2:	e00a      	b.n	800240a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f4:	f7ff fa28 	bl	8001848 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002402:	4293      	cmp	r3, r2
 8002404:	d901      	bls.n	800240a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e053      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240a:	4b2d      	ldr	r3, [pc, #180]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f003 020c 	and.w	r2, r3, #12
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	429a      	cmp	r2, r3
 800241a:	d1eb      	bne.n	80023f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800241c:	4b27      	ldr	r3, [pc, #156]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	429a      	cmp	r2, r3
 8002428:	d210      	bcs.n	800244c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242a:	4b24      	ldr	r3, [pc, #144]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f023 0207 	bic.w	r2, r3, #7
 8002432:	4922      	ldr	r1, [pc, #136]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	4313      	orrs	r3, r2
 8002438:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800243a:	4b20      	ldr	r3, [pc, #128]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	429a      	cmp	r2, r3
 8002446:	d001      	beq.n	800244c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e032      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b00      	cmp	r3, #0
 8002456:	d008      	beq.n	800246a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002458:	4b19      	ldr	r3, [pc, #100]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	4916      	ldr	r1, [pc, #88]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002466:	4313      	orrs	r3, r2
 8002468:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b00      	cmp	r3, #0
 8002474:	d009      	beq.n	800248a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002476:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	490e      	ldr	r1, [pc, #56]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002486:	4313      	orrs	r3, r2
 8002488:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800248a:	f000 f821 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 800248e:	4602      	mov	r2, r0
 8002490:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	091b      	lsrs	r3, r3, #4
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	490a      	ldr	r1, [pc, #40]	; (80024c4 <HAL_RCC_ClockConfig+0x1c8>)
 800249c:	5ccb      	ldrb	r3, [r1, r3]
 800249e:	fa22 f303 	lsr.w	r3, r2, r3
 80024a2:	4a09      	ldr	r2, [pc, #36]	; (80024c8 <HAL_RCC_ClockConfig+0x1cc>)
 80024a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024a6:	4b09      	ldr	r3, [pc, #36]	; (80024cc <HAL_RCC_ClockConfig+0x1d0>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff f98a 	bl	80017c4 <HAL_InitTick>

  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40022000 	.word	0x40022000
 80024c0:	40021000 	.word	0x40021000
 80024c4:	08002df4 	.word	0x08002df4
 80024c8:	20000048 	.word	0x20000048
 80024cc:	2000004c 	.word	0x2000004c

080024d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b087      	sub	sp, #28
 80024d4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	2300      	movs	r3, #0
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	2300      	movs	r3, #0
 80024e0:	617b      	str	r3, [r7, #20]
 80024e2:	2300      	movs	r3, #0
 80024e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024ea:	4b1e      	ldr	r3, [pc, #120]	; (8002564 <HAL_RCC_GetSysClockFreq+0x94>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f003 030c 	and.w	r3, r3, #12
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d002      	beq.n	8002500 <HAL_RCC_GetSysClockFreq+0x30>
 80024fa:	2b08      	cmp	r3, #8
 80024fc:	d003      	beq.n	8002506 <HAL_RCC_GetSysClockFreq+0x36>
 80024fe:	e027      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002500:	4b19      	ldr	r3, [pc, #100]	; (8002568 <HAL_RCC_GetSysClockFreq+0x98>)
 8002502:	613b      	str	r3, [r7, #16]
      break;
 8002504:	e027      	b.n	8002556 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	0c9b      	lsrs	r3, r3, #18
 800250a:	f003 030f 	and.w	r3, r3, #15
 800250e:	4a17      	ldr	r2, [pc, #92]	; (800256c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002510:	5cd3      	ldrb	r3, [r2, r3]
 8002512:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d010      	beq.n	8002540 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800251e:	4b11      	ldr	r3, [pc, #68]	; (8002564 <HAL_RCC_GetSysClockFreq+0x94>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	0c5b      	lsrs	r3, r3, #17
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	4a11      	ldr	r2, [pc, #68]	; (8002570 <HAL_RCC_GetSysClockFreq+0xa0>)
 800252a:	5cd3      	ldrb	r3, [r2, r3]
 800252c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a0d      	ldr	r2, [pc, #52]	; (8002568 <HAL_RCC_GetSysClockFreq+0x98>)
 8002532:	fb02 f203 	mul.w	r2, r2, r3
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	fbb2 f3f3 	udiv	r3, r2, r3
 800253c:	617b      	str	r3, [r7, #20]
 800253e:	e004      	b.n	800254a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a0c      	ldr	r2, [pc, #48]	; (8002574 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002544:	fb02 f303 	mul.w	r3, r2, r3
 8002548:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	613b      	str	r3, [r7, #16]
      break;
 800254e:	e002      	b.n	8002556 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002550:	4b05      	ldr	r3, [pc, #20]	; (8002568 <HAL_RCC_GetSysClockFreq+0x98>)
 8002552:	613b      	str	r3, [r7, #16]
      break;
 8002554:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002556:	693b      	ldr	r3, [r7, #16]
}
 8002558:	4618      	mov	r0, r3
 800255a:	371c      	adds	r7, #28
 800255c:	46bd      	mov	sp, r7
 800255e:	bc80      	pop	{r7}
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	40021000 	.word	0x40021000
 8002568:	007a1200 	.word	0x007a1200
 800256c:	08002e04 	.word	0x08002e04
 8002570:	08002e14 	.word	0x08002e14
 8002574:	003d0900 	.word	0x003d0900

08002578 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002580:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <RCC_Delay+0x34>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a0a      	ldr	r2, [pc, #40]	; (80025b0 <RCC_Delay+0x38>)
 8002586:	fba2 2303 	umull	r2, r3, r2, r3
 800258a:	0a5b      	lsrs	r3, r3, #9
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	fb02 f303 	mul.w	r3, r2, r3
 8002592:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002594:	bf00      	nop
  }
  while (Delay --);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	1e5a      	subs	r2, r3, #1
 800259a:	60fa      	str	r2, [r7, #12]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1f9      	bne.n	8002594 <RCC_Delay+0x1c>
}
 80025a0:	bf00      	nop
 80025a2:	bf00      	nop
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr
 80025ac:	20000048 	.word	0x20000048
 80025b0:	10624dd3 	.word	0x10624dd3

080025b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e041      	b.n	800264a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d106      	bne.n	80025e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7fe ffe0 	bl	80015a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2202      	movs	r2, #2
 80025e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3304      	adds	r3, #4
 80025f0:	4619      	mov	r1, r3
 80025f2:	4610      	mov	r0, r2
 80025f4:	f000 fa6e 	bl	8002ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
	...

08002654 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b01      	cmp	r3, #1
 8002666:	d001      	beq.n	800266c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e035      	b.n	80026d8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2202      	movs	r2, #2
 8002670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68da      	ldr	r2, [r3, #12]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f042 0201 	orr.w	r2, r2, #1
 8002682:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a16      	ldr	r2, [pc, #88]	; (80026e4 <HAL_TIM_Base_Start_IT+0x90>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d009      	beq.n	80026a2 <HAL_TIM_Base_Start_IT+0x4e>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002696:	d004      	beq.n	80026a2 <HAL_TIM_Base_Start_IT+0x4e>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a12      	ldr	r2, [pc, #72]	; (80026e8 <HAL_TIM_Base_Start_IT+0x94>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d111      	bne.n	80026c6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2b06      	cmp	r3, #6
 80026b2:	d010      	beq.n	80026d6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f042 0201 	orr.w	r2, r2, #1
 80026c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026c4:	e007      	b.n	80026d6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f042 0201 	orr.w	r2, r2, #1
 80026d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	40012c00 	.word	0x40012c00
 80026e8:	40000400 	.word	0x40000400

080026ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d122      	bne.n	8002748 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b02      	cmp	r3, #2
 800270e:	d11b      	bne.n	8002748 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f06f 0202 	mvn.w	r2, #2
 8002718:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	f003 0303 	and.w	r3, r3, #3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f9b4 	bl	8002a9c <HAL_TIM_IC_CaptureCallback>
 8002734:	e005      	b.n	8002742 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 f9a7 	bl	8002a8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f9b6 	bl	8002aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	f003 0304 	and.w	r3, r3, #4
 8002752:	2b04      	cmp	r3, #4
 8002754:	d122      	bne.n	800279c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b04      	cmp	r3, #4
 8002762:	d11b      	bne.n	800279c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f06f 0204 	mvn.w	r2, #4
 800276c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2202      	movs	r2, #2
 8002772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f98a 	bl	8002a9c <HAL_TIM_IC_CaptureCallback>
 8002788:	e005      	b.n	8002796 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f97d 	bl	8002a8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 f98c 	bl	8002aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	2b08      	cmp	r3, #8
 80027a8:	d122      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	f003 0308 	and.w	r3, r3, #8
 80027b4:	2b08      	cmp	r3, #8
 80027b6:	d11b      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f06f 0208 	mvn.w	r2, #8
 80027c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2204      	movs	r2, #4
 80027c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f960 	bl	8002a9c <HAL_TIM_IC_CaptureCallback>
 80027dc:	e005      	b.n	80027ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 f953 	bl	8002a8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 f962 	bl	8002aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	f003 0310 	and.w	r3, r3, #16
 80027fa:	2b10      	cmp	r3, #16
 80027fc:	d122      	bne.n	8002844 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	f003 0310 	and.w	r3, r3, #16
 8002808:	2b10      	cmp	r3, #16
 800280a:	d11b      	bne.n	8002844 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f06f 0210 	mvn.w	r2, #16
 8002814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2208      	movs	r2, #8
 800281a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 f936 	bl	8002a9c <HAL_TIM_IC_CaptureCallback>
 8002830:	e005      	b.n	800283e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f929 	bl	8002a8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 f938 	bl	8002aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b01      	cmp	r3, #1
 8002850:	d10e      	bne.n	8002870 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b01      	cmp	r3, #1
 800285e:	d107      	bne.n	8002870 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f06f 0201 	mvn.w	r2, #1
 8002868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7fe ff36 	bl	80016dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800287a:	2b80      	cmp	r3, #128	; 0x80
 800287c:	d10e      	bne.n	800289c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002888:	2b80      	cmp	r3, #128	; 0x80
 800288a:	d107      	bne.n	800289c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 fa6b 	bl	8002d72 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a6:	2b40      	cmp	r3, #64	; 0x40
 80028a8:	d10e      	bne.n	80028c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b4:	2b40      	cmp	r3, #64	; 0x40
 80028b6:	d107      	bne.n	80028c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 f8fc 	bl	8002ac0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	f003 0320 	and.w	r3, r3, #32
 80028d2:	2b20      	cmp	r3, #32
 80028d4:	d10e      	bne.n	80028f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f003 0320 	and.w	r3, r3, #32
 80028e0:	2b20      	cmp	r3, #32
 80028e2:	d107      	bne.n	80028f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f06f 0220 	mvn.w	r2, #32
 80028ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 fa36 	bl	8002d60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028f4:	bf00      	nop
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002906:	2300      	movs	r3, #0
 8002908:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002910:	2b01      	cmp	r3, #1
 8002912:	d101      	bne.n	8002918 <HAL_TIM_ConfigClockSource+0x1c>
 8002914:	2302      	movs	r3, #2
 8002916:	e0b4      	b.n	8002a82 <HAL_TIM_ConfigClockSource+0x186>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2202      	movs	r2, #2
 8002924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002936:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800293e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68ba      	ldr	r2, [r7, #8]
 8002946:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002950:	d03e      	beq.n	80029d0 <HAL_TIM_ConfigClockSource+0xd4>
 8002952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002956:	f200 8087 	bhi.w	8002a68 <HAL_TIM_ConfigClockSource+0x16c>
 800295a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800295e:	f000 8086 	beq.w	8002a6e <HAL_TIM_ConfigClockSource+0x172>
 8002962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002966:	d87f      	bhi.n	8002a68 <HAL_TIM_ConfigClockSource+0x16c>
 8002968:	2b70      	cmp	r3, #112	; 0x70
 800296a:	d01a      	beq.n	80029a2 <HAL_TIM_ConfigClockSource+0xa6>
 800296c:	2b70      	cmp	r3, #112	; 0x70
 800296e:	d87b      	bhi.n	8002a68 <HAL_TIM_ConfigClockSource+0x16c>
 8002970:	2b60      	cmp	r3, #96	; 0x60
 8002972:	d050      	beq.n	8002a16 <HAL_TIM_ConfigClockSource+0x11a>
 8002974:	2b60      	cmp	r3, #96	; 0x60
 8002976:	d877      	bhi.n	8002a68 <HAL_TIM_ConfigClockSource+0x16c>
 8002978:	2b50      	cmp	r3, #80	; 0x50
 800297a:	d03c      	beq.n	80029f6 <HAL_TIM_ConfigClockSource+0xfa>
 800297c:	2b50      	cmp	r3, #80	; 0x50
 800297e:	d873      	bhi.n	8002a68 <HAL_TIM_ConfigClockSource+0x16c>
 8002980:	2b40      	cmp	r3, #64	; 0x40
 8002982:	d058      	beq.n	8002a36 <HAL_TIM_ConfigClockSource+0x13a>
 8002984:	2b40      	cmp	r3, #64	; 0x40
 8002986:	d86f      	bhi.n	8002a68 <HAL_TIM_ConfigClockSource+0x16c>
 8002988:	2b30      	cmp	r3, #48	; 0x30
 800298a:	d064      	beq.n	8002a56 <HAL_TIM_ConfigClockSource+0x15a>
 800298c:	2b30      	cmp	r3, #48	; 0x30
 800298e:	d86b      	bhi.n	8002a68 <HAL_TIM_ConfigClockSource+0x16c>
 8002990:	2b20      	cmp	r3, #32
 8002992:	d060      	beq.n	8002a56 <HAL_TIM_ConfigClockSource+0x15a>
 8002994:	2b20      	cmp	r3, #32
 8002996:	d867      	bhi.n	8002a68 <HAL_TIM_ConfigClockSource+0x16c>
 8002998:	2b00      	cmp	r3, #0
 800299a:	d05c      	beq.n	8002a56 <HAL_TIM_ConfigClockSource+0x15a>
 800299c:	2b10      	cmp	r3, #16
 800299e:	d05a      	beq.n	8002a56 <HAL_TIM_ConfigClockSource+0x15a>
 80029a0:	e062      	b.n	8002a68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6818      	ldr	r0, [r3, #0]
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	6899      	ldr	r1, [r3, #8]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	f000 f95e 	bl	8002c72 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80029c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68ba      	ldr	r2, [r7, #8]
 80029cc:	609a      	str	r2, [r3, #8]
      break;
 80029ce:	e04f      	b.n	8002a70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6818      	ldr	r0, [r3, #0]
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	6899      	ldr	r1, [r3, #8]
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	f000 f947 	bl	8002c72 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689a      	ldr	r2, [r3, #8]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029f2:	609a      	str	r2, [r3, #8]
      break;
 80029f4:	e03c      	b.n	8002a70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6818      	ldr	r0, [r3, #0]
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	6859      	ldr	r1, [r3, #4]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	461a      	mov	r2, r3
 8002a04:	f000 f8be 	bl	8002b84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2150      	movs	r1, #80	; 0x50
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f000 f915 	bl	8002c3e <TIM_ITRx_SetConfig>
      break;
 8002a14:	e02c      	b.n	8002a70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6818      	ldr	r0, [r3, #0]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	6859      	ldr	r1, [r3, #4]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	461a      	mov	r2, r3
 8002a24:	f000 f8dc 	bl	8002be0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2160      	movs	r1, #96	; 0x60
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f000 f905 	bl	8002c3e <TIM_ITRx_SetConfig>
      break;
 8002a34:	e01c      	b.n	8002a70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6818      	ldr	r0, [r3, #0]
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	6859      	ldr	r1, [r3, #4]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	461a      	mov	r2, r3
 8002a44:	f000 f89e 	bl	8002b84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2140      	movs	r1, #64	; 0x40
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 f8f5 	bl	8002c3e <TIM_ITRx_SetConfig>
      break;
 8002a54:	e00c      	b.n	8002a70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4610      	mov	r0, r2
 8002a62:	f000 f8ec 	bl	8002c3e <TIM_ITRx_SetConfig>
      break;
 8002a66:	e003      	b.n	8002a70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a6c:	e000      	b.n	8002a70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b083      	sub	sp, #12
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr

08002a9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bc80      	pop	{r7}
 8002aac:	4770      	bx	lr

08002aae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr

08002ac0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr
	...

08002ad4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a25      	ldr	r2, [pc, #148]	; (8002b7c <TIM_Base_SetConfig+0xa8>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d007      	beq.n	8002afc <TIM_Base_SetConfig+0x28>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002af2:	d003      	beq.n	8002afc <TIM_Base_SetConfig+0x28>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a22      	ldr	r2, [pc, #136]	; (8002b80 <TIM_Base_SetConfig+0xac>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d108      	bne.n	8002b0e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a1a      	ldr	r2, [pc, #104]	; (8002b7c <TIM_Base_SetConfig+0xa8>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d007      	beq.n	8002b26 <TIM_Base_SetConfig+0x52>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b1c:	d003      	beq.n	8002b26 <TIM_Base_SetConfig+0x52>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a17      	ldr	r2, [pc, #92]	; (8002b80 <TIM_Base_SetConfig+0xac>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d108      	bne.n	8002b38 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a07      	ldr	r2, [pc, #28]	; (8002b7c <TIM_Base_SetConfig+0xa8>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d103      	bne.n	8002b6c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	691a      	ldr	r2, [r3, #16]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	615a      	str	r2, [r3, #20]
}
 8002b72:	bf00      	nop
 8002b74:	3714      	adds	r7, #20
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr
 8002b7c:	40012c00 	.word	0x40012c00
 8002b80:	40000400 	.word	0x40000400

08002b84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b087      	sub	sp, #28
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	f023 0201 	bic.w	r2, r3, #1
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	011b      	lsls	r3, r3, #4
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f023 030a 	bic.w	r3, r3, #10
 8002bc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	621a      	str	r2, [r3, #32]
}
 8002bd6:	bf00      	nop
 8002bd8:	371c      	adds	r7, #28
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr

08002be0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b087      	sub	sp, #28
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	f023 0210 	bic.w	r2, r3, #16
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	031b      	lsls	r3, r3, #12
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c1c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	011b      	lsls	r3, r3, #4
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	621a      	str	r2, [r3, #32]
}
 8002c34:	bf00      	nop
 8002c36:	371c      	adds	r7, #28
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr

08002c3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b085      	sub	sp, #20
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
 8002c46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	f043 0307 	orr.w	r3, r3, #7
 8002c60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	609a      	str	r2, [r3, #8]
}
 8002c68:	bf00      	nop
 8002c6a:	3714      	adds	r7, #20
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bc80      	pop	{r7}
 8002c70:	4770      	bx	lr

08002c72 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b087      	sub	sp, #28
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	60f8      	str	r0, [r7, #12]
 8002c7a:	60b9      	str	r1, [r7, #8]
 8002c7c:	607a      	str	r2, [r7, #4]
 8002c7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c8c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	021a      	lsls	r2, r3, #8
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	431a      	orrs	r2, r3
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	609a      	str	r2, [r3, #8]
}
 8002ca6:	bf00      	nop
 8002ca8:	371c      	adds	r7, #28
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bc80      	pop	{r7}
 8002cae:	4770      	bx	lr

08002cb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d101      	bne.n	8002cc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	e041      	b.n	8002d4c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a14      	ldr	r2, [pc, #80]	; (8002d58 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d009      	beq.n	8002d20 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d14:	d004      	beq.n	8002d20 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a10      	ldr	r2, [pc, #64]	; (8002d5c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d10c      	bne.n	8002d3a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	68ba      	ldr	r2, [r7, #8]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3714      	adds	r7, #20
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bc80      	pop	{r7}
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	40012c00 	.word	0x40012c00
 8002d5c:	40000400 	.word	0x40000400

08002d60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bc80      	pop	{r7}
 8002d70:	4770      	bx	lr

08002d72 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr

08002d84 <__libc_init_array>:
 8002d84:	b570      	push	{r4, r5, r6, lr}
 8002d86:	2600      	movs	r6, #0
 8002d88:	4d0c      	ldr	r5, [pc, #48]	; (8002dbc <__libc_init_array+0x38>)
 8002d8a:	4c0d      	ldr	r4, [pc, #52]	; (8002dc0 <__libc_init_array+0x3c>)
 8002d8c:	1b64      	subs	r4, r4, r5
 8002d8e:	10a4      	asrs	r4, r4, #2
 8002d90:	42a6      	cmp	r6, r4
 8002d92:	d109      	bne.n	8002da8 <__libc_init_array+0x24>
 8002d94:	f000 f822 	bl	8002ddc <_init>
 8002d98:	2600      	movs	r6, #0
 8002d9a:	4d0a      	ldr	r5, [pc, #40]	; (8002dc4 <__libc_init_array+0x40>)
 8002d9c:	4c0a      	ldr	r4, [pc, #40]	; (8002dc8 <__libc_init_array+0x44>)
 8002d9e:	1b64      	subs	r4, r4, r5
 8002da0:	10a4      	asrs	r4, r4, #2
 8002da2:	42a6      	cmp	r6, r4
 8002da4:	d105      	bne.n	8002db2 <__libc_init_array+0x2e>
 8002da6:	bd70      	pop	{r4, r5, r6, pc}
 8002da8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dac:	4798      	blx	r3
 8002dae:	3601      	adds	r6, #1
 8002db0:	e7ee      	b.n	8002d90 <__libc_init_array+0xc>
 8002db2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002db6:	4798      	blx	r3
 8002db8:	3601      	adds	r6, #1
 8002dba:	e7f2      	b.n	8002da2 <__libc_init_array+0x1e>
 8002dbc:	08002e18 	.word	0x08002e18
 8002dc0:	08002e18 	.word	0x08002e18
 8002dc4:	08002e18 	.word	0x08002e18
 8002dc8:	08002e1c 	.word	0x08002e1c

08002dcc <memset>:
 8002dcc:	4603      	mov	r3, r0
 8002dce:	4402      	add	r2, r0
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d100      	bne.n	8002dd6 <memset+0xa>
 8002dd4:	4770      	bx	lr
 8002dd6:	f803 1b01 	strb.w	r1, [r3], #1
 8002dda:	e7f9      	b.n	8002dd0 <memset+0x4>

08002ddc <_init>:
 8002ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dde:	bf00      	nop
 8002de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002de2:	bc08      	pop	{r3}
 8002de4:	469e      	mov	lr, r3
 8002de6:	4770      	bx	lr

08002de8 <_fini>:
 8002de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dea:	bf00      	nop
 8002dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dee:	bc08      	pop	{r3}
 8002df0:	469e      	mov	lr, r3
 8002df2:	4770      	bx	lr
